module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=18)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={};this.getAttemptToRemove=function(){return t.attemptToRemove},this.setAttemptToRemove=function(e){t.attemptToRemove=e},this.setDraggedElement=function(e){t.draggedElement=e},this.getDraggedElement=function(){return t.draggedElement},this.registerPaletteElements=function(e){t.registeredPaletteElements=e},this.getRegisteredPaletteElements=function(){return t.registeredPaletteElements},this.error=function(e){return console.error(e),!1},this.log=function(e){return console.log(e),!0}};t.default=r},function(e,t){e.exports=require("react")},function(e,t,n){e.exports=n(16)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0),a=(r=o)&&r.__esModule?r:{default:r};var i=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={},n={change:[]};t.tree=[{id:"root",fields:[]}];var r=function(){n.change.forEach(function(e){return e(t.tree)})};this.updateState=function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};!function e(n,r,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.tree,i=a.find(function(e){return e.id===r}),s=!1;if(i){if(n===r)i.fields=o;else if(i.fields&&o.length){var u=[];o.forEach(function(e){var t=i.fields.findIndex(function(t){return t.id===e.id});-1===t?u.push(e):i.fields=i.fields.map(function(n,r){return r===t?e:n})}),u.length&&(i.fields=i.fields.concat(u))}else n&&i.fields?i.fields=i.fields.filter(function(e){return e.dropzoneID!==n}):i.fields=o;s=!0}else for(var l=0;l<a.length;l++){var f=a[l].fields,c=!1;if(f&&(c=e(n,r,o,f)),c)break}return s}(e,n,o),a(t.tree),r()},this.getState=function(){return t.tree},this.clearState=function(){var e=t.tree[0],n=e.fields.length;return e.fields.forEach(function(e,t){e.flushDroppedElements(function(){t===n-1&&r()})}),!0},this.addEventListener=function(e,t){var r=null;return"function"!=typeof t?(a.default.error("`cb` param has to be function"),!1):(Object.prototype.hasOwnProperty.call(n,e)?(n[e].push(t),r=t):a.default.error("No such event"),r)},this.removeEventListener=function(e,t){Object.prototype.hasOwnProperty.call(n,e)?n[e]=n[e].filter(function(e){return e!==t}):a.default.error("No such event")}};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=f(a),s=f(n(2)),u=f(n(3)),l=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return d.call(n),n.canvasRef=i.default.createRef(),n.state={initialElements:[],droppedElements:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillMount",value:function(){this._setInitialElements(this.props.initialElements)}},{key:"componentWillReceiveProps",value:function(e){var t=e.initialElements;this._setInitialElements(t)}},{key:"render",value:function(){var e=this,t=this.state.droppedElements,n=this.props,o=n.capacity,a=n.id;return i.default.createElement("div",{ref:this.canvasRef,className:(o&&o===t.length?"no-space":"")+" "+("root"===a?"canvas":"")+" dropzone",onDragOver:this._onDragOver,onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDrop:this._onDrop,onDragEnd:this._onDragEnd},t.map(function(t){return e._renderDragItem(r({},t))}),t.length?null:i.default.createElement("div",{className:("root"===a?"canvas":"")+" dropzone"},i.default.createElement("p",{className:"dropzone-empty"},"Drop Here")))}}]),t}(),d=function(){var e=this;this._setInitialElements=function(t){if(Array.isArray(t)&&t.length&&!e.state.initialElements.length){var n=e.props.id,o=t.map(function(t){return r({},t,{key:t.id,dropzoneID:n,showBasicContent:!1,removeElement:e._removeElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})});e.setState({initialElements:o,droppedElements:o},function(){return e._updateState()})}},this._manageInsideClass=function(t,n){var r=t.target;e.canvasRef.current===r&&r.classList[n]("inside")},this._removeElement=function(t){var n=e.state.droppedElements.findIndex(function(e){return e.id===t});e.setState({droppedElements:e.state.droppedElements.filter(function(e,t){return t!==n})},function(){return e._updateState()})},this._updateState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=e.props,r=n.id,o=n.parentID;u.default.updateState(r,o,e.state.droppedElements,t)},this._flushDroppedElements=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};e.setState({droppedElements:[]},function(){return e._updateState(t)})},this._checkAndRemoveElement=function(){var t=l.default.getDraggedElement(),n=t.removeElement,r=t.elementID,o=e.props.onElementMove(t),a=!l.default.getAttemptToRemove();o&&a&&n(r)},this._onDragOver=function(e){e.preventDefault()},this._onDragLeave=function(t){e._manageInsideClass(t,"remove"),l.default.setAttemptToRemove(!0)},this._onDragEnter=function(t){e._manageInsideClass(t,"add"),l.default.setAttemptToRemove(!1)},this._onDrop=function(t){t.preventDefault(),t.stopPropagation(),l.default.setAttemptToRemove(!1),e._manageInsideClass(t,"remove");var n=e.props.onDrop,o=JSON.parse(t.dataTransfer.getData("data"));return o=r({},o),n?n(o,e._addElement):e._addElement(o)},this._addElement=function(t){var n=e.props,o=n.id,a=n.capacity,i=l.default.getDraggedElement(),s=!t||!t.id,u=t.id&&e.state.droppedElements.filter(function(e){return e.id===t.id}).length;if(s||u)return l.default.error("Duplicate or invalid ID");var f=e.state.droppedElements.concat(r({},t,{key:t.id,dropzoneID:o,showBasicContent:!1,removeElement:e._removeElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement}));return a&&f.length>a?l.default.error("Maximum capacity of canvas("+o+") is "+a):(e.setState({droppedElements:f},function(){i&&"function"==typeof i.checkAndRemoveElement&&i.checkAndRemoveElement(),e._updateState()}),{dropzoneID:o,elements:f})},this._renderDragItem=function(e){var t=l.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null}};c.propTypes={id:s.default.string.isRequired,capacity:s.default.number,onDrop:s.default.func,onElementMove:s.default.func,initialElements:s.default.instanceOf(s.default.array),parentID:s.default.string.isRequired},c.defaultProps={initialElements:[],onElementMove:function(){return!0}},t.default=c},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,l=0,f=[],c=n(5);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(b(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(b(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function m(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=l++;n=u||(u=v(t)),r=_.bind(null,n,i,!1),o=_.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete a[s.id]}}}};var y,E=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"/* Very basic style */\r\n\r\n/* Prevent the text contents of draggable elements from being selectable. */\r\n[draggable] {\r\n  -moz-user-select: none;\r\n  -khtml-user-select: none;\r\n  -webkit-user-select: none;\r\n  user-select: none;\r\n\r\n  /* Required to make elements draggable in old WebKit */\r\n  -khtml-user-drag: element;\r\n  -webkit-user-drag: element;\r\n}\r\n\r\n/* class gets appended to canvas when user dragging over on it */\r\n.inside {\r\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n  box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n}\r\n\r\n.trash-box.inside,\r\n.dropzone.inside.no-space {\r\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.5);\r\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\r\n  box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\r\n}\r\n\r\n.dropzone {\r\n  width: 100%;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  background: #f0faff;\r\n  border: 1px solid #0277bd;\r\n}\r\n\r\n.palette {\r\n  padding: 10px;\r\n  background: #fff;\r\n  box-sizing: border-box;\r\n  border: 1px solid #01579b;\r\n}\r\n\r\n.drag-item {\r\n  padding: 10px;\r\n  color: #01579b;\r\n  box-sizing: border-box;\r\n  background-color: #b3e5fc;\r\n  border: 1px solid #01579b;\r\n}\r\n\r\n.dropzone-empty {\r\n  color: #01579b;\r\n  text-align: center;\r\n  animation-name: changeColor;\r\n  animation-duration: 2s;\r\n  animation-timing-function: ease-in-out;\r\n  animation-iteration-count: infinite;\r\n}\r\n\r\n@keyframes changeColor {\r\n  25% {\r\n    transform: scale(1);\r\n    opacity: 1;\r\n  }\r\n\r\n  75% {\r\n    transform: scale(1);\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n.palette-wrapper .drag-item {\r\n  color: #fff;\r\n  background-color: #01579b;\r\n}\r\n\r\n.drag-item + div {\r\n  margin-top: 10px;\r\n}\r\n\r\n.trash-box {\r\n  padding: 30px 10px;\r\n  margin: 10px 0;\r\n  color: #b71c1c;\r\n  background: #ffcdd2;\r\n  text-align: center;\r\n  border: 1px solid #b71c1c;\r\n}\r\n",""])},function(e,t,n){var r=n(8);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=u(o),i=u(n(2)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._manageInsideClass=function(e,t){var r=e.target;n.trashRef.current===r&&r.classList[t]("inside")},n._onDrop=function(e){e.preventDefault(),e.stopPropagation();var t=s.default.getDraggedElement();if(!t)return!1;var r=n.props,o=r.onBeforeTrash,a=r.onAfterTrash,i=t.removeElement,u=o(t);return n._manageInsideClass(e,"remove"),u&&s.default.getAttemptToRemove()&&(i(t.elementID),s.default.setDraggedElement(null),a()),s.default.setAttemptToRemove(!1),!0},n._onDragOver=function(e){e.preventDefault()},n._onDragLeave=function(e){n._manageInsideClass(e,"remove")},n._onDragEnter=function(e){s.default.getDraggedElement()&&n._manageInsideClass(e,"add")},n.trashRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",{ref:this.trashRef,className:"trash-box",onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDragOver:this._onDragOver,onDrop:this._onDrop},this.props.children||a.default.createElement("span",null,"Trash Box"))}}]),t}();l.propTypes={onBeforeTrash:i.default.func,onAfterTrash:i.default.func,children:i.default.oneOfType([i.default.arrayOf(i.default.element),i.default.element])},l.defaultProps={onBeforeTrash:function(){return!0},onAfterTrash:function(){return!0}},t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=l(a),s=l(n(2)),u=l(n(0));function l(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),s=0;s<o;s++)a[s]=arguments[s];return n=r=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._renderList=function(e){var t=u.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.paletteElements;return i.default.createElement("div",{className:"palette"},t.map(function(t){return e._renderList(r({},t,{key:t.id,showBasicContent:!0}))}))}}]),t}();c.propTypes={paletteElements:s.default.arrayOf(function(e){var t=!1;return e.forEach(function(n){n&&!n.id&&(t="`id` is required in all palette element"),e.filter(function(e){return e.id===n.id}).length>1&&(t="`id` of palette element should be unique")}),!t||new Error(t)})},c.defaultProps={paletteElements:[]},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=l(a),s=l(n(2)),u=l(n(0));function l(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._dragEnd=function(e){e.stopPropagation(),u.default.setDraggedElement(null)},r._dragStart=function(e){e.stopPropagation();var t=r.props,n=t.id,o=t.type,a=t.name,i=t.payload,s=t.dropzoneID,l=t.removeElement,f=t.checkAndRemoveElement,c={id:n,type:o,name:a,payload:i};e.dataTransfer.effectAllowed="copy",e.dataTransfer.setData("data",JSON.stringify(c)),s&&u.default.setDraggedElement({elementID:n,dropzoneID:s,removeElement:l,checkAndRemoveElement:f})},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this.props.elementProps;return i.default.createElement("div",r({className:"drag-item",onDragStart:this._dragStart,onDragEnd:this._dragEnd,draggable:!0},e),this.props.children)}}]),t}();c.propTypes={id:s.default.string.isRequired,name:s.default.string,dropzoneID:s.default.string,payload:s.default.instanceOf(s.default.object),elementProps:s.default.instanceOf(s.default.object),type:s.default.string.isRequired,children:s.default.oneOfType([s.default.arrayOf(s.default.element),s.default.element]).isRequired,removeElement:s.default.func,checkAndRemoveElement:s.default.func},c.defaultProps={checkAndRemoveElement:function(){return!0},elementProps:null,payload:null},t.default=c},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,s,u){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var f=[n,o,a,i,s,u],c=0;(l=new Error(t.replace(/%s/g,function(){return f[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(15),o=n(14),a=n(13);e.exports=function(){function e(e,t,n,r,i,s){s!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=i(n(1)),a=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return o.default.createElement("div",{className:"main-canvas"},o.default.createElement(a.default,r({},e,{parentID:"root",id:"root"})))}},function(e,t,n){"use strict";var r=f(n(17)),o=f(n(4)),a=f(n(12)),i=f(n(11)),s=f(n(10)),u=f(n(3)),l=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}n(9),e.exports={Canvas:r.default,Dropzone:o.default,Draggable:a.default,Palette:i.default,Trash:s.default,state:u.default,core:l.default,registerPaletteElements:l.default.registerPaletteElements}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
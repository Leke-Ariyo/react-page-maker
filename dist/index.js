module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={};this.getAttemptToRemove=function(){return t.attemptToRemove},this.setAttemptToRemove=function(e){t.attemptToRemove=e},this.setDraggedElement=function(e){t.draggedElement=e},this.getDraggedElement=function(){return t.draggedElement},this.registerPaletteElements=function(e){t.registeredPaletteElements=e},this.getRegisteredPaletteElements=function(){return t.registeredPaletteElements||[]},this.setDropPostion=function(e){t.dropPosition=e},this.getDropPostion=function(){return t.dropPosition},this.error=console.error,this.log=console.log};t.default=r},function(e,t){e.exports=require("react")},function(e,t,n){e.exports=n(18)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=n(14),i=(r=a)&&r.__esModule?r:{default:r};var s=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={},n=["id","type","name","payload","dropzoneID","parentID"];t.tree=[{id:"root",fields:[]}];var r=function e(n,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.tree,a=o.find(function(e){return e.id===r});if(!a)for(var i=0;i<o.length;i++){var s=o[i];if(s.fields){var l=e(n,r,s.fields);if(l)return l}}return a},a=function(e,t,n){var o=r(t,n);return o?o.fields.find(function(t){return t.id===e}):null},s=function(e,t){var r={};return e?(Object.keys(e).forEach(function(o){"function"!=typeof e[o]&&(t||!t&&-1!==n.indexOf(o))&&(r[o]=e[o])}),r):null},l=function(){return s(a.apply(void 0,arguments))};this.updateState=function(e,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},a=arguments[4];!function e(n,r,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.tree,i=a.find(function(e){return e.id===r}),s=!1;if(i){if(n===r)i.fields=o;else if(i.fields&&o.length){var l=[];i.fields.filter(function(e){return e.dropzoneID===n}).length!==o.length?i.fields=o.concat(i.fields.filter(function(e){return e.dropzoneID!==n})):(o.forEach(function(e){-1===i.fields.findIndex(function(t){return t.id===e.id})&&l.push(e)}),l.length||(i.fields=i.fields.map(function(e){return o.find(function(t){return t.id===e.id})||e}))),l.length&&(i.fields=i.fields.concat(l))}else n&&i.fields?i.fields=i.fields.filter(function(e){return e.dropzoneID!==n}):i.fields=o;s=!0}else for(var u=0;u<a.length;u++){var f=a[u].fields,c=!1;if(f&&(c=e(n,r,o,f)),c)break}return s}(e,n,r),o(t.tree),i.default.notifyStateChange(),a&&i.default.notifyElementRemove({dropzoneID:e,parentID:n,dispatchElementRemove:a,trashed:!0})},this.getElementParent=r,this.getElement=l,this.removeElement=function(e,t,n,r){var o=a(e,t,n);return!!o&&(o.removeElement(e,r),i.default.notifyElementRemove({elementID:e,dropzoneID:t,parentID:n,trashed:!1}),!0)},this.updateElement=function(e,t,n,r,s){var u=a(e,t,n);return!!u&&(u.updateElement(o({},r,{id:e}),s),i.default.notifyElementUpdate(l(e,t,n)),!0)},this.getState=function(){return t.tree},this.getStorableState=function(){return t.tree[0].fields.map(function(e){return function e(t){var n=[],r=s(t,!0);return t.fields&&t.fields.length&&t.fields.forEach(function(t){n.push(e(t))}),n.length&&(r.initialElements=[],r.fields=[],n.forEach(function(e){r.initialElements.push(e),r.fields.push(e)})),r}(e)})},this.clearState=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=t.tree[0],r=n.fields.length;return n.fields.length||(i.default.notifyStateFlush(),e()),n.fields.forEach(function(t,n){t.flushDroppedElements(function(){n===r-1&&(i.default.notifyStateFlush(!0),e())})}),!0},this.addEventListener=i.default.addEventListener,this.removeEventListener=i.default.removeEventListener};t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=f(a),s=f(n(2)),l=f(n(3)),u=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return p.call(n),n.canvasRef=i.default.createRef(),n.state={initialElements:[],droppedElements:[],initDone:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillMount",value:function(){this._setInitialElements(this.props.initialElements)}},{key:"componentWillReceiveProps",value:function(e){var t=e.initialElements;this._setInitialElements(t)}},{key:"render",value:function(){var e=this,t=this.state.droppedElements,n=this.props,o=n.capacity,a=n.id,s=n.placeholder,l=!o||o>t.length;return i.default.createElement("div",{ref:this.canvasRef,className:(l?"":"no-space")+" "+("root"===a?"canvas":"")+" "+(t.length?"":"empty")+" dropzone",onDragOver:this._onDragOver,onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDrop:this._onDrop,onDragEnd:this._onDragEnd},t.map(function(t,n){return e._renderDragItem(r({},t,{index:n,spaceAvailable:l,initDone:e.state.initDone,dropzoneProps:{initDone:e.state.initDone,parentID:t.id}}))}),t.length?null:i.default.createElement("p",{className:"dropzone-placeholder"},s))}}]),t}(),p=function(){var e=this;this.dangerouslySetElements=function(t,n){var o=[];o="function"==typeof t?t(e.state.droppedElements)||[]:t;var a=e.props,i=a.id,s=a.parentID;o=o.map(function(t){return r({},t,{dropzoneID:i,parentID:s,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})}),e.setState({initialElements:o,droppedElements:o},function(){return e._updateState(n)})},this._unmarkDragElements=function(){[].forEach.call(e.canvasRef.current.querySelectorAll(".drag-item"),function(e){return e.classList.remove("before","after")})},this._setInitialElements=function(t){if(Array.isArray(t)&&t.length&&!e.state.initDone&&!e.state.initialElements.length){var n=e.props,o=n.id,a=n.parentID,i=t.map(function(t){return r({},t,{key:t.id,dropzoneID:o,parentID:a,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})});e.setState({initialElements:i,droppedElements:i},function(){return e._updateState(function(){e.setState({initDone:!0})})})}},this._manageInsideClass=function(t,n){var r=t.target;e.canvasRef.current===r&&r.classList[n]("inside")},this._removeElement=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r=arguments[2],o=e.state.droppedElements.findIndex(function(e){return e.id===t});e.setState({droppedElements:e.state.droppedElements.filter(function(e,t){return t!==o})},function(){return e._updateState(n,r?t:null)})},this._updateElement=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){};if(-1===e.state.droppedElements.findIndex(function(e){return e.id===t.id}))return n(null);var o=["name","type","payload"],a={};return Object.keys(t).forEach(function(e){-1!==o.indexOf(e)&&(a[e]=t[e])}),e.setState({droppedElements:e.state.droppedElements.map(function(e){return e.id===t.id?r({},e,a):e})},function(){return e._updateState(n)}),!0},this._updateState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=arguments[1],r=e.props,o=r.id,a=r.parentID;l.default.updateState(o,a,e.state.droppedElements,t,n)},this._flushDroppedElements=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};e.setState({initialElements:[],droppedElements:[]},function(){return e._updateState(t)})},this._checkAndRemoveElement=function(){var t=u.default.getDraggedElement(),n=t.removeElement,r=t.elementID,o=e.props.onElementMove(t),a=!u.default.getAttemptToRemove();o&&a&&n(r)},this._onDragOver=function(e){e.preventDefault(),e.stopPropagation()},this._onDragLeave=function(t){e._manageInsideClass(t,"remove"),u.default.setAttemptToRemove(!0)},this._onDragEnter=function(t){e._manageInsideClass(t,"add"),u.default.setAttemptToRemove(!1)},this._onDrop=function(t){t.preventDefault(),t.stopPropagation();var n=e.state.droppedElements;u.default.setAttemptToRemove(!1),e._manageInsideClass(t,"remove");var o=e.props.onDrop,a=JSON.parse(t.dataTransfer.getData("data"));return a=r({},a),e._unmarkDragElements(),o?o(a,e._addElement,{dropIndex:n.length?0:u.default.getDropPostion()+1,currentElements:n}):e._addElement(a)},this._addElement=function(t){var n=e.props,o=n.id,a=n.capacity,i=n.parentID,s=n.allowHorizontal,l=u.default.getDropPostion(),f=u.default.getDraggedElement(),d=!t||!t.id,p=-1,m=t.id&&e.state.droppedElements.filter(function(e,n){return e.id===t.id&&(p=n,!0)}).length,h=p===l,v=[].concat(e.state.droppedElements),g=!1;if(d||m){if(h)return u.default.error("Duplicate or invalid ID");g=!0,v=v.map(function(e){return e.id===t.id?r({},e,{remove:!0}):e})}var b=r({},t,{key:t.id,dropzoneID:o,parentID:i,allowHorizontal:s,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,updateElement:e._updateElement,initialElements:e.state.initialElements,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement});return v=l>0?[].concat(c(v.slice(0,l)),[b],c(v.slice(l))):[b].concat(c(v)),h||(v=v.filter(function(e){return!e.remove})),a&&v.length>a?u.default.error("Maximum capacity of canvas("+o+") is "+a):(e.setState({droppedElements:v},function(){!g&&f&&"function"==typeof f.checkAndRemoveElement&&f.checkAndRemoveElement(),e._updateState()}),e.canvasRef.current.classList.add("dropping"),setTimeout(function(){e.canvasRef.current.classList.remove("dropping")},500),{dropzoneID:o,elements:v})},this._renderDragItem=function(e){var t=u.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null}};d.propTypes={id:s.default.string.isRequired,capacity:s.default.number,onDrop:s.default.func,onElementMove:s.default.func,allowHorizontal:s.default.bool,initialElements:s.default.arrayOf(Object),parentID:s.default.string.isRequired,placeholder:s.default.oneOfType([s.default.string,s.default.node])},d.defaultProps={initialElements:[],placeholder:"Drop Here",onElementMove:function(){return!0}},t.default=d},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,f=[],c=n(5);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(b(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(b(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function m(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=u++;n=l||(l=v(t)),r=_.bind(null,n,i,!1),o=_.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var y,E=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"/* Very basic style */\n\n/* Prevent the text contents of draggable elements from being selectable. */\n[draggable] {\n  -moz-user-select: none;\n  -khtml-user-select: none;\n  -webkit-user-select: none;\n  user-select: none;\n\n  /* Required to make elements draggable in old WebKit */\n  -khtml-user-drag: element;\n  -webkit-user-drag: element;\n}\n\n/* class gets appended to canvas when user dragging over on it */\n.inside {\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\n  box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\n}\n\n.trash-box.inside,\n.dropzone.inside.no-space {\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.5);\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\n  box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\n}\n\n.dropzone {\n  width: 100%;\n  padding: 10px;\n  position: relative;\n  box-sizing: border-box;\n  background: #f0faff;\n  border: 1px solid #0277bd;\n}\n\n.dropzone.empty {\n  padding: 40px;\n}\n\n.palette {\n  padding: 10px;\n  background: #fff;\n  box-sizing: border-box;\n  border: 1px solid #01579b;\n}\n\n.drag-item {\n  padding: 10px;\n  color: #01579b;\n  box-sizing: border-box;\n  background-color: #b3e5fc;\n  border: 1px solid #01579b;\n}\n\n.inline.drag-item {\n  margin: 0 10px;\n  display: inline-block;\n}\n\n.dropzone-placeholder {\n  width: 100%;\n  color: #01579b;\n  text-align: center;\n  position: absolute;\n  left: 0;\n  top: calc(50% - 10px);\n  animation-name: changeColor;\n  animation-duration: 2s;\n  animation-timing-function: ease-in-out;\n  animation-iteration-count: infinite;\n}\n\n@keyframes changeColor {\n  25% {\n    transform: scale(1);\n    opacity: 1;\n  }\n\n  75% {\n    transform: scale(1);\n    opacity: 0.5;\n  }\n}\n\n.palette-wrapper .drag-item {\n  color: #fff;\n  background-color: #01579b;\n}\n\n.drag-item + div {\n  margin-top: 10px;\n}\n\n.drag-item.after,\n.drag-item.before {\n  position: relative;\n}\n\n.drag-item.after::after {\n  content: '';\n  position: absolute;\n  width: 50%;\n  height: 1px;\n  background: #14b451;\n  left: 50%;\n  bottom: -1px;\n  border-radius: 50%;\n  transform: translate(-50%, 0);\n  -webkit-box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\n  -moz-box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\n  box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\n}\n\n.drag-item.before::before {\n  content: '';\n  position: absolute;\n  width: 50%;\n  height: 1px;\n  background: #14b451;\n  left: 50%;\n  top: -1px;\n  border-radius: 50%;\n  transform: translate(-50%, 0);\n  -webkit-box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\n  -moz-box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\n  box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\n}\n\n.inline.drag-item.before::before {\n  width: 1px;\n  height: 50%;\n  left: -1px;\n  right: unset;\n  top: 50%;\n  transform: translate(0, -50%);\n}\n\n.inline.drag-item.after::after {\n  width: 1px;\n  height: 50%;\n  right: -1px;\n  left: unset;\n  top: unset;\n  transform: translate(0, -50%);\n}\n\n.trash-box {\n  padding: 30px 10px;\n  margin: 10px 0;\n  color: #b71c1c;\n  background: #ffcdd2;\n  text-align: center;\n  border: 1px solid #b71c1c;\n}\n",""])},function(e,t,n){var r=n(8);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(1)),i=u(n(2)),s=u(n(0)),l=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._onStateChange=function(e){n.setState({currentState:e})},n._renderElementInPreviewMode=function(e){var t={},o=n.registeredPaletteElements.find(function(t){return t.type===e.type});return Array.isArray(e.fields)&&e.fields.forEach(function(e){t[e.dropzoneID]=t[e.dropzoneID]||[],t[e.dropzoneID]=t[e.dropzoneID].concat(n._renderElementInPreviewMode(e))}),a.default.createElement(o.component,r({id:e.id,key:e.id,childNode:t},r({},e,{showPreview:!0,showBasicContent:!1})))},n.state={currentState:l.default.getState()},n.registeredPaletteElements=s.default.getRegisteredPaletteElements(),l.default.addEventListener(n._onStateChange),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){var e=this.state.currentState[0];return"function"==typeof this.props.children?this.props.children({children:e.fields.map(this._renderElementInPreviewMode)}):a.default.createElement("div",{className:"preview-container"},e.fields.map(this._renderElementInPreviewMode))}}]),t}();f.propTypes={children:i.default.func},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=l(o),i=l(n(2)),s=l(n(0));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._manageInsideClass=function(e,t){var r=e.target;n.trashRef.current===r&&r.classList[t]("inside")},n._onDrop=function(e){e.preventDefault(),e.stopPropagation();var t=s.default.getDraggedElement();if(!t)return!1;var r=n.props,o=r.onBeforeTrash,a=r.onAfterTrash,i=t.removeElement,l=o(t);return n._manageInsideClass(e,"remove"),l&&s.default.getAttemptToRemove()&&(i(t.elementID,function(){a()},!0),s.default.setDraggedElement(null)),s.default.setAttemptToRemove(!1),!0},n._onDragOver=function(e){e.preventDefault()},n._onDragLeave=function(e){n._manageInsideClass(e,"remove")},n._onDragEnter=function(e){s.default.getDraggedElement()&&n._manageInsideClass(e,"add")},n.trashRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",{ref:this.trashRef,className:"trash-box",onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDragOver:this._onDragOver,onDrop:this._onDrop},this.props.children||a.default.createElement("span",null,"Trash Box"))}}]),t}();u.propTypes={onBeforeTrash:i.default.func,onAfterTrash:i.default.func,children:i.default.oneOfType([i.default.arrayOf(i.default.element),i.default.element])},u.defaultProps={onBeforeTrash:function(){return!0},onAfterTrash:function(){return!0}},t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=u(a),s=u(n(2)),l=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),s=0;s<o;s++)a[s]=arguments[s];return n=r=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._renderList=function(e){var t=l.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.paletteElements;return i.default.createElement("div",{className:"palette"},t.map(function(t){return e._renderList(r({},t,{key:t.id,showBasicContent:!0}))}))}}]),t}();c.propTypes={paletteElements:s.default.arrayOf(function(e){var t=!1;return e.forEach(function(n){n&&!n.id&&(t="`id` is required in all palette element"),e.filter(function(e){return e.id===n.id}).length>1&&(t="`id` of palette element should be unique")}),!t||new Error(t)})},c.defaultProps={paletteElements:[]},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=u(a),s=u(n(2)),l=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._dragEnd=function(e){e.stopPropagation(),n.dragElemRef.current.classList.remove("before","after"),l.default.setDraggedElement(null)},n._dragStart=function(e){e.stopPropagation();var t=n.props,r=t.id,o=t.type,a=t.name,i=t.fields,s=t.payload,u=t.dropzoneID,f=t.removeElement,c=t.checkAndRemoveElement,d={id:r,type:o,name:a,payload:s};i&&(d.fields=i),e.dataTransfer.effectAllowed="copy",e.dataTransfer.setData("data",JSON.stringify(d)),u&&l.default.setDraggedElement({elementID:r,dropzoneID:u,removeElement:f,checkAndRemoveElement:c})},n._onDragOver=function(e){var t=n.dragElemRef.current.getBoundingClientRect();if(!n.props.spaceAvailable)return!1;if(n.props.allowHorizontal){var r=e.clientX;if(r>=t.x&&r<=t.x+t.width)r<t.x+t.width/2?(n.dragElemRef.current.classList.remove("after"),n.dragElemRef.current.classList.add("before"),l.default.setDropPostion(n.props.index)):(n.dragElemRef.current.classList.remove("before"),n.dragElemRef.current.classList.add("after"),l.default.setDropPostion(n.props.index+1))}else{var o=e.clientY;if(o>=t.y&&o<=t.y+t.height)o<t.y+t.height/2?(n.dragElemRef.current.classList.remove("after"),n.dragElemRef.current.classList.add("before"),l.default.setDropPostion(n.props.index)):(n.dragElemRef.current.classList.remove("before"),n.dragElemRef.current.classList.add("after"),l.default.setDropPostion(n.props.index+1))}return!0},n._onDragLeave=function(){n.dragElemRef.current.classList.remove("before","after")},n.dragElemRef=i.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillReceiveProps",value:function(e){this.props.initDone!==e.initDone&&e.initDone&&this.props.updateState()}},{key:"render",value:function(){var e=this.props,t=e.elementProps,n=e.draggable,o=e.allowHorizontal,a=null;return this.props.dropzoneID&&(a={onDragOver:this._onDragOver,onDragLeave:this._onDragLeave}),n&&(a=r({},a,{draggable:!0})),i.default.createElement("div",r({ref:this.dragElemRef,className:"drag-item "+(o?"inline":""),onDragStart:this._dragStart,onDragEnd:this._dragEnd},t,a),this.props.children)}}]),t}();f.propTypes={id:s.default.string.isRequired,name:s.default.string,initDone:s.default.bool,index:s.default.number,allowHorizontal:s.default.bool,fields:s.default.instanceOf(Array),draggable:s.default.bool,spaceAvailable:s.default.bool,updateState:s.default.func,dropzoneID:s.default.string,payload:s.default.instanceOf(Object),elementProps:s.default.instanceOf(Object),type:s.default.string.isRequired,children:s.default.oneOfType([s.default.arrayOf(s.default.element),s.default.element]).isRequired,removeElement:s.default.func,checkAndRemoveElement:s.default.func},f.defaultProps={checkAndRemoveElement:function(){return!0},elementProps:null,payload:null,draggable:!0,updateState:function(){return!0}},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=a(n(3));function a(e){return e&&e.__esModule?e:{default:e}}var i=new function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.notifyStateChange=function(){t.event.change.forEach(function(e){return e(o.default.getState())})},this.notifyStateFlush=function(e){e&&t.notifyStateChange(),t.event.flush.forEach(function(e){return e(!0)})},this.notifyElementUpdate=function(e){t.event.updateElement.forEach(function(t){return t(e)})},this.notifyElementRemove=function(e){t.event.removeElement.forEach(function(t){return t(e)})},this.addEventListener=function(e,n){var o=null;return"function"!=typeof n?(r.default.error("`cb` param has to be function"),!1):(Object.prototype.hasOwnProperty.call(t.event,e)?(t.event[e].push(n),o=n):r.default.error("No such event"),o)},this.removeEventListener=function(e,n){Object.prototype.hasOwnProperty.call(t.event,e)?t.event[e]=t.event[e].filter(function(e){return e!==n}):r.default.error("No such event")},this.event={change:[],flush:[],removeElement:[],updateElement:[]}};t.default=i},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,s,l){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var f=[n,o,a,i,s,l],c=0;(u=new Error(t.replace(/%s/g,function(){return f[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(17),o=n(16),a=n(15);e.exports=function(){function e(e,t,n,r,i,s){s!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=i(n(1)),a=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return o.default.createElement("div",{className:"main-canvas"},o.default.createElement(a.default,r({},e,{parentID:"root",id:"root",initDone:!0})))}},function(e,t,n){"use strict";var r=c(n(19)),o=c(n(4)),a=c(n(13)),i=c(n(12)),s=c(n(11)),l=c(n(10)),u=c(n(3)),f=c(n(0));function c(e){return e&&e.__esModule?e:{default:e}}n(9),e.exports={Canvas:r.default,Dropzone:o.default,Draggable:a.default,Palette:i.default,Trash:s.default,Preview:l.default,state:u.default,core:f.default,registerPaletteElements:f.default.registerPaletteElements}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29yZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3N0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Ryb3B6b25lL0Ryb3B6b25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS5jc3M/NzUyOCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvVHJhc2gvVHJhc2guanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUGFsZXR0ZS9QYWxldHRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0RyYWdnYWJsZS9EcmFnZ2FibGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NhbnZhcy9DYW52YXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb3JlIiwiQ29yZSIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJnZXRBdHRlbXB0VG9SZW1vdmUiLCJhdHRlbXB0VG9SZW1vdmUiLCJzZXRBdHRlbXB0VG9SZW1vdmUiLCJzdGF0dXMiLCJzZXREcmFnZ2VkRWxlbWVudCIsImRyYWdnZWRFbGVtZW50IiwiZ2V0RHJhZ2dlZEVsZW1lbnQiLCJyZWdpc3RlclBhbGV0dGVFbGVtZW50cyIsInJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMiLCJnZXRSZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzIiwic2V0RHJvcFBvc3Rpb24iLCJkcm9wUG9zaXRpb24iLCJnZXREcm9wUG9zdGlvbiIsImVycm9yIiwiY29uc29sZSIsImxvZyIsInJlcXVpcmUiLCJfZXZlbnQiLCJzdGF0ZSIsIlN0YXRlIiwic2hhcmVhYmxlRWxlbWVudFByb3BzIiwidHJlZSIsImlkIiwiZmllbGRzIiwidHJhdmVyc2VBbmRSZXR1cm5QYXJlbnQiLCJkcm9wem9uZUlEIiwicGFyZW50SUQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJmb3VuZFBhcmVudCIsImZpbmQiLCJlbGVtZW50IiwidHJhdmVyc2VBbmRSZXR1cm5FbGVtZW50IiwiZWxlbWVudElEIiwiZmllbGRQYXJlbnQiLCJmaWVsZCIsInJlbW92ZVNlbnNpdGl2ZVByb3BzIiwib25seVJlbW92ZUZ1bmN0aW9ucyIsInNoYXJlYWJsZUVsZW1lbnQiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImluZGV4T2YiLCJnZXRFbGVtZW50IiwidXBkYXRlU3RhdGUiLCJjYiIsImRpc3BhdGNoRWxlbWVudFJlbW92ZSIsInRyYXZlcnNlQW5kVXBkYXRlVHJlZSIsInVwZGF0ZWRGaWVsZHMiLCJtYXRjaGVkUGFyZW50Q2FudmFzIiwicmV0dXJuU3RhdHVzIiwiZmllbGRzVG9CZUFkZGVkIiwiZmlsdGVyIiwiZiIsImNvbmNhdCIsInVGaWVsZCIsImZpbmRJbmRleCIsInB1c2giLCJtYXAiLCJ1ZiIsImNoaWxkRmllbGRzIiwiX2V2ZW50MiIsImRlZmF1bHQiLCJub3RpZnlTdGF0ZUNoYW5nZSIsIm5vdGlmeUVsZW1lbnRSZW1vdmUiLCJ0cmFzaGVkIiwiZ2V0RWxlbWVudFBhcmVudCIsInJlbW92ZUVsZW1lbnQiLCJ1cGRhdGVFbGVtZW50IiwibmV3RGF0YSIsIl9leHRlbmRzIiwibm90aWZ5RWxlbWVudFVwZGF0ZSIsImdldFN0YXRlIiwiZ2V0U3RvcmFibGVTdGF0ZSIsInRyYXZlcnNlQW5kVGFrZVNuYXBzaG90Iiwic3ViRmllbGRzIiwibmVjZXNzYXJ5RGV0YWlscyIsImluaXRpYWxFbGVtZW50cyIsInNmIiwiY2xlYXJTdGF0ZSIsInJvb3ROb2RlIiwidG9wTGV2ZWxGaWVsZHMiLCJub3RpZnlTdGF0ZUZsdXNoIiwidG9wTGV2ZWxFbGVtZW50IiwiZmx1c2hEcm9wcGVkRWxlbWVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9yZWFjdCIsIkRyb3B6b25lIiwicHJvcHMiLCJfdGhpcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX19wcm90b19fIiwiZ2V0UHJvdG90eXBlT2YiLCJfaW5pdGlhbGlzZVByb3BzIiwiY2FudmFzUmVmIiwiX3JlYWN0MiIsImNyZWF0ZVJlZiIsImRyb3BwZWRFbGVtZW50cyIsImluaXREb25lIiwiX3NldEluaXRpYWxFbGVtZW50cyIsIl9yZWYiLCJfdGhpczIiLCJfcHJvcHMiLCJjYXBhY2l0eSIsInBsYWNlaG9sZGVyIiwic3BhY2VBdmFpbGFibGUiLCJjcmVhdGVFbGVtZW50IiwicmVmIiwiY2xhc3NOYW1lIiwib25EcmFnT3ZlciIsIl9vbkRyYWdPdmVyIiwib25EcmFnTGVhdmUiLCJfb25EcmFnTGVhdmUiLCJvbkRyYWdFbnRlciIsIl9vbkRyYWdFbnRlciIsIm9uRHJvcCIsIl9vbkRyb3AiLCJvbkRyYWdFbmQiLCJfb25EcmFnRW5kIiwiZSIsIl9yZW5kZXJEcmFnSXRlbSIsImluZGV4IiwiZHJvcHpvbmVQcm9wcyIsImRhbmdlcm91c2x5U2V0RWxlbWVudHMiLCJkYXRhIiwiZG9uZSIsImVsZW1lbnRzIiwiX3RoaXMzIiwiX3Byb3BzMiIsInNob3dCYXNpY0NvbnRlbnQiLCJfdXBkYXRlU3RhdGUiLCJfcmVtb3ZlRWxlbWVudCIsIl91cGRhdGVFbGVtZW50IiwiX2ZsdXNoRHJvcHBlZEVsZW1lbnRzIiwiY2hlY2tBbmRSZW1vdmVFbGVtZW50IiwiX2NoZWNrQW5kUmVtb3ZlRWxlbWVudCIsInNldFN0YXRlIiwiX3VubWFya0RyYWdFbGVtZW50cyIsImN1cnJlbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiQXJyYXkiLCJpc0FycmF5IiwiX3Byb3BzMyIsInVwZGF0ZWRJbml0aWFsSXRlbXMiLCJfbWFuYWdlSW5zaWRlQ2xhc3MiLCJfcmVmMiIsImFjdGlvbiIsInRhcmdldCIsInN1cHBvcnRlZEtleXMiLCJuZXdFbGVtZW50RGF0YSIsIl9wcm9wczQiLCJfc3RhdGUyIiwiZWxlbWVudE1vdmVkIiwiX2NvcmUyIiwib25FbGVtZW50TW92ZSIsImF0dGVtcHRUb01vdmUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIkpTT04iLCJwYXJzZSIsImRhdGFUcmFuc2ZlciIsImdldERhdGEiLCJfYWRkRWxlbWVudCIsImRyb3BJbmRleCIsImN1cnJlbnRFbGVtZW50cyIsInVwZGF0ZWREYXRhIiwiX3Byb3BzNSIsImFsbG93SG9yaXpvbnRhbCIsImludmFsaWRVcGRhdGVkRGF0YSIsImluZGV4T2ZQcmVzZW50RWxlbWVudCIsImtleUFscmVhZHlQcmVzZW50IiwiaXNTYW1lSW5kZXgiLCJuZXdFbGVtZW50cyIsImVsZW1lbnRBbHJlYWR5UmVtb3ZlZCIsImVsZW1lbnRUb0Ryb3AiLCJzbGljZSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFkZCIsInNldFRpbWVvdXQiLCJ0eXBlIiwiY29tcG9uZW50IiwicHJvcFR5cGVzIiwiX3Byb3BUeXBlczIiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwibnVtYmVyIiwiZnVuYyIsImJvb2wiLCJhcnJheU9mIiwib25lT2ZUeXBlIiwibm9kZSIsImRlZmF1bHRQcm9wcyIsImNzcyIsImxvY2F0aW9uIiwid2luZG93IiwiRXJyb3IiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwicmVwbGFjZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwiJDEiLCJ0ZXN0Iiwic3RyaW5naWZ5IiwiZm4iLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiYXBwbHkiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsIm9wdGlvbnMiLCJpdGVtIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJlbCIsInNldEF0dHJpYnV0ZSIsIm9iaiIsInVwZGF0ZSIsInJlc3VsdCIsInRyYW5zZm9ybSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYmluZCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiam9pbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidXNlU291cmNlTWFwIiwidG9TdHJpbmciLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJobXIiLCJsb2NhbHMiLCJQcmV2aWV3IiwiX29uU3RhdGVDaGFuZ2UiLCJuZXdTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsIl9yZW5kZXJFbGVtZW50SW5QcmV2aWV3TW9kZSIsImNoaWxkcmVuIiwiZWxlbWVudERhdGEiLCJjaGlsZE5vZGUiLCJzaG93UHJldmlldyIsIkNvbXBvbmVudCIsInJvb3QiLCJUcmFzaCIsInRyYXNoUmVmIiwiZWxlbWVudFRvQmVUcmFzaGVkIiwiX3RoaXMkcHJvcHMiLCJvbkJlZm9yZVRyYXNoIiwib25BZnRlclRyYXNoIiwiUGFsZXR0ZSIsIl9yZW5kZXJMaXN0IiwicGFsZXR0ZUVsZW1lbnRzIiwicHJvcFZhbHVlIiwiaXNFcnJvciIsIkRyYWdnYWJsZSIsIl9kcmFnRW5kIiwiZHJhZ0VsZW1SZWYiLCJfZHJhZ1N0YXJ0IiwicGF5bG9hZCIsImVmZmVjdEFsbG93ZWQiLCJzZXREYXRhIiwiZWxlbUNvcmQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkcmFnRWxlbVgiLCJjbGllbnRYIiwieCIsIndpZHRoIiwiZHJhZ0VsZW1ZIiwiY2xpZW50WSIsInkiLCJoZWlnaHQiLCJuZXh0UHJvcHMiLCJlbGVtZW50UHJvcHMiLCJkcmFnZ2FibGUiLCJvbkRyYWdTdGFydCIsImluc3RhbmNlT2YiLCJycG1FdmVudCIsIlJwbUV2ZW50IiwiZXZlbnQiLCJjaGFuZ2UiLCJ0cmlnZ2VyQ2hhbmdlIiwiZmx1c2giLCJldmVudE5hbWUiLCJyZXR1cm5DQiIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiY29uZGl0aW9uIiwiYSIsImIiLCJhcmdzIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiYXJnIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsInN5bWJvbCIsImFueSIsIm9iamVjdE9mIiwib25lT2YiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJfRHJvcHpvbmUyIiwiQ2FudmFzIl0sIm1hcHBpbmdzIjoiMkJBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQTJDQSxPQXRDQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFBQUMsSUFHdER4QixFQUFBMkIsRUFBQSxHQUlBM0IsSUFBQTRCLEVBQUEsd0ZDY01DLEVBQU8sSUFoRlgsU0FBQUMsaUdBQWNDLENBQUFDLEtBQUFGLEdBRVosSUFBTUQsS0FRTkcsS0FBS0MsbUJBQXFCLGtCQUFPSixFQUFLSyxpQkFNdENGLEtBQUtHLG1CQUFxQixTQUFDQyxHQUN6QlAsRUFBS0ssZ0JBQWtCRSxHQU96QkosS0FBS0ssa0JBQW9CLFNBQUNDLEdBQ3hCVCxFQUFLUyxlQUFpQkEsR0FPeEJOLEtBQUtPLGtCQUFvQixrQkFBT1YsRUFBS1MsZ0JBTXJDTixLQUFLUSx3QkFBMEIsU0FBQ0MsR0FDOUJaLEVBQUtZLDBCQUE0QkEsR0FPbkNULEtBQUtVLDZCQUErQixrQkFBT2IsRUFBS1ksK0JBTWhEVCxLQUFLVyxlQUFpQixTQUFDQyxHQUNyQmYsRUFBS2UsYUFBZUEsR0FPdEJaLEtBQUthLGVBQWlCLGtCQUFPaEIsRUFBS2UsY0FTbENaLEtBQUtjLE1BQVFDLFFBQVFELE1BT3JCZCxLQUFLZ0IsSUFBTUQsUUFBUUMsZUFNUm5CLGlCQ25GZjFCLEVBQUFELFFBQUErQyxRQUFBLDBCQzBCQTlDLEVBQUFELFFBQUFGLEVBQUEsR0FBQUEsNFBDMUJBa0QsRUFBQWxELEVBQUEsNENBMFZNbUQsRUFBUSxJQXZWWixTQUFBQyxpR0FBY3JCLENBQUFDLEtBQUFvQixHQUVaLElBQU1ELEtBQ0FFLEdBQXlCLEtBQU0sT0FBUSxPQUFRLFVBQVcsYUFBYyxZQUc5RUYsRUFBTUcsT0FDSkMsR0FBSSxPQUNKQyxZQVdGLElBd0ZNQyxFQUEwQixTQUExQkEsRUFBMkJDLEVBQVlDLEdBQWtDLElBQXhCSCxFQUF3QkksVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBZlQsRUFBTUcsS0FDOURTLEVBQWNQLEVBQU9RLEtBQUssU0FBQUMsR0FBQSxPQUFXQSxFQUFRVixLQUFPSSxJQUUxRCxJQUFLSSxFQUNILElBQUssSUFBSTNELEVBQUksRUFBR0EsRUFBSW9ELEVBQU9LLE9BQVF6RCxJQUFLLENBQ3RDLElBQU02RCxFQUFVVCxFQUFPcEQsR0FDdkIsR0FBSTZELEVBQVFULE9BQVEsQ0FDbEIsSUFBTXBCLEVBQVNxQixFQUF3QkMsRUFBWUMsRUFBVU0sRUFBUVQsUUFDckUsR0FBSXBCLEVBQ0YsT0FBT0EsR0FNZixPQUFPMkIsR0FVSEcsRUFBMkIsU0FBQ0MsRUFBV1QsRUFBWUMsR0FDdkQsSUFBTVMsRUFBY1gsRUFBd0JDLEVBQVlDLEdBQ3hELE9BQUlTLEVBQ0tBLEVBQVlaLE9BQU9RLEtBQUssU0FBQUssR0FBQSxPQUFTQSxFQUFNZCxLQUFPWSxJQUdoRCxNQWlDSEcsRUFBdUIsU0FBQ0wsRUFBU00sR0FDckMsSUFBTUMsS0FFTixPQUFLUCxHQUtMbkQsT0FBTzJELEtBQUtSLEdBQVNTLFFBQVEsU0FBQ0MsR0FFRixtQkFBakJWLEVBQVFVLEtBRWJKLElBQ0NBLElBQStELElBQXhDbEIsRUFBc0J1QixRQUFRRCxNQUd4REgsRUFBaUJHLEdBQU9WLEVBQVFVLE1BSTdCSCxHQWhCRSxNQW9CTEssRUFBYSxrQkFBYVAsRUFBcUJKLDRCQTREckRsQyxLQUFLOEMsWUFBYyxTQUFDcEIsRUFBWUMsRUFBVUgsR0FBaUQsSUFBekN1QixFQUF5Q25CLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQXBDLGFBQVVvQixFQUEwQnBCLFVBQUEsSUE1TzdELFNBQXhCcUIsRUFBeUJ2QixFQUFZQyxFQUFVdUIsR0FBdUMsSUFBeEIxQixFQUF3QkksVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBZlQsRUFBTUcsS0FDM0U2QixFQUFzQjNCLEVBQU9RLEtBQUssU0FBQUssR0FBQSxPQUFTQSxFQUFNZCxLQUFPSSxJQUMxRHlCLEdBQWUsRUFHbkIsR0FBSUQsRUFBcUIsQ0FDdkIsR0FBSXpCLElBQWVDLEVBRWpCd0IsRUFBb0IzQixPQUFTMEIsT0FDeEIsR0FBS0MsRUFBb0IzQixRQUFXMEIsRUFBY3JCLE9BU2xELENBQ0wsSUFBTXdCLEtBR3dCRixFQUFvQjNCLE9BQy9DOEIsT0FBTyxTQUFBQyxHQUFBLE9BQUtBLEVBQUU3QixhQUFlQSxJQUVORyxTQUFXcUIsRUFBY3JCLE9BR2pEc0IsRUFBb0IzQixPQUFTMEIsRUFDMUJNLE9BQU9MLEVBQW9CM0IsT0FDekI4QixPQUFPLFNBQUFDLEdBQUEsT0FBS0EsRUFBRTdCLGFBQWVBLE1BRWxDd0IsRUFBY1IsUUFBUSxTQUFDZSxJQUtELElBSkROLEVBQW9CM0IsT0FDcENrQyxVQUFVLFNBQUFILEdBQUEsT0FBS0EsRUFBRWhDLEtBQU9rQyxFQUFPbEMsTUFJaEM4QixFQUFnQk0sS0FBS0YsS0FLcEJKLEVBQWdCeEIsU0FFbkJzQixFQUFvQjNCLE9BQVMyQixFQUFvQjNCLE9BQzlDb0MsSUFBSSxTQUFDTCxHQUVKLE9BRFdMLEVBQWNsQixLQUFLLFNBQUE2QixHQUFBLE9BQU1BLEVBQUd0QyxLQUFPZ0MsRUFBRWhDLE1BQ25DZ0MsTUFNakJGLEVBQWdCeEIsU0FDbEJzQixFQUFvQjNCLE9BQVMyQixFQUFvQjNCLE9BQU9nQyxPQUFPSCxTQTVDN0QzQixHQUFjeUIsRUFBb0IzQixPQUNwQzJCLEVBQW9CM0IsT0FBUzJCLEVBQW9CM0IsT0FDOUM4QixPQUFPLFNBQUFDLEdBQUEsT0FBS0EsRUFBRTdCLGFBQWVBLElBR2hDeUIsRUFBb0IzQixPQUFTMEIsRUEyQ2pDRSxHQUFlLE9BSWYsSUFBSyxJQUFJaEYsRUFBSSxFQUFHQSxFQUFJb0QsRUFBT0ssT0FBUXpELElBQUssQ0FDdEMsSUFBTTBGLEVBQWN0QyxFQUFPcEQsR0FBR29ELE9BQzFCcEIsR0FBUyxFQU9iLEdBSkkwRCxJQUNGMUQsRUFBUzZDLEVBQXNCdkIsRUFBWUMsRUFBVXVCLEVBQWVZLElBR2xFMUQsRUFDRixNQUtOLE9BQU9nRCxFQStKUEgsQ0FBc0J2QixFQUFZQyxFQUFVSCxHQUM1Q3VCLEVBQUc1QixFQUFNRyxNQUNUeUMsRUFBQUMsUUFBU0Msb0JBR0xqQixHQUNGZSxFQUFBQyxRQUFTRSxxQkFDUHhDLGFBQ0FDLFdBQ0FxQix3QkFFQW1CLFNBQVMsS0FNZm5FLEtBQUtvRSxpQkFBbUIzQyxFQUd4QnpCLEtBQUs2QyxXQUFhQSxFQUdsQjdDLEtBQUtxRSxjQWxJaUIsU0FBQ2xDLEVBQVdULEVBQVlDLEVBQVVvQixHQUN0RCxJQUFNZCxFQUFVQyxFQUF5QkMsRUFBV1QsRUFBWUMsR0FFaEUsUUFBSU0sSUFDRkEsRUFBUW9DLGNBQWNsQyxFQUFXWSxHQUNqQ2dCLEVBQUFDLFFBQVNFLHFCQUNQL0IsWUFBV1QsYUFBWUMsV0FBVXdDLFNBQVMsS0FFckMsSUE2SFhuRSxLQUFLc0UsY0E1RWlCLFNBQUNuQyxFQUFXVCxFQUFZQyxFQUFVNEMsRUFBU3hCLEdBQy9ELElBQU1kLEVBQVVDLEVBQXlCQyxFQUFXVCxFQUFZQyxHQUVoRSxRQUFJTSxJQUNGQSxFQUFRcUMsY0FBUkUsS0FDS0QsR0FDSGhELEdBQUlZLElBQ0hZLEdBRUhnQixFQUFBQyxRQUFTUyxvQkFBb0I1QixFQUFXVixFQUFXVCxFQUFZQyxLQUV4RCxJQXdFWDNCLEtBQUswRSxTQUFXLGtCQUFPdkQsRUFBTUcsTUFRN0J0QixLQUFLMkUsaUJBQW1CLGtCQUFPeEQsRUFBTUcsS0FBSyxHQUFHRSxPQUMxQ29DLElBQUksU0FBQUwsR0FBQSxPQXhFeUIsU0FBMUJxQixFQUEyQjNDLEdBQy9CLElBQU00QyxLQUVBQyxFQUFtQnhDLEVBQXFCTCxHQUFTLEdBcUJ2RCxPQWxCSUEsRUFBUVQsUUFBVVMsRUFBUVQsT0FBT0ssUUFDbkNJLEVBQVFULE9BQU9rQixRQUFRLFNBQUNhLEdBQ3RCc0IsRUFBVWxCLEtBQUtpQixFQUF3QnJCLE1BS3ZDc0IsRUFBVWhELFNBQ1ppRCxFQUFpQkMsbUJBQ2pCRCxFQUFpQnRELFVBRWpCcUQsRUFBVW5DLFFBQVEsU0FBQ3NDLEdBQ2pCRixFQUFpQkMsZ0JBQWdCcEIsS0FBS3FCLEdBQ3RDRixFQUFpQnRELE9BQU9tQyxLQUFLcUIsTUFLMUJGLEVBZ0RHRixDQUF3QnJCLE1BT3BDdkQsS0FBS2lGLFdBQWEsV0FBbUIsSUFBbEJsQyxFQUFrQm5CLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQWIsYUFDaEJzRCxFQUFXL0QsRUFBTUcsS0FBSyxHQUN0QjZELEVBQWlCRCxFQUFTMUQsT0FBT0ssT0FpQnZDLE9BZEtxRCxFQUFTMUQsT0FBT0ssU0FDbkJrQyxFQUFBQyxRQUFTb0IsbUJBQ1RyQyxLQUdGbUMsRUFBUzFELE9BQU9rQixRQUFRLFNBQUMyQyxFQUFpQmpILEdBQ3hDaUgsRUFBZ0JDLHFCQUFxQixXQUMvQmxILElBQU0rRyxFQUFpQixJQUN6QnBCLEVBQUFDLFFBQVNvQixrQkFBaUIsR0FDMUJyQyxVQUtDLEdBUVQvQyxLQUFLdUYsaUJBQW1CeEIsRUFBQUMsUUFBU3VCLGlCQU9qQ3ZGLEtBQUt3RixvQkFBc0J6QixFQUFBQyxRQUFTd0IsK0JBTXpCckUsOGVDNVZmc0UsRUFBQXpILEVBQUEsY0FDQUEsRUFBQSxRQUVBQSxFQUFBLFFBQ0FBLEVBQUEsbUxBRU0wSCxjQUNKLFNBQUFBLEVBQVlDLGdHQUFPNUYsQ0FBQUMsS0FBQTBGLEdBQUEsSUFBQUUsbUtBQUFDLENBQUE3RixNQUFBMEYsRUFBQUksV0FBQWhILE9BQUFpSCxlQUFBTCxJQUFBbkgsS0FBQXlCLEtBQ1gyRixJQURXLE9BQUFLLEVBQUF6SCxLQUFBcUgsR0FLakJBLEVBQUtLLFVBQVlDLEVBQUFsQyxRQUFNbUMsWUFLdkJQLEVBQUt6RSxPQUNINEQsbUJBQ0FxQixtQkFDQUMsVUFBVSxHQWJLVCxrWUFrQmpCNUYsS0FBS3NHLG9CQUFvQnRHLEtBQUsyRixNQUFNWixzRUFHUyxJQUFuQkEsRUFBbUJ3QixFQUFuQnhCLGdCQUMxQi9FLEtBQUtzRyxvQkFBb0J2QixvQ0FvWGxCLElBQUF5QixFQUFBeEcsS0FDQ29HLEVBQW9CcEcsS0FBS21CLE1BQXpCaUYsZ0JBRERLLEVBRStCekcsS0FBSzJGLE1BQW5DZSxFQUZERCxFQUVDQyxTQUFVbkYsRUFGWGtGLEVBRVdsRixHQUFJb0YsRUFGZkYsRUFFZUUsWUFDaEJDLEdBQWlCRixHQUFXQSxFQUFXTixFQUFnQnZFLE9BRTdELE9BQ0VxRSxFQUFBbEMsUUFBQTZDLGNBQUEsT0FDRUMsSUFBSzlHLEtBQUtpRyxVQUNWYyxXQUFlSCxFQUE4QixHQUFiLFlBQWhDLEtBQTBELFNBQVByRixFQUFnQixTQUFXLElBQTlFLEtBQXFGNkUsRUFBZ0J2RSxPQUFtQixHQUFWLFNBQTlHLFlBQ0FtRixXQUFZaEgsS0FBS2lILFlBQ2pCQyxZQUFhbEgsS0FBS21ILGFBQ2xCQyxZQUFhcEgsS0FBS3FILGFBQ2xCQyxPQUFRdEgsS0FBS3VILFFBQ2JDLFVBQVd4SCxLQUFLeUgsWUFHZHJCLEVBQWdCeEMsSUFBSSxTQUFDOEQsRUFBR3RKLEdBQUosT0FDbEJvSSxFQUFLbUIsZ0JBQUxuRCxLQUNLa0QsR0FDSEUsTUFBT3hKLEVBQ1B3SSxpQkFDQVAsU0FBVUcsRUFBS3JGLE1BQU1rRixTQUNyQndCLGVBQ0V4QixTQUFVRyxFQUFLckYsTUFBTWtGLFNBQ3JCMUUsU0FBVStGLEVBQUVuRyxTQU9qQjZFLEVBQWdCdkUsT0FDeUMsS0FBeERxRSxFQUFBbEMsUUFBQTZDLGNBQUEsS0FBR0UsVUFBVSx3QkFBd0JKLDBDQXpZL0NtQix1QkFBeUIsU0FBQ0MsRUFBTUMsR0FDOUIsSUFBSUMsS0FFRkEsRUFEa0IsbUJBQVRGLEVBQ0VBLEVBQUtHLEVBQUsvRyxNQUFNaUYscUJBRWhCMkIsRUFMMEIsSUFBQUksRUFPRkQsRUFBS3ZDLE1BQTlCakUsRUFQMkJ5RyxFQU8vQjVHLEdBQWdCSSxFQVBld0csRUFPZnhHLFNBRXhCc0csRUFBV0EsRUFBU3JFLElBQUksU0FBQThELEdBQUEsT0FBQWxELEtBQ25Ca0QsR0FDSGhHLGFBQ0FDLFdBQ0F5RyxrQkFBa0IsRUFDbEJ0RixZQUFhb0YsRUFBS0csYUFDbEJoRSxjQUFlNkQsRUFBS0ksZUFDcEJoRSxjQUFlNEQsRUFBS0ssZUFDcEJqRCxxQkFBc0I0QyxFQUFLTSxzQkFDM0JDLHNCQUF1QlAsRUFBS1EsMkJBRzlCUixFQUFLUyxVQUNINUQsZ0JBQWlCa0QsRUFDakI3QixnQkFBaUI2QixHQUNoQixrQkFBTUMsRUFBS0csYUFBYUwsV0FNN0JZLG9CQUFzQixjQUNqQmxHLFFBQVFuRSxLQUFLMkosRUFBS2pDLFVBQVU0QyxRQUFRQyxpQkFBaUIsY0FBZSxTQUFBcEIsR0FBQSxPQUFLQSxFQUFFcUIsVUFBVUMsT0FBTyxTQUFVLGlCQU8zRzFDLG9CQUFzQixTQUFDdkIsR0FTckIsR0FOd0JrRSxNQUFNQyxRQUFRbkUsSUFDZEEsRUFBZ0JsRCxTQUNmcUcsRUFBSy9HLE1BQU1rRixXQUNYNkIsRUFBSy9HLE1BQU00RCxnQkFBZ0JsRCxPQUcvQixLQUFBc0gsRUFDa0JqQixFQUFLdkMsTUFBOUJqRSxFQURPeUgsRUFDWDVILEdBQWdCSSxFQURMd0gsRUFDS3hILFNBQ2xCeUgsRUFBc0JyRSxFQUFnQm5CLElBQUksU0FBQThELEdBQUEsT0FBQWxELEtBQzNDa0QsR0FDSC9FLElBQUsrRSxFQUFFbkcsR0FDUEcsYUFDQUMsV0FDQXlHLGtCQUFrQixFQUNsQnRGLFlBQWFvRixFQUFLRyxhQUNsQmhFLGNBQWU2RCxFQUFLSSxlQUNwQmhFLGNBQWU0RCxFQUFLSyxlQUNwQmpELHFCQUFzQjRDLEVBQUtNLHNCQUMzQkMsc0JBQXVCUCxFQUFLUSwyQkFHOUJSLEVBQUtTLFVBQ0g1RCxnQkFBaUJxRSxFQUNqQmhELGdCQUFpQmdELEdBQ2hCLGtCQUFPbEIsRUFBS0csYUFBYSxXQUMxQkgsRUFBS1MsVUFDSHRDLFVBQVUsZUFZbEJnRCxtQkFBcUIsU0FBQUMsRUFBYUMsR0FBVyxJQUFyQkMsRUFBcUJGLEVBQXJCRSxPQUNsQnRCLEVBQUtqQyxVQUFVNEMsVUFBWVcsR0FDN0JBLEVBQU9ULFVBQVVRLEdBQVEsZ0JBVTdCakIsZUFBaUIsU0FBQ25HLEdBQW9ELElBQXpDWSxFQUF5Q25CLFVBQUFDLE9BQUEsUUFBQUMsSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQXBDLGFBQVVvQixFQUEwQnBCLFVBQUEsR0FDOURnRyxFQUFRTSxFQUFLL0csTUFBTWlGLGdCQUFnQjFDLFVBQVUsU0FBQWdFLEdBQUEsT0FBS0EsRUFBRW5HLEtBQU9ZLElBRWpFK0YsRUFBS1MsVUFDSHZDLGdCQUFpQjhCLEVBQUsvRyxNQUFNaUYsZ0JBQWdCOUMsT0FBTyxTQUFDNUUsRUFBR04sR0FBSixPQUFXQSxJQUFNd0osS0FDbkUsa0JBQU1NLEVBQUtHLGFBQWF0RixFQUFJQyxFQUF3QmIsRUFBWSxjQVFyRW9HLGVBQWlCLFNBQUNoRSxHQUEyQixJQUFsQnhCLEVBQWtCbkIsVUFBQUMsT0FBQSxRQUFBQyxJQUFBRixVQUFBLEdBQUFBLFVBQUEsR0FBYixhQUc5QixJQUFzQixJQUZEc0csRUFBSy9HLE1BQU1pRixnQkFBZ0IxQyxVQUFVLFNBQUFnRSxHQUFBLE9BQUtBLEVBQUVuRyxLQUFPZ0QsRUFBUWhELEtBRzlFLE9BQU93QixFQUFHLE1BSVosSUFBTTBHLEdBQWlCLE9BQVEsT0FBUSxXQUNqQ0MsS0FtQk4sT0FsQkE1SyxPQUFPMkQsS0FBSzhCLEdBQ1Q3QixRQUFRLFNBQUNDLElBQzRCLElBQWhDOEcsRUFBYzdHLFFBQVFELEtBQ3hCK0csRUFBZS9HLEdBQU80QixFQUFRNUIsTUFJcEN1RixFQUFLUyxVQUNIdkMsZ0JBQWlCOEIsRUFBSy9HLE1BQU1pRixnQkFDekJ4QyxJQUFJLFNBQUM4RCxHQUNKLE9BQUlBLEVBQUVuRyxLQUFPZ0QsRUFBUWhELEdBQ25CaUQsS0FBWWtELEVBQU1nQyxHQUdiaEMsS0FFVixrQkFBTVEsRUFBS0csYUFBYXRGLE1BRXBCLFFBUVRzRixhQUFlLFdBQTBDLElBQXpDdEYsRUFBeUNuQixVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFwQyxhQUFVb0IsRUFBMEJwQixVQUFBLEdBQUErSCxFQUluRHpCLEVBQUt2QyxNQUZIakUsRUFGaURpSSxFQUVyRHBJLEdBQ0FJLEVBSHFEZ0ksRUFHckRoSSxTQUdGaUksRUFBQTVGLFFBQU1sQixZQUNKcEIsRUFDQUMsRUFDQXVHLEVBQUsvRyxNQUFNaUYsZ0JBQ1hyRCxFQUNBQyxTQVVKd0Ysc0JBQXdCLFdBQW1CLElBQWxCekYsRUFBa0JuQixVQUFBQyxPQUFBLFFBQUFDLElBQUFGLFVBQUEsR0FBQUEsVUFBQSxHQUFiLGFBQzVCc0csRUFBS1MsVUFDSDVELG1CQUNBcUIsb0JBQ0Msa0JBQU84QixFQUFLRyxhQUFhdEYsV0FTOUIyRix1QkFBeUIsV0FDdkIsSUFBTW1CLEVBQWVDLEVBQUE5RixRQUFLekQsb0JBQ2xCOEQsRUFBNkJ3RixFQUE3QnhGLGNBQWVsQyxFQUFjMEgsRUFBZDFILFVBQ2pCL0IsRUFBUzhILEVBQUt2QyxNQUFNb0UsY0FBY0YsR0FDbENHLEdBQWlCRixFQUFBOUYsUUFBSy9ELHFCQUV4QkcsR0FBVTRKLEdBQ1ozRixFQUFjbEMsU0FPbEI4RSxZQUFjLFNBQUNTLEdBQ2JBLEVBQUV1QyxpQkFDRnZDLEVBQUV3Qyx3QkFPSi9DLGFBQWUsU0FBQ08sR0FDZFEsRUFBS21CLG1CQUFtQjNCLEVBQUcsVUFDM0JvQyxFQUFBOUYsUUFBSzdELG9CQUFtQixTQU8xQmtILGFBQWUsU0FBQ0ssR0FDZFEsRUFBS21CLG1CQUFtQjNCLEVBQUcsT0FDM0JvQyxFQUFBOUYsUUFBSzdELG9CQUFtQixTQVUxQm9ILFFBQVUsU0FBQ0csR0FDVEEsRUFBRXVDLGlCQUNGdkMsRUFBRXdDLGtCQUZhLElBR1A5RCxFQUFvQjhCLEVBQUsvRyxNQUF6QmlGLGdCQUVSMEQsRUFBQTlGLFFBQUs3RCxvQkFBbUIsR0FDeEIrSCxFQUFLbUIsbUJBQW1CM0IsRUFBRyxVQU5aLElBUVBKLEVBQVdZLEVBQUt2QyxNQUFoQjJCLE9BQ0pTLEVBQU9vQyxLQUFLQyxNQUFNMUMsRUFBRTJDLGFBQWFDLFFBQVEsU0FLN0MsT0FKQXZDLE9BQVlBLEdBRVpHLEVBQUtVLHNCQUVFdEIsRUFBU0EsRUFBT1MsRUFBTUcsRUFBS3FDLGFBQ2hDQyxVQUFZcEUsRUFBZ0J2RSxPQUFxQyxFQUE1QmlJLEVBQUE5RixRQUFLbkQsaUJBQW1CLEVBQzdENEosZ0JBQWlCckUsSUFDZDhCLEVBQUtxQyxZQUFZeEMsU0FheEJ3QyxZQUFjLFNBQUNHLEdBQWdCLElBQUFDLEVBTXpCekMsRUFBS3ZDLE1BSkhqRSxFQUZ1QmlKLEVBRTNCcEosR0FDQW1GLEVBSDJCaUUsRUFHM0JqRSxTQUNBL0UsRUFKMkJnSixFQUkzQmhKLFNBQ0FpSixFQUwyQkQsRUFLM0JDLGdCQUVJaEssRUFBZWtKLEVBQUE5RixRQUFLbkQsaUJBQ3BCUCxFQUFpQndKLEVBQUE5RixRQUFLekQsb0JBQ3RCc0ssR0FBc0JILElBQWdCQSxFQUFZbkosR0FDcER1SixHQUF5QixFQUN2QkMsRUFBb0JMLEVBQVluSixJQUNwQzJHLEVBQUsvRyxNQUFNaUYsZ0JBQWdCOUMsT0FBTyxTQUFDb0UsRUFBR3RKLEdBQ3BDLE9BQUlzSixFQUFFbkcsS0FBT21KLEVBQVluSixLQUN2QnVKLEVBQXdCMU0sR0FFakIsS0FJUnlELE9BQ0NtSixFQUFjRixJQUEwQmxLLEVBQzFDcUssS0FBaUJ6SCxPQUFPMEUsRUFBSy9HLE1BQU1pRixpQkFDbkM4RSxHQUF3QixFQUc1QixHQUFJTCxHQUFzQkUsRUFBbUIsQ0FDM0MsR0FBSUMsRUFDRixPQUFPbEIsRUFBQTlGLFFBQUtsRCxNQUFNLDJCQUdwQm9LLEdBQXdCLEVBQ3hCRCxFQUFjQSxFQUFZckgsSUFBSSxTQUFDOEQsR0FDN0IsT0FBSUEsRUFBRW5HLEtBQU9tSixFQUFZbkosR0FDdkJpRCxLQUFZa0QsR0FBR3NCLFFBQVEsSUFFbEJ0QixJQUlYLElBQU15RCxPQUNEVCxHQUNIL0gsSUFBSytILEVBQVluSixHQUNqQkcsYUFDQUMsV0FDQWlKLGtCQUNBeEMsa0JBQWtCLEVBQ2xCdEYsWUFBYW9GLEVBQUtHLGFBQ2xCaEUsY0FBZTZELEVBQUtJLGVBQ3BCaEUsY0FBZTRELEVBQUtLLGVBRXBCeEQsZ0JBQWlCbUQsRUFBSy9HLE1BQU00RCxnQkFDNUJPLHFCQUFzQjRDLEVBQUtNLHNCQUMzQkMsc0JBQXVCUCxFQUFLUSx5QkFxQjlCLE9BakJFdUMsRUFERXJLLEVBQWUsS0FDakJxSyxTQUNLQSxFQUFZRyxNQUFNLEVBQUd4SyxLQUN4QnVLLEdBRkZFLEVBR0tKLEVBQVlHLE1BQU14SyxNQUlyQnVLLEdBREYzSCxPQUFBNkgsRUFFS0osSUFJRkQsSUFDSEMsRUFBY0EsRUFBWTNILE9BQU8sU0FBQW9FLEdBQUEsT0FBTUEsRUFBRXNCLFVBSXZDdEMsR0FBWXVFLEVBQVlwSixPQUFTNkUsRUFDNUJvRCxFQUFBOUYsUUFBS2xELE1BQUwsOEJBQXlDWSxFQUF6QyxRQUEyRGdGLElBSXBFd0IsRUFBS1MsVUFDSHZDLGdCQUFpQjZFLEdBQ2hCLFlBRUlDLEdBQXlCNUssR0FBa0UsbUJBQXpDQSxFQUFlbUksdUJBQ3BFbkksRUFBZW1JLHdCQUlqQlAsRUFBS0csaUJBSVBILEVBQUtqQyxVQUFVNEMsUUFBUUUsVUFBVXVDLElBQUksWUFDckNDLFdBQVcsV0FDVHJELEVBQUtqQyxVQUFVNEMsUUFBUUUsVUFBVUMsT0FBTyxhQUN2QyxNQUdEdEgsYUFDQXVHLFNBQVVnRCxVQVNkdEQsZ0JBQWtCLFNBQUNoQyxHQUNqQixJQUFNMUQsRUFBVTZILEVBQUE5RixRQUFLdEQsK0JBQStCc0IsS0FBSyxTQUFBMEYsR0FBQSxPQUFLQSxFQUFFOEQsT0FBUzdGLEVBQU02RixPQUMvRSxPQUFPdkosRUFBVWlFLEVBQUFsQyxRQUFBNkMsY0FBQzVFLEVBQVF3SixVQUFjOUYsR0FBWSxPQTBDeERELEVBQVNnRyxXQUNQbkssR0FBSW9LLEVBQUEzSCxRQUFVNEgsT0FBT0MsV0FDckJuRixTQUFVaUYsRUFBQTNILFFBQVU4SCxPQUNwQnhFLE9BQVFxRSxFQUFBM0gsUUFBVStILEtBQ2xCaEMsY0FBZTRCLEVBQUEzSCxRQUFVK0gsS0FDekJuQixnQkFBaUJlLEVBQUEzSCxRQUFVZ0ksS0FDM0JqSCxnQkFBaUI0RyxFQUFBM0gsUUFBVWlJLFFBQVFuTixRQUNuQzZDLFNBQVVnSyxFQUFBM0gsUUFBVTRILE9BQU9DLFdBQzNCbEYsWUFBYWdGLEVBQUEzSCxRQUFVa0ksV0FDckJQLEVBQUEzSCxRQUFVNEgsT0FDVkQsRUFBQTNILFFBQVVtSSxRQUlkekcsRUFBUzBHLGNBQ1BySCxtQkFDQTRCLFlBQWEsWUFDYm9ELGNBQWUsa0JBQU8sY0FHVHJFLGlCQzliZnZILEVBQUFELFFBQUEsU0FBQW1PLEdBRUEsSUFBQUMsRUFBQSxvQkFBQUMsZUFBQUQsU0FFQSxJQUFBQSxFQUNBLFVBQUFFLE1BQUEsb0NBSUEsSUFBQUgsR0FBQSxpQkFBQUEsRUFDQSxPQUFBQSxFQUdBLElBQUFJLEVBQUFILEVBQUFJLFNBQUEsS0FBQUosRUFBQUssS0FDQUMsRUFBQUgsRUFBQUgsRUFBQU8sU0FBQUMsUUFBQSxpQkEyREEsT0EvQkFULEVBQUFTLFFBQUEsK0RBQUFDLEVBQUFDLEdBRUEsSUFXQUMsRUFYQUMsRUFBQUYsRUFDQUcsT0FDQUwsUUFBQSxvQkFBQWpPLEVBQUF1TyxHQUF3QyxPQUFBQSxJQUN4Q04sUUFBQSxvQkFBQWpPLEVBQUF1TyxHQUF3QyxPQUFBQSxJQUd4QywwREFBQUMsS0FBQUgsR0FDQUgsR0FRQUUsRUFGQSxJQUFBQyxFQUFBdEssUUFBQSxNQUVBc0ssRUFDRyxJQUFBQSxFQUFBdEssUUFBQSxLQUVINkosRUFBQVMsRUFHQU4sRUFBQU0sRUFBQUosUUFBQSxZQUlBLE9BQUEzQyxLQUFBbUQsVUFBQUwsR0FBQSx5QkM5RUEsSUFFQU0sRUFDQUMsRUFIQUMsS0FXQUMsR0FUQUgsRUFTQSxXQU1BLE9BQUFoQixRQUFBb0IsbUJBQUFDLE1BQUFyQixPQUFBc0IsTUFaQSxXQUVBLFlBREEsSUFBQUwsTUFBQUQsRUFBQU8sTUFBQTlOLEtBQUE0QixZQUNBNEwsSUFpQkEzSyxFQUFBLFNBQUEwSyxHQUNBLElBQUFDLEtBRUEsZ0JBQUFoRSxHQU1BLHNCQUFBQSxFQUNBLE9BQUFBLElBRUEsWUFBQWdFLEVBQUFoRSxHQUFBLENBQ0EsSUFBQXVFLEVBakJBLFNBQUF2RSxHQUNBLE9BQUFtRSxTQUFBSyxjQUFBeEUsSUFnQkFqTCxLQUFBeUIsS0FBQXdKLEdBRUEsR0FBQStDLE9BQUEwQixtQkFBQUYsYUFBQXhCLE9BQUEwQixrQkFDQSxJQUdBRixJQUFBRyxnQkFBQUMsS0FDSyxNQUFBekcsR0FDTHFHLEVBQUEsS0FHQVAsRUFBQWhFLEdBQUF1RSxFQUVBLE9BQUFQLEVBQUFoRSxJQTFCQSxHQThCQTRFLEVBQUEsS0FDQUMsRUFBQSxFQUNBQyxLQUVBQyxFQUFBdlEsRUFBQSxHQXFEQSxTQUFBd1EsRUFBQUMsRUFBQUMsR0FDQSxRQUFBdFEsRUFBQSxFQUFnQkEsRUFBQXFRLEVBQUE1TSxPQUFtQnpELElBQUEsQ0FDbkMsSUFBQXVRLEVBQUFGLEVBQUFyUSxHQUNBd1EsRUFBQW5CLEVBQUFrQixFQUFBcE4sSUFFQSxHQUFBcU4sRUFBQSxDQUNBQSxFQUFBQyxPQUVBLFFBQUFDLEVBQUEsRUFBaUJBLEVBQUFGLEVBQUFHLE1BQUFsTixPQUEyQmlOLElBQzVDRixFQUFBRyxNQUFBRCxHQUFBSCxFQUFBSSxNQUFBRCxJQUdBLEtBQVFBLEVBQUFILEVBQUFJLE1BQUFsTixPQUF1QmlOLElBQy9CRixFQUFBRyxNQUFBcEwsS0FBQXFMLEVBQUFMLEVBQUFJLE1BQUFELEdBQUFKLFFBRUcsQ0FDSCxJQUFBSyxLQUVBLElBQUFELEVBQUEsRUFBaUJBLEVBQUFILEVBQUFJLE1BQUFsTixPQUF1QmlOLElBQ3hDQyxFQUFBcEwsS0FBQXFMLEVBQUFMLEVBQUFJLE1BQUFELEdBQUFKLElBR0FqQixFQUFBa0IsRUFBQXBOLEtBQTJCQSxHQUFBb04sRUFBQXBOLEdBQUFzTixLQUFBLEVBQUFFLFdBSzNCLFNBQUFFLEVBQUFDLEVBQUFSLEdBSUEsSUFIQSxJQUFBRCxLQUNBVSxLQUVBL1EsRUFBQSxFQUFnQkEsRUFBQThRLEVBQUFyTixPQUFpQnpELElBQUEsQ0FDakMsSUFBQXVRLEVBQUFPLEVBQUE5USxHQUNBbUQsRUFBQW1OLEVBQUFVLEtBQUFULEVBQUEsR0FBQUQsRUFBQVUsS0FBQVQsRUFBQSxHQUlBVSxHQUFjaEQsSUFIZHNDLEVBQUEsR0FHY1csTUFGZFgsRUFBQSxHQUVjWSxVQURkWixFQUFBLElBR0FRLEVBQUE1TixHQUNBNE4sRUFBQTVOLEdBQUF3TixNQUFBcEwsS0FBQTBMLEdBREFaLEVBQUE5SyxLQUFBd0wsRUFBQTVOLElBQWtEQSxLQUFBd04sT0FBQU0sS0FJbEQsT0FBQVosRUFHQSxTQUFBZSxFQUFBZCxFQUFBZSxHQUNBLElBQUFqRyxFQUFBM0csRUFBQTZMLEVBQUFnQixZQUVBLElBQUFsRyxFQUNBLFVBQUFnRCxNQUFBLCtHQUdBLElBQUFtRCxFQUFBckIsSUFBQXpNLE9BQUEsR0FFQSxXQUFBNk0sRUFBQWtCLFNBQ0FELEVBRUdBLEVBQUFFLFlBQ0hyRyxFQUFBc0csYUFBQUwsRUFBQUUsRUFBQUUsYUFFQXJHLEVBQUF1RyxZQUFBTixHQUpBakcsRUFBQXNHLGFBQUFMLEVBQUFqRyxFQUFBd0csWUFNQTFCLEVBQUEzSyxLQUFBOEwsUUFDRSxjQUFBZixFQUFBa0IsU0FDRnBHLEVBQUF1RyxZQUFBTixPQUNFLHFCQUFBZixFQUFBa0IsV0FBQWxCLEVBQUFrQixTQUFBSyxPQUlGLFVBQUF6RCxNQUFBLDhMQUhBLElBQUFxRCxFQUFBaE4sRUFBQTZMLEVBQUFnQixXQUFBLElBQUFoQixFQUFBa0IsU0FBQUssUUFDQXpHLEVBQUFzRyxhQUFBTCxFQUFBSSxJQU1BLFNBQUFLLEVBQUFULEdBQ0EsVUFBQUEsRUFBQVUsV0FBQSxTQUNBVixFQUFBVSxXQUFBQyxZQUFBWCxHQUVBLElBQUFZLEVBQUEvQixFQUFBMUwsUUFBQTZNLEdBQ0FZLEdBQUEsR0FDQS9CLEVBQUFnQyxPQUFBRCxFQUFBLEdBSUEsU0FBQUUsRUFBQTdCLEdBQ0EsSUFBQWUsRUFBQTlCLFNBQUE5RyxjQUFBLFNBT0EsT0FMQTZILEVBQUE4QixNQUFBaEYsS0FBQSxXQUVBaUYsRUFBQWhCLEVBQUFmLEVBQUE4QixPQUNBaEIsRUFBQWQsRUFBQWUsR0FFQUEsRUFlQSxTQUFBZ0IsRUFBQUMsRUFBQUYsR0FDQTFSLE9BQUEyRCxLQUFBK04sR0FBQTlOLFFBQUEsU0FBQUMsR0FDQStOLEVBQUFDLGFBQUFoTyxFQUFBNk4sRUFBQTdOLE1BSUEsU0FBQXFNLEVBQUE0QixFQUFBbEMsR0FDQSxJQUFBZSxFQUFBb0IsRUFBQTdILEVBQUE4SCxFQUdBLEdBQUFwQyxFQUFBcUMsV0FBQUgsRUFBQXZFLElBQUEsQ0FHQSxLQUZBeUUsRUFBQXBDLEVBQUFxQyxVQUFBSCxFQUFBdkUsTUFTQSxvQkFKQXVFLEVBQUF2RSxJQUFBeUUsRUFVQSxHQUFBcEMsRUFBQU4sVUFBQSxDQUNBLElBQUE0QyxFQUFBM0MsSUFFQW9CLEVBQUFyQixNQUFBbUMsRUFBQTdCLElBRUFtQyxFQUFBSSxFQUFBQyxLQUFBLEtBQUF6QixFQUFBdUIsR0FBQSxHQUNBaEksRUFBQWlJLEVBQUFDLEtBQUEsS0FBQXpCLEVBQUF1QixHQUFBLFFBR0FKLEVBQUFyQixXQUNBLG1CQUFBNEIsS0FDQSxtQkFBQUEsSUFBQUMsaUJBQ0EsbUJBQUFELElBQUFFLGlCQUNBLG1CQUFBQyxNQUNBLG1CQUFBQyxNQUVBOUIsRUF0REEsU0FBQWYsR0FDQSxJQUFBOEMsRUFBQTdELFNBQUE5RyxjQUFBLFFBUUEsT0FOQTZILEVBQUE4QixNQUFBaEYsS0FBQSxXQUNBa0QsRUFBQThCLE1BQUFpQixJQUFBLGFBRUFoQixFQUFBZSxFQUFBOUMsRUFBQThCLE9BQ0FoQixFQUFBZCxFQUFBOEMsR0FFQUEsRUE2Q0FFLENBQUFoRCxHQUNBbUMsRUFpRkEsU0FBQVcsRUFBQTlDLEVBQUFrQyxHQUNBLElBQUF2RSxFQUFBdUUsRUFBQXZFLElBQ0FrRCxFQUFBcUIsRUFBQXJCLFVBUUFvQyxPQUFBN1AsSUFBQTRNLEVBQUFrRCx1QkFBQXJDLEdBRUFiLEVBQUFrRCx1QkFBQUQsS0FDQXRGLEVBQUFrQyxFQUFBbEMsSUFHQWtELElBRUFsRCxHQUFBLHVEQUF1RGtGLEtBQUFNLFNBQUFDLG1CQUFBM0gsS0FBQW1ELFVBQUFpQyxNQUFBLE9BR3ZELElBQUF3QyxFQUFBLElBQUFULE1BQUFqRixJQUE2QmIsS0FBQSxhQUU3QndHLEVBQUFSLEVBQUFTLEtBRUFULEVBQUFTLEtBQUFkLElBQUFDLGdCQUFBVyxHQUVBQyxHQUFBYixJQUFBRSxnQkFBQVcsSUE1R0FkLEtBQUEsS0FBQXpCLEVBQUFmLEdBQ0ExRixFQUFBLFdBQ0FrSCxFQUFBVCxHQUVBQSxFQUFBd0MsTUFBQWQsSUFBQUUsZ0JBQUE1QixFQUFBd0MsU0FHQXhDLEVBQUFjLEVBQUE3QixHQUNBbUMsRUFzREEsU0FBQXBCLEVBQUFtQixHQUNBLElBQUF2RSxFQUFBdUUsRUFBQXZFLElBQ0FpRCxFQUFBc0IsRUFBQXRCLE1BRUFBLEdBQ0FHLEVBQUFrQixhQUFBLFFBQUFyQixHQUdBLEdBQUFHLEVBQUF5QyxXQUNBekMsRUFBQXlDLFdBQUFDLFFBQUE5RixNQUNFLENBQ0YsS0FBQW9ELEVBQUFPLFlBQ0FQLEVBQUFXLFlBQUFYLEVBQUFPLFlBR0FQLEVBQUFNLFlBQUFwQyxTQUFBeUUsZUFBQS9GLE1BckVBNkUsS0FBQSxLQUFBekIsR0FDQXpHLEVBQUEsV0FDQWtILEVBQUFULEtBTUEsT0FGQW9CLEVBQUFELEdBRUEsU0FBQXlCLEdBQ0EsR0FBQUEsRUFBQSxDQUNBLEdBQ0FBLEVBQUFoRyxNQUFBdUUsRUFBQXZFLEtBQ0FnRyxFQUFBL0MsUUFBQXNCLEVBQUF0QixPQUNBK0MsRUFBQTlDLFlBQUFxQixFQUFBckIsVUFFQSxPQUdBc0IsRUFBQUQsRUFBQXlCLFFBRUFySixLQXJPQTdLLEVBQUFELFFBQUEsU0FBQWdSLEVBQUFSLEdBQ0EsdUJBQUE0RCxjQUNBLGlCQUFBM0UsU0FBQSxVQUFBbkIsTUFBQSxpRUFHQWtDLFNBRUE4QixNQUFBLGlCQUFBOUIsRUFBQThCLE1BQUE5QixFQUFBOEIsU0FJQTlCLEVBQUFOLFdBQUEsa0JBQUFNLEVBQUFOLFlBQUFNLEVBQUFOLFVBQUFWLEtBR0FnQixFQUFBZ0IsYUFBQWhCLEVBQUFnQixXQUFBLFFBR0FoQixFQUFBa0IsV0FBQWxCLEVBQUFrQixTQUFBLFVBRUEsSUFBQW5CLEVBQUFRLEVBQUFDLEVBQUFSLEdBSUEsT0FGQUYsRUFBQUMsRUFBQUMsR0FFQSxTQUFBNkQsR0FHQSxJQUZBLElBQUFDLEtBRUFwVSxFQUFBLEVBQWlCQSxFQUFBcVEsRUFBQTVNLE9BQW1CekQsSUFBQSxDQUNwQyxJQUFBdVEsRUFBQUYsRUFBQXJRLElBQ0F3USxFQUFBbkIsRUFBQWtCLEVBQUFwTixLQUVBc04sT0FDQTJELEVBQUE3TyxLQUFBaUwsR0FHQTJELEdBRUEvRCxFQURBUyxFQUFBc0QsRUFBQTdELEdBQ0FBLEdBR0EsSUFBQXRRLEVBQUEsRUFBaUJBLEVBQUFvVSxFQUFBM1EsT0FBc0J6RCxJQUFBLENBQ3ZDLElBQUF3USxFQUVBLFFBRkFBLEVBQUE0RCxFQUFBcFUsSUFFQXlRLEtBQUEsQ0FDQSxRQUFBQyxFQUFBLEVBQW1CQSxFQUFBRixFQUFBRyxNQUFBbE4sT0FBMkJpTixJQUFBRixFQUFBRyxNQUFBRCxZQUU5Q3JCLEVBQUFtQixFQUFBck4sUUE2TEEsSUFDQWtSLEVBREFDLEdBQ0FELEtBRUEsU0FBQTdLLEVBQUErSyxHQUdBLE9BRkFGLEVBQUE3SyxHQUFBK0ssRUFFQUYsRUFBQW5QLE9BQUFzUCxTQUFBQyxLQUFBLFFBSUEsU0FBQTVCLEVBQUF4QixFQUFBN0gsRUFBQW9CLEVBQUE0SCxHQUNBLElBQUF2RSxFQUFBckQsRUFBQSxHQUFBNEgsRUFBQXZFLElBRUEsR0FBQW9ELEVBQUF5QyxXQUNBekMsRUFBQXlDLFdBQUFDLFFBQUFPLEVBQUE5SyxFQUFBeUUsT0FDRSxDQUNGLElBQUF5RyxFQUFBbkYsU0FBQXlFLGVBQUEvRixHQUNBMEcsRUFBQXRELEVBQUFzRCxXQUVBQSxFQUFBbkwsSUFBQTZILEVBQUFXLFlBQUEyQyxFQUFBbkwsSUFFQW1MLEVBQUFsUixPQUNBNE4sRUFBQUssYUFBQWdELEVBQUFDLEVBQUFuTCxJQUVBNkgsRUFBQU0sWUFBQStDLG9CQzlUQTNVLEVBQUFELFFBQUEsU0FBQThVLEdBQ0EsSUFBQTlELEtBd0NBLE9BckNBQSxFQUFBK0QsU0FBQSxXQUNBLE9BQUFqVCxLQUFBNEQsSUFBQSxTQUFBK0ssR0FDQSxJQUFBdUUsRUFzQ0EsU0FBQXZFLEVBQUFxRSxHQUNBLElBQUFFLEVBQUF2RSxFQUFBLE9BQ0F3RSxFQUFBeEUsRUFBQSxHQUNBLElBQUF3RSxFQUNBLE9BQUFELEVBR0EsR0FBQUYsR0FBQSxtQkFBQXpCLEtBQUEsQ0FDQSxJQUFBNkIsR0FZQTdELEVBWkE0RCxFQWlCQSxtRUFIQTVCLEtBQUFNLFNBQUFDLG1CQUFBM0gsS0FBQW1ELFVBQUFpQyxNQUdBLE9BaEJBOEQsRUFBQUYsRUFBQUcsUUFBQTFQLElBQUEsU0FBQTJQLEdBQ0EsdUJBQUFKLEVBQUFLLFdBQUFELEVBQUEsUUFHQSxPQUFBTCxHQUFBMVAsT0FBQTZQLEdBQUE3UCxRQUFBNFAsSUFBQVAsS0FBQSxNQU9BLElBQUF0RCxFQUpBLE9BQUEyRCxHQUFBTCxLQUFBLE1BdERBWSxDQUFBOUUsRUFBQXFFLEdBQ0EsT0FBQXJFLEVBQUEsR0FDQSxVQUFBQSxFQUFBLE9BQW1DdUUsRUFBQSxJQUVuQ0EsSUFFR0wsS0FBQSxLQUlIM0QsRUFBQTlRLEVBQUEsU0FBQUUsRUFBQW9WLEdBQ0EsaUJBQUFwVixJQUNBQSxJQUFBLEtBQUFBLEVBQUEsTUFFQSxJQURBLElBQUFxVixLQUNBdlYsRUFBQSxFQUFnQkEsRUFBQTRCLEtBQUE2QixPQUFpQnpELElBQUEsQ0FDakMsSUFBQW1ELEVBQUF2QixLQUFBNUIsR0FBQSxHQUNBLGlCQUFBbUQsSUFDQW9TLEVBQUFwUyxJQUFBLEdBRUEsSUFBQW5ELEVBQUEsRUFBWUEsRUFBQUUsRUFBQXVELE9BQW9CekQsSUFBQSxDQUNoQyxJQUFBdVEsRUFBQXJRLEVBQUFGLEdBS0EsaUJBQUF1USxFQUFBLElBQUFnRixFQUFBaEYsRUFBQSxNQUNBK0UsSUFBQS9FLEVBQUEsR0FDQUEsRUFBQSxHQUFBK0UsRUFDS0EsSUFDTC9FLEVBQUEsT0FBQUEsRUFBQSxhQUFBK0UsRUFBQSxLQUVBeEUsRUFBQXZMLEtBQUFnTCxNQUlBTyxxQkM5Q0EvUSxFQUFBRCxRQUFBRixFQUFBLEVBQUFBLEVBQUEsSUFLQTJGLE1BQUF4RixFQUFBQyxFQUFBLHl0R0FBOHVHLHNCQ0o5dUcsSUFBQThVLEVBQUFsVixFQUFBLEdBRUEsaUJBQUFrVixRQUFBL1UsRUFBQUMsRUFBQThVLEVBQUEsTUFPQSxJQUFBeEUsR0FBZWtGLEtBQUEsRUFFZjdDLGVBUEFBLEVBUUFyQixnQkFBQTVOLEdBRUE5RCxFQUFBLEVBQUFBLENBQUFrVixFQUFBeEUsR0FFQXdFLEVBQUFXLFNBQUExVixFQUFBRCxRQUFBZ1YsRUFBQVcsd2ZDakJBN1YsRUFBQSxRQUNBQSxFQUFBLFFBRUFBLEVBQUEsUUFDQUEsRUFBQSwyREFFTThWLGNBQ0osU0FBQUEsRUFBWW5PLGdHQUFPNUYsQ0FBQUMsS0FBQThULEdBQUEsSUFBQWxPLG1LQUFBQyxDQUFBN0YsTUFBQThULEVBQUFoTyxXQUFBaEgsT0FBQWlILGVBQUErTixJQUFBdlYsS0FBQXlCLEtBQ1gyRixJQURXLE9BQUFDLEVBWW5CbU8sZUFBaUIsU0FBQ0MsR0FDaEJwTyxFQUFLK0MsVUFDSHNMLGFBQWNELEtBZENwTyxFQXdCbkJzTyw0QkFBOEIsU0FBQ2pTLEdBQzdCLElBQU1rUyxLQUNBQyxFQUFjeE8sRUFBS25GLDBCQUN0QnVCLEtBQUssU0FBQTBGLEdBQUEsT0FBS0EsRUFBRThELE9BQVN2SixFQUFRdUosT0FjaEMsT0FWSXZDLE1BQU1DLFFBQVFqSCxFQUFRVCxTQUN4QlMsRUFBUVQsT0FBT2tCLFFBQVEsU0FBQ0wsR0FDdEI4UixFQUFTOVIsRUFBTVgsWUFBY3lTLEVBQVM5UixFQUFNWCxnQkFDNUN5UyxFQUFTOVIsRUFBTVgsWUFBY3lTLEVBQVM5UixFQUFNWCxZQUN6QzhCLE9BQU9vQyxFQUFLc08sNEJBQTRCN1IsTUFPN0M2RCxFQUFBbEMsUUFBQTZDLGNBQUN1TixFQUFZM0ksVUFBYmpILEdBQ0VqRCxHQUFJVSxFQUFRVixHQUNab0IsSUFBS1YsRUFBUVYsR0FDYjhTLFVBQVdGLEdBSGIzUCxLQUlXdkMsR0FBU3FTLGFBQWEsRUFBTWxNLGtCQUFrQixPQTNDM0R4QyxFQUFLekUsT0FDSDhTLGFBQWNySyxFQUFBNUYsUUFBTVUsWUFHdEJrQixFQUFLbkYsMEJBQTRCcUosRUFBQTlGLFFBQUt0RCwrQkFDdENrSixFQUFBNUYsUUFBTXVCLGlCQUFpQkssRUFBS21PLGdCQVJYbk8scVVBRENNLEVBQUFsQyxRQUFNdVEsK0NBcUR4QixJQUFNQyxFQUFPeFUsS0FBS21CLE1BQU04UyxhQUFhLEdBR3JDLE1BQW1DLG1CQUF4QmpVLEtBQUsyRixNQUFNd08sU0FDYm5VLEtBQUsyRixNQUFNd08sVUFDaEJBLFNBQVVLLEVBQUtoVCxPQUFPb0MsSUFBSTVELEtBQUtrVSwrQkFNakNoTyxFQUFBbEMsUUFBQTZDLGNBQUEsT0FBS0UsVUFBVSxxQkFFWHlOLEVBQUtoVCxPQUFPb0MsSUFBSTVELEtBQUtrVSx1Q0FPL0JKLEVBQVFwSSxXQUNOeUksU0FBVXhJLEVBQUEzSCxRQUFVK0gsZ0JBR1ArSCwwVUNuRmZyTyxFQUFBekgsRUFBQSxjQUNBQSxFQUFBLFFBRUFBLEVBQUEsMkRBRU15VyxjQUNKLFNBQUFBLEVBQVk5TyxnR0FBTzVGLENBQUFDLEtBQUF5VSxHQUFBLElBQUE3TyxtS0FBQUMsQ0FBQTdGLE1BQUF5VSxFQUFBM08sV0FBQWhILE9BQUFpSCxlQUFBME8sSUFBQWxXLEtBQUF5QixLQUNYMkYsSUFEVyxPQUFBQyxFQWNuQnlELG1CQUFxQixTQUFBOUMsRUFBYWdELEdBQVcsSUFBckJDLEVBQXFCakQsRUFBckJpRCxPQUNsQjVELEVBQUs4TyxTQUFTN0wsVUFBWVcsR0FDNUJBLEVBQU9ULFVBQVVRLEdBQVEsV0FoQlYzRCxFQW9CbkIyQixRQUFVLFNBQUNHLEdBQ1RBLEVBQUV1QyxpQkFDRnZDLEVBQUV3QyxrQkFHRixJQUFNeUssRUFBcUI3SyxFQUFBOUYsUUFBS3pELG9CQUdoQyxJQUFLb1UsRUFDSCxPQUFPLEVBVE0sSUFBQUMsRUFZeUJoUCxFQUFLRCxNQUFyQ2tQLEVBWk9ELEVBWVBDLGNBQWVDLEVBWlJGLEVBWVFFLGFBQ2Z6USxFQUFrQnNRLEVBQWxCdFEsY0FDRmpFLEVBQVN5VSxFQUFjRixHQW1CN0IsT0FqQkEvTyxFQUFLeUQsbUJBQW1CM0IsRUFBRyxVQUd2QnRILEdBQVUwSixFQUFBOUYsUUFBSy9ELHVCQUVqQm9FLEVBQWNzUSxFQUFtQnhTLFVBQVcsV0FFMUMyUyxNQUNDLEdBR0hoTCxFQUFBOUYsUUFBSzNELGtCQUFrQixPQUl6QnlKLEVBQUE5RixRQUFLN0Qsb0JBQW1CLElBRWpCLEdBckRVeUYsRUEyRG5CcUIsWUFBYyxTQUFDUyxHQUNiQSxFQUFFdUMsa0JBNURlckUsRUFtRW5CdUIsYUFBZSxTQUFDTyxHQUNkOUIsRUFBS3lELG1CQUFtQjNCLEVBQUcsV0FwRVY5QixFQTJFbkJ5QixhQUFlLFNBQUNLLEdBQ2FvQyxFQUFBOUYsUUFBS3pELHFCQUc5QnFGLEVBQUt5RCxtQkFBbUIzQixFQUFHLFFBMUU3QjlCLEVBQUs4TyxTQUFXeE8sRUFBQWxDLFFBQU1tQyxZQUxMUCxzWEFvRmpCLE9BQ0VNLEVBQUFsQyxRQUFBNkMsY0FBQSxPQUNFQyxJQUFLOUcsS0FBSzBVLFNBQ1YzTixVQUFVLFlBQ1ZHLFlBQWFsSCxLQUFLbUgsYUFDbEJDLFlBQWFwSCxLQUFLcUgsYUFDbEJMLFdBQVloSCxLQUFLaUgsWUFDakJLLE9BQVF0SCxLQUFLdUgsU0FFWHZILEtBQUsyRixNQUFNd08sVUFBWWpPLEVBQUFsQyxRQUFBNkMsY0FBQSxtQ0FNakM0TixFQUFNL0ksV0FDSm1KLGNBQWVsSixFQUFBM0gsUUFBVStILEtBQ3pCK0ksYUFBY25KLEVBQUEzSCxRQUFVK0gsS0FDeEJvSSxTQUFVeEksRUFBQTNILFFBQVVrSSxXQUNsQlAsRUFBQTNILFFBQVVpSSxRQUFRTixFQUFBM0gsUUFBVS9CLFNBQzVCMEosRUFBQTNILFFBQVUvQixXQUlkd1MsRUFBTXJJLGNBQ0p5SSxjQUFlLGtCQUFPLEdBQ3RCQyxhQUFjLGtCQUFPLGNBR1JMLDhlQ3ZIZmhQLEVBQUF6SCxFQUFBLGNBQ0FBLEVBQUEsUUFFQUEsRUFBQSw4TkFFTStXLDZTQU1KQyxZQUFjLFNBQUNyUCxHQUNiLElBQU0xRCxFQUFVNkgsRUFBQTlGLFFBQUt0RCwrQkFBK0JzQixLQUFLLFNBQUEwRixHQUFBLE9BQUtBLEVBQUU4RCxPQUFTN0YsRUFBTTZGLE9BQy9FLE9BQU92SixFQUFVaUUsRUFBQWxDLFFBQUE2QyxjQUFDNUUsRUFBUXdKLFVBQWM5RixHQUFZLGlZQUc3QyxJQUFBYSxFQUFBeEcsS0FDQ2lWLEVBQW9CalYsS0FBSzJGLE1BQXpCc1AsZ0JBRVIsT0FDRS9PLEVBQUFsQyxRQUFBNkMsY0FBQSxPQUFLRSxVQUFVLFdBRVhrTyxFQUFnQnJSLElBQUksU0FBQStLLEdBQUEsT0FDbEJuSSxFQUFLd08sWUFBTHhRLEtBQXNCbUssR0FBTWhNLElBQUtnTSxFQUFLcE4sR0FBSTZHLGtCQUFrQixpQkFReEUyTSxFQUFRckosV0FDTnVKLGdCQUFpQnRKLEVBQUEzSCxRQUFVaUksUUFBUSxTQUFDaUosR0FDbEMsSUFBSUMsR0FBVSxFQWFkLE9BVkFELEVBQVV4UyxRQUFRLFNBQUNpTSxHQUNiQSxJQUFTQSxFQUFLcE4sS0FDaEI0VCxFQUFVLDJDQUdSRCxFQUFVNVIsT0FBTyxTQUFBbEYsR0FBQSxPQUFLQSxFQUFFbUQsS0FBT29OLEVBQUtwTixLQUFJTSxPQUFTLElBQ25Ec1QsRUFBVSwrQ0FJUEEsR0FBVSxJQUFJM0ksTUFBTTJJLE1BSS9CSixFQUFRM0ksY0FDTjZJLDhCQUdhRiw4ZUN0RGZ0UCxFQUFBekgsRUFBQSxjQUNBQSxFQUFBLFFBRUFBLEVBQUEsMkRBRU1vWCxjQUNKLFNBQUFBLEVBQVl6UCxnR0FBTzVGLENBQUFDLEtBQUFvVixHQUFBLElBQUF4UCxtS0FBQUMsQ0FBQTdGLE1BQUFvVixFQUFBdFAsV0FBQWhILE9BQUFpSCxlQUFBcVAsSUFBQTdXLEtBQUF5QixLQUNYMkYsSUFEVyxPQUFBQyxFQWFuQnlQLFNBQVcsU0FBQzNOLEdBQ1ZBLEVBQUV3QyxrQkFFRnRFLEVBQUswUCxZQUFZek0sUUFBUUUsVUFBVUMsT0FBTyxTQUFVLFNBR3BEYyxFQUFBOUYsUUFBSzNELGtCQUFrQixPQW5CTnVGLEVBc0JuQjJQLFdBQWEsU0FBQzdOLEdBQ1pBLEVBQUV3QyxrQkFEZ0IsSUFBQTBLLEVBWWRoUCxFQUFLRCxNQVJQcEUsRUFKZ0JxVCxFQUloQnJULEdBQ0FpSyxFQUxnQm9KLEVBS2hCcEosS0FDQTdNLEVBTmdCaVcsRUFNaEJqVyxLQUNBNkMsRUFQZ0JvVCxFQU9oQnBULE9BQ0FnVSxFQVJnQlosRUFRaEJZLFFBQ0E5VCxFQVRnQmtULEVBU2hCbFQsV0FDQTJDLEVBVmdCdVEsRUFVaEJ2USxjQUNBb0UsRUFYZ0JtTSxFQVdoQm5NLHNCQUdJVixHQUNKeEcsS0FDQWlLLE9BQ0E3TSxPQUNBNlcsV0FHRWhVLElBQ0Z1RyxFQUFLdkcsT0FBU0EsR0FHaEJrRyxFQUFFMkMsYUFBYW9MLGNBQWdCLE9BQy9CL04sRUFBRTJDLGFBQWFxTCxRQUFRLE9BQVF2TCxLQUFLbUQsVUFBVXZGLElBSTFDckcsR0FDRm9JLEVBQUE5RixRQUFLM0QsbUJBQ0g4QixVQUFXWixFQUNYRyxhQUNBMkMsZ0JBQ0FvRSwyQkF6RGE3QyxFQW1FbkJxQixZQUFjLFNBQUNTLEdBQ2IsSUFBTWlPLEVBQVcvUCxFQUFLMFAsWUFBWXpNLFFBQVErTSx3QkFFMUMsSUFBS2hRLEVBQUtELE1BQU1pQixlQUNkLE9BQU8sRUFHVCxHQUFJaEIsRUFBS0QsTUFBTWlGLGdCQUFpQixDQUM5QixJQUFNaUwsRUFBWW5PLEVBQUVvTyxRQUNwQixHQUFJRCxHQUFhRixFQUFTSSxHQUFLRixHQUFhRixFQUFTSSxFQUFJSixFQUFTSyxNQUU1REgsRUFEU0YsRUFBU0ksRUFBSUosRUFBU0ssTUFBUSxHQUV6Q3BRLEVBQUswUCxZQUFZek0sUUFBUUUsVUFBVUMsT0FBTyxTQUMxQ3BELEVBQUswUCxZQUFZek0sUUFBUUUsVUFBVXVDLElBQUksVUFDdkN4QixFQUFBOUYsUUFBS3JELGVBQWVpRixFQUFLRCxNQUFNaUMsU0FFL0JoQyxFQUFLMFAsWUFBWXpNLFFBQVFFLFVBQVVDLE9BQU8sVUFDMUNwRCxFQUFLMFAsWUFBWXpNLFFBQVFFLFVBQVV1QyxJQUFJLFNBQ3ZDeEIsRUFBQTlGLFFBQUtyRCxlQUFlaUYsRUFBS0QsTUFBTWlDLE1BQVEsUUFHdEMsQ0FDTCxJQUFNcU8sRUFBWXZPLEVBQUV3TyxRQUNwQixHQUFJRCxHQUFhTixFQUFTUSxHQUFLRixHQUFhTixFQUFTUSxFQUFJUixFQUFTUyxPQUU1REgsRUFEU04sRUFBU1EsRUFBSVIsRUFBU1MsT0FBUyxHQUUxQ3hRLEVBQUswUCxZQUFZek0sUUFBUUUsVUFBVUMsT0FBTyxTQUMxQ3BELEVBQUswUCxZQUFZek0sUUFBUUUsVUFBVXVDLElBQUksVUFDdkN4QixFQUFBOUYsUUFBS3JELGVBQWVpRixFQUFLRCxNQUFNaUMsU0FFL0JoQyxFQUFLMFAsWUFBWXpNLFFBQVFFLFVBQVVDLE9BQU8sVUFDMUNwRCxFQUFLMFAsWUFBWXpNLFFBQVFFLFVBQVV1QyxJQUFJLFNBQ3ZDeEIsRUFBQTlGLFFBQUtyRCxlQUFlaUYsRUFBS0QsTUFBTWlDLE1BQVEsSUFLN0MsT0FBTyxHQXhHVWhDLEVBMkduQnVCLGFBQWUsV0FFYnZCLEVBQUswUCxZQUFZek0sUUFBUUUsVUFBVUMsT0FBTyxTQUFVLFVBMUdwRHBELEVBQUswUCxZQUFjcFAsRUFBQWxDLFFBQU1tQyxZQUhSUCx1WUFNT3lRLEdBRXBCclcsS0FBSzJGLE1BQU1VLFdBQWFnUSxFQUFVaFEsVUFBWWdRLEVBQVVoUSxVQUMxRHJHLEtBQUsyRixNQUFNN0MsK0NBdUdOLElBQUEyRCxFQUM4Q3pHLEtBQUsyRixNQUFsRDJRLEVBREQ3UCxFQUNDNlAsYUFBY0MsRUFEZjlQLEVBQ2U4UCxVQUFXM0wsRUFEMUJuRSxFQUMwQm1FLGdCQUM3QmxELEVBQUksS0FpQlIsT0FmSTFILEtBQUsyRixNQUFNakUsYUFFYmdHLEdBQ0VWLFdBQVloSCxLQUFLaUgsWUFDakJDLFlBQWFsSCxLQUFLbUgsZUFJbEJvUCxJQUNGN08sT0FDS0EsR0FDSDZPLFdBQVcsS0FLYnJRLEVBQUFsQyxRQUFBNkMsY0FBQSxNQUFBckMsR0FDRXNDLElBQUs5RyxLQUFLc1YsWUFDVnZPLFVBQUEsY0FBd0I2RCxFQUFrQixTQUFXLElBQ3JENEwsWUFBYXhXLEtBQUt1VixXQUNsQi9OLFVBQVd4SCxLQUFLcVYsVUFDWmlCLEVBQ0E1TyxHQUdGMUgsS0FBSzJGLE1BQU13TyxtQkFPckJpQixFQUFVMUosV0FDUm5LLEdBQUlvSyxFQUFBM0gsUUFBVTRILE9BQU9DLFdBQ3JCbE4sS0FBTWdOLEVBQUEzSCxRQUFVNEgsT0FDaEJ2RixTQUFVc0YsRUFBQTNILFFBQVVnSSxLQUNwQnBFLE1BQU8rRCxFQUFBM0gsUUFBVThILE9BQ2pCbEIsZ0JBQWlCZSxFQUFBM0gsUUFBVWdJLEtBQzNCeEssT0FBUW1LLEVBQUEzSCxRQUFVeVMsV0FBV3hOLE9BQzdCc04sVUFBVzVLLEVBQUEzSCxRQUFVZ0ksS0FDckJwRixlQUFnQitFLEVBQUEzSCxRQUFVZ0ksS0FDMUJsSixZQUFhNkksRUFBQTNILFFBQVUrSCxLQUN2QnJLLFdBQVlpSyxFQUFBM0gsUUFBVTRILE9BQ3RCNEosUUFBUzdKLEVBQUEzSCxRQUFVeVMsV0FBVzNYLFFBQzlCd1gsYUFBYzNLLEVBQUEzSCxRQUFVeVMsV0FBVzNYLFFBQ25DME0sS0FBTUcsRUFBQTNILFFBQVU0SCxPQUFPQyxXQUN2QnNJLFNBQVV4SSxFQUFBM0gsUUFBVWtJLFdBQ2xCUCxFQUFBM0gsUUFBVWlJLFFBQVFOLEVBQUEzSCxRQUFVL0IsU0FDNUIwSixFQUFBM0gsUUFBVS9CLFVBQ1Q0SixXQUNIeEgsY0FBZXNILEVBQUEzSCxRQUFVK0gsS0FDekJ0RCxzQkFBdUJrRCxFQUFBM0gsUUFBVStILE1BR25DcUosRUFBVWhKLGNBQ1IzRCxzQkFBdUIsa0JBQU8sR0FDOUI2TixhQUFjLEtBQ2RkLFFBQVMsS0FDVGUsV0FBVyxFQUNYelQsWUFBYSxrQkFBTyxjQUdQc1MsaUZDeExmLFFBQUFwWCxFQUFBLFFBQ0FBLEVBQUEsMkRBaUZNMFksRUFBVyxJQTdFZixTQUFBQyxJQUFjLElBQUEvUSxFQUFBNUYsa0dBQUFELENBQUFDLEtBQUEyVyxHQUFBM1csS0FXZGlFLGtCQUFvQixXQUVsQjJCLEVBQUtnUixNQUFNQyxPQUFPblUsUUFBUSxTQUFBZ0YsR0FBQSxPQUFLQSxFQUFFa0MsRUFBQTVGLFFBQU1VLGVBYjNCMUUsS0FrQmRvRixpQkFBbUIsU0FBQzBSLEdBQ2RBLEdBQ0ZsUixFQUFLM0Isb0JBSVAyQixFQUFLZ1IsTUFBTUcsTUFBTXJVLFFBQVEsU0FBQWdGLEdBQUEsT0FBS0EsR0FBRSxNQXhCcEIxSCxLQTRCZHlFLG9CQUFzQixTQUFDeEMsR0FFckIyRCxFQUFLZ1IsTUFBTXRTLGNBQWM1QixRQUFRLFNBQUFnRixHQUFBLE9BQUtBLEVBQUV6RixNQTlCNUJqQyxLQWtDZGtFLG9CQUFzQixTQUFDakMsR0FFckIyRCxFQUFLZ1IsTUFBTXZTLGNBQWMzQixRQUFRLFNBQUFnRixHQUFBLE9BQUtBLEVBQUV6RixNQXBDNUJqQyxLQTRDZHVGLGlCQUFtQixTQUFDeVIsRUFBV2pVLEdBQzdCLElBQUlrVSxFQUFXLEtBRWYsTUFBa0IsbUJBQVBsVSxHQUNUK0csRUFBQTlGLFFBQUtsRCxNQUFNLGtDQUNKLElBR0xoQyxPQUFPVyxVQUFVQyxlQUFlbkIsS0FBS3FILEVBQUtnUixNQUFPSSxJQUNuRHBSLEVBQUtnUixNQUFNSSxHQUFXclQsS0FBS1osR0FFM0JrVSxFQUFXbFUsR0FFWCtHLEVBQUE5RixRQUFLbEQsTUFBTSxpQkFHTm1XLElBNURLalgsS0FvRWR3RixvQkFBc0IsU0FBQ3dSLEVBQVdqVSxHQUM1QmpFLE9BQU9XLFVBQVVDLGVBQWVuQixLQUFLcUgsRUFBS2dSLE1BQU9JLEdBQ25EcFIsRUFBS2dSLE1BQU1JLEdBQWFwUixFQUFLZ1IsTUFBTUksR0FBVzFULE9BQU8sU0FBQW9FLEdBQUEsT0FBS0EsSUFBTTNFLElBRWhFK0csRUFBQTlGLFFBQUtsRCxNQUFNLGtCQXRFYmQsS0FBSzRXLE9BQ0hDLFVBQ0FFLFNBQ0ExUyxpQkFDQUMsNkJBeUVTb1MsZ0NDekVmdlksRUFBQUQsUUFGQSw2RUNZQSxJQUFBZ1osRUFBQSxTQUFBQyxLQStCQWhaLEVBQUFELFFBckJBLFNBQUFrWixFQUFBRCxFQUFBRSxFQUFBQyxFQUFBN1ksRUFBQUMsRUFBQWdKLEVBQUFuRSxHQUdBLEdBRkEyVCxFQUFBQyxJQUVBQyxFQUFBLENBQ0EsSUFBQXRXLEVBQ0EsUUFBQWdCLElBQUFxVixFQUNBclcsRUFBQSxJQUFBMEwsTUFBQSxxSUFDSyxDQUNMLElBQUErSyxHQUFBRixFQUFBQyxFQUFBN1ksRUFBQUMsRUFBQWdKLEVBQUFuRSxHQUNBaVUsRUFBQSxHQUNBMVcsRUFBQSxJQUFBMEwsTUFBQTJLLEVBQUFySyxRQUFBLGlCQUNBLE9BQUF5SyxFQUFBQyxTQUVBN1ksS0FBQSxzQkFJQSxNQURBbUMsRUFBQTJXLFlBQUEsRUFDQTNXLGtDQ3JDQSxTQUFBNFcsRUFBQUMsR0FDQSxrQkFDQSxPQUFBQSxHQVNBLElBQUFDLEVBQUEsYUFFQUEsRUFBQUMsWUFBQUgsRUFDQUUsRUFBQUUsaUJBQUFKLEdBQUEsR0FDQUUsRUFBQUcsZ0JBQUFMLEdBQUEsR0FDQUUsRUFBQUksZ0JBQUFOLEVBQUEsTUFDQUUsRUFBQUssZ0JBQUEsV0FDQSxPQUFBalksTUFFQTRYLEVBQUFNLG9CQUFBLFNBQUFQLEdBQ0EsT0FBQUEsR0FHQXhaLEVBQUFELFFBQUEwWixnQ0MxQkEsSUFBQUEsRUFBQTVaLEVBQUEsSUFDQW1hLEVBQUFuYSxFQUFBLElBQ0FvYSxFQUFBcGEsRUFBQSxJQUVBRyxFQUFBRCxRQUFBLFdBQ0EsU0FBQW1hLEVBQUExUyxFQUFBMlMsRUFBQUMsRUFBQWpNLEVBQUFrTSxFQUFBQyxHQUNBQSxJQUFBTCxHQUlBRCxHQUNBLEVBQ0EsbUxBTUEsU0FBQU8sSUFDQSxPQUFBTCxFQUZBQSxFQUFBeE0sV0FBQXdNLEVBTUEsSUFBQU0sR0FDQUMsTUFBQVAsRUFDQXJNLEtBQUFxTSxFQUNBdE0sS0FBQXNNLEVBQ0F2TSxPQUFBdU0sRUFDQTlZLE9BQUE4WSxFQUNBek0sT0FBQXlNLEVBQ0FRLE9BQUFSLEVBRUFTLElBQUFULEVBQ0FwTSxRQUFBeU0sRUFDQXpXLFFBQUFvVyxFQUNBNUIsV0FBQWlDLEVBQ0F2TSxLQUFBa00sRUFDQVUsU0FBQUwsRUFDQU0sTUFBQU4sRUFDQXhNLFVBQUF3TSxFQUNBTyxNQUFBUCxFQUNBUSxNQUFBUixHQU1BLE9BSEFDLEVBQUFRLGVBQUF2QixFQUNBZSxFQUFBUyxVQUFBVCxFQUVBQSw4UEN4REEzYSxFQUFBLFFBRUFBLEVBQUEsaUVBS2UsU0FBQTJILEdBQUEsT0FDYk8sRUFBQWxDLFFBQUE2QyxjQUFBLE9BQUtFLFVBQVUsZUFDYmIsRUFBQWxDLFFBQUE2QyxjQUFBd1MsRUFBQXJWLFFBQUFRLEtBQWNtQixHQUFPaEUsU0FBUyxPQUFPSixHQUFHLE9BQU84RSxVQUFBLHFDQ1JuRCxRQUFBckksRUFBQSxTQUNBQSxFQUFBLFFBQ0FBLEVBQUEsU0FDQUEsRUFBQSxTQUNBQSxFQUFBLFNBQ0FBLEVBQUEsU0FHQUEsRUFBQSxRQUNBQSxFQUFBLHVEQUdBQSxFQUFBLEdBRUFHLEVBQU9ELFNBRUxvYixpQkFDQTVULG1CQUNBMFAsb0JBQ0FMLGtCQUNBTixnQkFDQVgsa0JBR0EzUyxnQkFDQXRCLGVBR0FXLHdCQUF5QnNKLEVBQUE5RixRQUFLeEQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIwKTtcbiIsImNsYXNzIENvcmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBtYWluIG9iamVjdC9zdG9yZVxuICAgIGNvbnN0IGNvcmUgPSB7fTtcblxuICAgIC8vIGFsbCBwdWJsaWMgZ2V0dGVyL3NldHRlciBnb2VzIGhlcmVcblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIGdldCBhdHRlbXB0VG9SZW1vdmVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYXR0ZW1wdFRvUmVtb3ZlXG4gICAgICovXG4gICAgdGhpcy5nZXRBdHRlbXB0VG9SZW1vdmUgPSAoKSA9PiAoY29yZS5hdHRlbXB0VG9SZW1vdmUpO1xuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gc2V0IHVzZXIncyBhdHRlbXB0IHRvIHJlbW92ZSB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RhdHVzXG4gICAgICovXG4gICAgdGhpcy5zZXRBdHRlbXB0VG9SZW1vdmUgPSAoc3RhdHVzKSA9PiB7XG4gICAgICBjb3JlLmF0dGVtcHRUb1JlbW92ZSA9IHN0YXR1cztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gc2V0IGRyYWdnZWQgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkcmFnZ2VkRWxlbWVudFxuICAgICAqL1xuICAgIHRoaXMuc2V0RHJhZ2dlZEVsZW1lbnQgPSAoZHJhZ2dlZEVsZW1lbnQpID0+IHtcbiAgICAgIGNvcmUuZHJhZ2dlZEVsZW1lbnQgPSBkcmFnZ2VkRWxlbWVudDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gcmV0dXJuIGRyYWdnZWQgZWxlbWVudFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5nZXREcmFnZ2VkRWxlbWVudCA9ICgpID0+IChjb3JlLmRyYWdnZWRFbGVtZW50KTtcblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHBhbGV0dGUgZWxlbWVudHNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSByZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzIC0gcGFsZXR0ZSBlbGVtZW50c1xuICAgICAqL1xuICAgIHRoaXMucmVnaXN0ZXJQYWxldHRlRWxlbWVudHMgPSAocmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cykgPT4ge1xuICAgICAgY29yZS5yZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzID0gcmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gcmV0dXJuIHJlZ2lzdGVyZWQgcGFsZXR0ZSBlbGVtZW50c1xuICAgICAqIEByZXR1cm5zIHtBcnJheX0gLSBhcnJheSBvZiBwYWxldHRlIGVsZW1lbnRzXG4gICAgICovXG4gICAgdGhpcy5nZXRSZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzID0gKCkgPT4gKGNvcmUucmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cyB8fCBbXSk7XG5cbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB0byBzZXQgZHJvcCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkcm9wUG9zaXRpb25cbiAgICAgKi9cbiAgICB0aGlzLnNldERyb3BQb3N0aW9uID0gKGRyb3BQb3NpdGlvbikgPT4ge1xuICAgICAgY29yZS5kcm9wUG9zaXRpb24gPSBkcm9wUG9zaXRpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiBkcm9wIHBvc2l0aW9uXG4gICAgICogQHJldHVybnMge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmdldERyb3BQb3N0aW9uID0gKCkgPT4gKGNvcmUuZHJvcFBvc2l0aW9uKTtcblxuICAgIC8qIGVzbGludCBuby1jb25zb2xlOjAgKi9cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIGdpdmUgYW4gZXJyb3IgbWVzc2FnZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIC0gYW55IG1lc3NhZ2UgdG8gYmUgcHJpbnRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmVycm9yID0gY29uc29sZS5lcnJvcjtcblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIGxvZyBhIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSAtIGFueSBtZXNzYWdlIHRvIGJlIHByaW50XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5sb2cgPSBjb25zb2xlLmxvZztcbiAgfVxufVxuXG5jb25zdCBjb3JlID0gbmV3IENvcmUoKTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlYWN0XCIpOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImltcG9ydCBycG1FdmVudCBmcm9tICcuL2V2ZW50JztcblxuY2xhc3MgU3RhdGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBhbGwgcHJpdmF0ZSB2YXJpYmFsZSBnb2VzIGhlcmVcbiAgICBjb25zdCBzdGF0ZSA9IHt9O1xuICAgIGNvbnN0IHNoYXJlYWJsZUVsZW1lbnRQcm9wcyA9IFsnaWQnLCAndHlwZScsICduYW1lJywgJ3BheWxvYWQnLCAnZHJvcHpvbmVJRCcsICdwYXJlbnRJRCddO1xuXG4gICAgLy8gc2V0IGJhc2VcbiAgICBzdGF0ZS50cmVlID0gW3tcbiAgICAgIGlkOiAncm9vdCcsXG4gICAgICBmaWVsZHM6IFtdXG4gICAgfV07XG5cbiAgICAvKipcbiAgICAgKiBwcml2YXRlIGZ1bmN0aW9uIHRvIHRyYXZlcnNlIHRocm91Z2ggZWFjaCBub2RlIGFuZCB1cGRhdGUgdGhlIGNvcnJlc3BvbmRpbmcgbm9kZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkcm9wem9uZUlEXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmVudElEXG4gICAgICogQHBhcmFtIHtBcnJheX0gdXBkYXRlZEZpZWxkcyAtIG5ldyBmaWVsZHMvZWxlbWVudHNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWVsZHMgLSBmaWVsZHMvZWxlbWVudHMgb2YgY3VycmVudCBjYW52YXNcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb25zdCB0cmF2ZXJzZUFuZFVwZGF0ZVRyZWUgPSAoZHJvcHpvbmVJRCwgcGFyZW50SUQsIHVwZGF0ZWRGaWVsZHMsIGZpZWxkcyA9IHN0YXRlLnRyZWUpID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoZWRQYXJlbnRDYW52YXMgPSBmaWVsZHMuZmluZChmaWVsZCA9PiBmaWVsZC5pZCA9PT0gcGFyZW50SUQpO1xuICAgICAgbGV0IHJldHVyblN0YXR1cyA9IGZhbHNlO1xuXG4gICAgICAvLyBmb3VuZCBlbGVtZW50XG4gICAgICBpZiAobWF0Y2hlZFBhcmVudENhbnZhcykge1xuICAgICAgICBpZiAoZHJvcHpvbmVJRCA9PT0gcGFyZW50SUQpIHtcbiAgICAgICAgICAvLyBmaXJzdCB0aW1lLCBjcmVhdGUgZmllbGRzXG4gICAgICAgICAgbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMgPSB1cGRhdGVkRmllbGRzO1xuICAgICAgICB9IGVsc2UgaWYgKCFtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcyB8fCAhdXBkYXRlZEZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyB1c2VyIHRyaWVkIHRvIHJlbW92ZSBlbGVtZW50c1xuICAgICAgICAgIGlmIChkcm9wem9uZUlEICYmIG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzKSB7XG4gICAgICAgICAgICBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcyA9IG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzXG4gICAgICAgICAgICAgIC5maWx0ZXIoZiA9PiBmLmRyb3B6b25lSUQgIT09IGRyb3B6b25lSUQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBtYXRjaGVkIGNhbnZhcyBkb2VzIG5vdCBoYXMgc3VjaCBmaWVsZCwgY3JlYXRlIG9uZVxuICAgICAgICAgICAgbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMgPSB1cGRhdGVkRmllbGRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBmaWVsZHNUb0JlQWRkZWQgPSBbXTtcblxuICAgICAgICAgIC8vIGlmIHVzZXIgd29ya2luZyBvbiBtdWx0aSBkcm9wem9uZSBmaWVsZFxuICAgICAgICAgIGNvbnN0IG1hdGNoZWREcm9wem9uZUZpZWxkcyA9IG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzXG4gICAgICAgICAgICAuZmlsdGVyKGYgPT4gZi5kcm9wem9uZUlEID09PSBkcm9wem9uZUlEKTtcblxuICAgICAgICAgIGlmIChtYXRjaGVkRHJvcHpvbmVGaWVsZHMubGVuZ3RoICE9PSB1cGRhdGVkRmllbGRzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gc29tZSBvZiB0aGUgZmllbGQgZ290IGRlbGV0ZWQgZnJvbSBkcm9wem9uZVxuICAgICAgICAgICAgLy8gcmVwbGFjZSBhbGwgZmllbGRzIHdpdGggbmV3IGZpZWxkc1xuICAgICAgICAgICAgbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMgPSB1cGRhdGVkRmllbGRzXG4gICAgICAgICAgICAgIC5jb25jYXQobWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGYgPT4gZi5kcm9wem9uZUlEICE9PSBkcm9wem9uZUlEKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZWRGaWVsZHMuZm9yRWFjaCgodUZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGZpZWxkSW5kZXggPSBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkc1xuICAgICAgICAgICAgICAgIC5maW5kSW5kZXgoZiA9PiBmLmlkID09PSB1RmllbGQuaWQpO1xuXG4gICAgICAgICAgICAgIC8vIHVzZXIgdHJ5IHRvIGFkZCBuZXcgZmllbGRcbiAgICAgICAgICAgICAgaWYgKGZpZWxkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgZmllbGRzVG9CZUFkZGVkLnB1c2godUZpZWxkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIG5vIG5ldyBmaWVsZHNcbiAgICAgICAgICAgIGlmICghZmllbGRzVG9CZUFkZGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBlaXRoZXIgdXNlciBoYXMgdXBkYXRlZCB0aGUgZmllbGQgb3IgY2hhbmdlZCB0aGUgb3JkZXJcbiAgICAgICAgICAgICAgbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMgPSBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkc1xuICAgICAgICAgICAgICAgIC5tYXAoKGYpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHVGID0gdXBkYXRlZEZpZWxkcy5maW5kKHVmID0+IHVmLmlkID09PSBmLmlkKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB1RiB8fCBmO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGFkZCBuZXcgZmllbGQgdG8gZXhpc3RpbmcgYXJyYXlcbiAgICAgICAgICBpZiAoZmllbGRzVG9CZUFkZGVkLmxlbmd0aCkge1xuICAgICAgICAgICAgbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMgPSBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkcy5jb25jYXQoZmllbGRzVG9CZUFkZGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm5TdGF0dXMgPSB0cnVlO1xuXG4gICAgICAgIC8qIGVzbGludCBuby1lbHNlLXJldHVybjogMCAqL1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjaGlsZEZpZWxkcyA9IGZpZWxkc1tpXS5maWVsZHM7XG4gICAgICAgICAgbGV0IHN0YXR1cyA9IGZhbHNlO1xuXG4gICAgICAgICAgLy8gZmllbGQgaGFzIHN1Yi1maWVsZHMsIGNoZWNrIGluc2lkZSBzdWItZmllbGRzXG4gICAgICAgICAgaWYgKGNoaWxkRmllbGRzKSB7XG4gICAgICAgICAgICBzdGF0dXMgPSB0cmF2ZXJzZUFuZFVwZGF0ZVRyZWUoZHJvcHpvbmVJRCwgcGFyZW50SUQsIHVwZGF0ZWRGaWVsZHMsIGNoaWxkRmllbGRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldHVyblN0YXR1cztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogcHJpdmF0ZSBmdW5jdGlvbiB0byB0cmF2ZXJzZSB0aHJvdWdoIGVhY2ggbm9kZSBhbmQgcmV0dXJuIHRoZSBmaWVsZCBwYXJlbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZHJvcHpvbmVJRFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJlbnRJRFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpZWxkcyAtIGZpZWxkcy9lbGVtZW50cyBvZiBjdXJyZW50IGNhbnZhc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IC0gUGFyZW50IGVsZW1lbnRcbiAgICAgKi9cbiAgICBjb25zdCB0cmF2ZXJzZUFuZFJldHVyblBhcmVudCA9IChkcm9wem9uZUlELCBwYXJlbnRJRCwgZmllbGRzID0gc3RhdGUudHJlZSkgPT4ge1xuICAgICAgY29uc3QgZm91bmRQYXJlbnQgPSBmaWVsZHMuZmluZChlbGVtZW50ID0+IGVsZW1lbnQuaWQgPT09IHBhcmVudElEKTtcblxuICAgICAgaWYgKCFmb3VuZFBhcmVudCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBmaWVsZHNbaV07XG4gICAgICAgICAgaWYgKGVsZW1lbnQuZmllbGRzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0dXMgPSB0cmF2ZXJzZUFuZFJldHVyblBhcmVudChkcm9wem9uZUlELCBwYXJlbnRJRCwgZWxlbWVudC5maWVsZHMpO1xuICAgICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgICByZXR1cm4gc3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm91bmRQYXJlbnQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIHByaXZhdGUgZnVuY3Rpb24gdG8gdHJhdmVyc2UgdGhyb3VnaCBlYWNoIG5vZGUgYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVsZW1lbnRJRFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkcm9wem9uZUlEXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmVudElEXG4gICAgICogQHJldHVybnMge0ZpZWxkL09iamVjdH1cbiAgICAgKi9cbiAgICBjb25zdCB0cmF2ZXJzZUFuZFJldHVybkVsZW1lbnQgPSAoZWxlbWVudElELCBkcm9wem9uZUlELCBwYXJlbnRJRCkgPT4ge1xuICAgICAgY29uc3QgZmllbGRQYXJlbnQgPSB0cmF2ZXJzZUFuZFJldHVyblBhcmVudChkcm9wem9uZUlELCBwYXJlbnRJRCk7XG4gICAgICBpZiAoZmllbGRQYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkUGFyZW50LmZpZWxkcy5maW5kKGZpZWxkID0+IGZpZWxkLmlkID09PSBlbGVtZW50SUQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogcHJpdmF0ZSBmdW5jdGlvbiB0byByZW1vdmUgdGhlIGZpZWxkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGVsZW1lbnRJRFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkcm9wem9uZUlEXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmVudElEXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb25zdCByZW1vdmVFbGVtZW50ID0gKGVsZW1lbnRJRCwgZHJvcHpvbmVJRCwgcGFyZW50SUQsIGNiKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdHJhdmVyc2VBbmRSZXR1cm5FbGVtZW50KGVsZW1lbnRJRCwgZHJvcHpvbmVJRCwgcGFyZW50SUQpO1xuXG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUVsZW1lbnQoZWxlbWVudElELCBjYik7XG4gICAgICAgIHJwbUV2ZW50Lm5vdGlmeUVsZW1lbnRSZW1vdmUoe1xuICAgICAgICAgIGVsZW1lbnRJRCwgZHJvcHpvbmVJRCwgcGFyZW50SUQsIHRyYXNoZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB0byBmaWx0ZXIgb3V0IHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBmcm9tIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb25seVJlbW92ZUZ1bmN0aW9ucyAtIGluLWNhc2Ugb2YgYGdldFN0b3JhYmxlU3RhdGVgIHJlc3VsdCB3ZSBvbmx5XG4gICAgICogbmVlZCB0byBmaWx0ZXIgb3V0IGZ1bmN0aW9ucyBhbmQgaW4gb3RoZXIgY2FzZXMgd2Ugd2lsbCBmaWx0ZXIgb3V0IG90aGVyIHByb3BzIGFsc29cbiAgICAgKiBiYXNlZCBvbiBgc2hhcmVhYmxlRWxlbWVudFByb3BzYFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGNvbnN0IHJlbW92ZVNlbnNpdGl2ZVByb3BzID0gKGVsZW1lbnQsIG9ubHlSZW1vdmVGdW5jdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IHNoYXJlYWJsZUVsZW1lbnQgPSB7fTtcblxuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyByZW1vdmUgYWxsIHByaXZhdGUvZnVuY3RpbmFsIHByb3BlcnRpZXNcbiAgICAgIE9iamVjdC5rZXlzKGVsZW1lbnQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIGVsZW1lbnRba2V5XSAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgIChcbiAgICAgICAgICAgIG9ubHlSZW1vdmVGdW5jdGlvbnMgfHxcbiAgICAgICAgICAgICFvbmx5UmVtb3ZlRnVuY3Rpb25zICYmIHNoYXJlYWJsZUVsZW1lbnRQcm9wcy5pbmRleE9mKGtleSkgIT09IC0xXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBzaGFyZWFibGVFbGVtZW50W2tleV0gPSBlbGVtZW50W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2hhcmVhYmxlRWxlbWVudDtcbiAgICB9O1xuXG4gICAgLy8gZnVuY3Rpb24gdG8gcmV0dXJuIGVsZW1lbnQsIGZpbHRlciBzZW5zaXRpdmUgcHJvcHMgYmVmb3JlIHJldHVyblxuICAgIGNvbnN0IGdldEVsZW1lbnQgPSAoLi4uYXJncykgPT4gcmVtb3ZlU2Vuc2l0aXZlUHJvcHModHJhdmVyc2VBbmRSZXR1cm5FbGVtZW50KC4uLmFyZ3MpKTtcblxuICAgIC8qKlxuICAgICAqIHByaXZhdGUgZnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBleGlzaXRpbmcgZmllbGRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZWxlbWVudElEXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRyb3B6b25lSURcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyZW50SURcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnQvT2JqZWN0fSBuZXdEYXRhIC0geyBpZCwgdHlwZSwgbmFtZSwgcGF5bG9hZCB9XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2JcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBjb25zdCB1cGRhdGVFbGVtZW50ID0gKGVsZW1lbnRJRCwgZHJvcHpvbmVJRCwgcGFyZW50SUQsIG5ld0RhdGEsIGNiKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdHJhdmVyc2VBbmRSZXR1cm5FbGVtZW50KGVsZW1lbnRJRCwgZHJvcHpvbmVJRCwgcGFyZW50SUQpO1xuXG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LnVwZGF0ZUVsZW1lbnQoe1xuICAgICAgICAgIC4uLm5ld0RhdGEsXG4gICAgICAgICAgaWQ6IGVsZW1lbnRJRFxuICAgICAgICB9LCBjYik7XG5cbiAgICAgICAgcnBtRXZlbnQubm90aWZ5RWxlbWVudFVwZGF0ZShnZXRFbGVtZW50KGVsZW1lbnRJRCwgZHJvcHpvbmVJRCwgcGFyZW50SUQpKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvLyBmdW5jdGlvbiB0byB0cmF2ZXJzZSB0aHJvdWdoIGFsbCBub2RlXG4gICAgLy8gcmVtb3ZlIGFsbCBwcml2YXRlL2Z1bmN0aW9uYWwgcHJvcGVydGllc1xuICAgIC8vIGFuZCByZXR1cm4gZmxhdCBvYmplY3QgZm9yIGVhY2ggbm9kZVxuICAgIGNvbnN0IHRyYXZlcnNlQW5kVGFrZVNuYXBzaG90ID0gKGVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IHN1YkZpZWxkcyA9IFtdO1xuICAgICAgLy8gcmVtb3ZlIGFsbCBmdW5jdGluYWwgcHJvcGVydGllc1xuICAgICAgY29uc3QgbmVjZXNzYXJ5RGV0YWlscyA9IHJlbW92ZVNlbnNpdGl2ZVByb3BzKGVsZW1lbnQsIHRydWUpO1xuXG4gICAgICAvLyBjaGVjayBmb3Igc3ViIGZpZWxkcyBhbmQgcGVyZm9ybSBzYW1lIG9wZXJhdGlvbnMgcmVjdXJzaXZlbHlcbiAgICAgIGlmIChlbGVtZW50LmZpZWxkcyAmJiBlbGVtZW50LmZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgZWxlbWVudC5maWVsZHMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICAgIHN1YkZpZWxkcy5wdXNoKHRyYXZlcnNlQW5kVGFrZVNuYXBzaG90KGYpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIGFwcGVuZCBpbml0aWFsRWxlbWVudHMgYW5kIHVwZGF0ZWQgZmllbGRzXG4gICAgICBpZiAoc3ViRmllbGRzLmxlbmd0aCkge1xuICAgICAgICBuZWNlc3NhcnlEZXRhaWxzLmluaXRpYWxFbGVtZW50cyA9IFtdO1xuICAgICAgICBuZWNlc3NhcnlEZXRhaWxzLmZpZWxkcyA9IFtdO1xuXG4gICAgICAgIHN1YkZpZWxkcy5mb3JFYWNoKChzZikgPT4ge1xuICAgICAgICAgIG5lY2Vzc2FyeURldGFpbHMuaW5pdGlhbEVsZW1lbnRzLnB1c2goc2YpO1xuICAgICAgICAgIG5lY2Vzc2FyeURldGFpbHMuZmllbGRzLnB1c2goc2YpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gcmV0dXJuIGZsYXQgb2JqZWN0IHdoaWNoIHJlcHJlc2VudCBjdXJyZW50IG5vZGUgaW4gdHJlZVxuICAgICAgcmV0dXJuIG5lY2Vzc2FyeURldGFpbHM7XG4gICAgfTtcblxuICAgIC8vIGZ1bmN0aW9uIHRvIHVwZGF0ZSB0aGUgc3RhdGVcbiAgICAvLyBvbmNlIHVwZGF0ZSBpcyBkb25lIHRoZW4gdHJpZ2dlcnMgQ0IgYW5kIG5vdGlmeVN0YXRlQ2hhbmdlXG4gICAgdGhpcy51cGRhdGVTdGF0ZSA9IChkcm9wem9uZUlELCBwYXJlbnRJRCwgZmllbGRzLCBjYiA9ICgpID0+IHt9LCBkaXNwYXRjaEVsZW1lbnRSZW1vdmUpID0+IHtcbiAgICAgIHRyYXZlcnNlQW5kVXBkYXRlVHJlZShkcm9wem9uZUlELCBwYXJlbnRJRCwgZmllbGRzKTtcbiAgICAgIGNiKHN0YXRlLnRyZWUpO1xuICAgICAgcnBtRXZlbnQubm90aWZ5U3RhdGVDaGFuZ2UoKTtcblxuICAgICAgLy8gZGlzcGF0Y2ggZWxlbWVudFJlbW92ZSBldmVudCBpZiBuZWNlc3NhcnlcbiAgICAgIGlmIChkaXNwYXRjaEVsZW1lbnRSZW1vdmUpIHtcbiAgICAgICAgcnBtRXZlbnQubm90aWZ5RWxlbWVudFJlbW92ZSh7XG4gICAgICAgICAgZHJvcHpvbmVJRCxcbiAgICAgICAgICBwYXJlbnRJRCxcbiAgICAgICAgICBkaXNwYXRjaEVsZW1lbnRSZW1vdmUsXG4gICAgICAgICAgLy8ganVzdCB0byBkaXN0aW5ndWlzaCB3aGV0aGVyIGZpZWxkIHJlbW92ZWQgZnJvbSBgcmVtb3ZlRmllbGRgIEFQSSBvciB0cmFzaCBjb21wb25lbnRcbiAgICAgICAgICB0cmFzaGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBmdW5jdGlvbiB0byByZXR1cm4gZWxlbWVudCBwYXJlbnRcbiAgICB0aGlzLmdldEVsZW1lbnRQYXJlbnQgPSB0cmF2ZXJzZUFuZFJldHVyblBhcmVudDtcblxuICAgIC8vIGZ1bmN0aW9uIHRvIHJldHVybiBlbGVtZW50XG4gICAgdGhpcy5nZXRFbGVtZW50ID0gZ2V0RWxlbWVudDtcblxuICAgIC8vIGZ1bmN0aW9uIHRvIHJlbW92ZSBlbGVtZW50XG4gICAgdGhpcy5yZW1vdmVFbGVtZW50ID0gcmVtb3ZlRWxlbWVudDtcblxuICAgIC8vIGZ1bmN0aW9uIHRvIHVwZGF0ZSBlbGVtZW50XG4gICAgdGhpcy51cGRhdGVFbGVtZW50ID0gdXBkYXRlRWxlbWVudDtcblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiBjdXJyZW50IHN0YXRlIG9mIHRyZWUgKGFzIGlzKVxuICAgICAqIGtlZXBpbmcgdGhpcyBmdW5jdGlvbiB0byBnaXZlIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gLSBzdGF0ZSB0cmVlXG4gICAgICovXG4gICAgdGhpcy5nZXRTdGF0ZSA9ICgpID0+IChzdGF0ZS50cmVlKTtcblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiBzdG9yYWJsZSBjdXJyZW50IHN0YXRlXG4gICAgICogdGhpcyBmdW5jdGlvbiBkb2VzIHNhbWUgam9iIGFzIGdldFN0YXRlIG9ubHkgaXQgbWFrZSBzdXJlXG4gICAgICogcmV0dXJuZWQgZGF0YSBpcyBpbiBwcm9wZXIgZm9ybWF0IGFuZCB1bmVjZXNzYXJ5IHByb3BlcnRpZXMgcmVtb3ZlZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAtIHN0YXRlIHRyZWVcbiAgICAgKi9cbiAgICB0aGlzLmdldFN0b3JhYmxlU3RhdGUgPSAoKSA9PiAoc3RhdGUudHJlZVswXS5maWVsZHNcbiAgICAgIC5tYXAoZiA9PiB0cmF2ZXJzZUFuZFRha2VTbmFwc2hvdChmKSkpO1xuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gY2xlYXIgdGhlIHN0YXRlXG4gICAgICogbG9vcCB0aG91Z2ggYWxsIHBhcmVudChlbmQgbGV2ZWwpIG5vZGVzLCBhbmQgY2FsbCBgZmx1c2hEcm9wcGVkRWxlbWVudHNgIGZ1bmN0aW9uXG4gICAgICogc28gdGhhdCBjb21wb25lbnQgYXMgd2VsbCBhcyBhcHBsaWNhdGlvbiBzdGF0ZSBnZXRzIGZsdXNoZWRcbiAgICAgKi9cbiAgICB0aGlzLmNsZWFyU3RhdGUgPSAoY2IgPSAoKSA9PiB7fSkgPT4ge1xuICAgICAgY29uc3Qgcm9vdE5vZGUgPSBzdGF0ZS50cmVlWzBdO1xuICAgICAgY29uc3QgdG9wTGV2ZWxGaWVsZHMgPSByb290Tm9kZS5maWVsZHMubGVuZ3RoO1xuXG4gICAgICAvLyBjYW52YXMgaXMgZW1wdHksIGp1c3Qgbm90aWZ5IG90aGVyXG4gICAgICBpZiAoIXJvb3ROb2RlLmZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgcnBtRXZlbnQubm90aWZ5U3RhdGVGbHVzaCgpO1xuICAgICAgICBjYigpO1xuICAgICAgfVxuXG4gICAgICByb290Tm9kZS5maWVsZHMuZm9yRWFjaCgodG9wTGV2ZWxFbGVtZW50LCBpKSA9PiB7XG4gICAgICAgIHRvcExldmVsRWxlbWVudC5mbHVzaERyb3BwZWRFbGVtZW50cygoKSA9PiB7XG4gICAgICAgICAgaWYgKGkgPT09IHRvcExldmVsRmllbGRzIC0gMSkge1xuICAgICAgICAgICAgcnBtRXZlbnQubm90aWZ5U3RhdGVGbHVzaCh0cnVlKTtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gYWRkIGV2ZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIC0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgPSBycG1FdmVudC5hZGRFdmVudExpc3RlbmVyO1xuXG4gICAgLyoqXG4gICAgICogZnVuY3Rpb24gdG8gcmVtb3ZlIGV2ZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIC0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBycG1FdmVudC5yZW1vdmVFdmVudExpc3RlbmVyO1xuICB9XG59XG5cbmNvbnN0IHN0YXRlID0gbmV3IFN0YXRlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0YXRlO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBzdGF0ZSBmcm9tICcuLi8uLi9jb3JlL3N0YXRlJztcbmltcG9ydCBjb3JlIGZyb20gJy4uLy4uL2NvcmUvY29yZSc7XG5cbmNsYXNzIERyb3B6b25lIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAvLyBjcmVhdGUgcmVmcmVuY2UgZm9yIGNhbnZhc1xuICAgIC8vIHRvIGNoZWNrIHdoZXRoZXIgaXMgZHJhZ2dpbmcgb24gY3VycmVudCBjYW52YXMgb3Igbm90XG4gICAgdGhpcy5jYW52YXNSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcblxuICAgIC8vIGNvbXBvbmVudCBzdGF0ZVxuICAgIC8vIGluaXRpYWxFbGVtZW50cyAtIHRvIGtlZXAgdHJhY2sgb2YgaW5pdGlhbCBlbGVtZW50c1xuICAgIC8vIGRyb3BwZWRFbGVtZW50cyAtIHRvIGtlZXAgdHJhY2sgb2YgbmV3bHkgYWRkZWQgZWxlbWVudHNcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaW5pdGlhbEVsZW1lbnRzOiBbXSxcbiAgICAgIGRyb3BwZWRFbGVtZW50czogW10sXG4gICAgICBpbml0RG9uZTogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuX3NldEluaXRpYWxFbGVtZW50cyh0aGlzLnByb3BzLmluaXRpYWxFbGVtZW50cyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHsgaW5pdGlhbEVsZW1lbnRzIH0pIHtcbiAgICB0aGlzLl9zZXRJbml0aWFsRWxlbWVudHMoaW5pdGlhbEVsZW1lbnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBhbGxvdyBtYW51YWwgZWxlbWVudCB1cGRhdGVcbiAgICogTm90ZSAtIGZ1bmN0aW9uIGlzIG9ubHkgYWNjZXNzaWJsZSB0aHJvdWdoIHJlZiBhbmQgbWFrZSBzdXJlXG4gICAqIHZhbGlkIGRhdGEgaXMgcGFzcyB0aHJvdWdoIGVsc2UgYXBwbGljYXRpb24gc3RhdGUvaGllcmFyY2h5IGNhbiBicmVha1xuICAgKiBAcGFyYW0gZGF0YSB7QXJyYXkvRnVuY3Rpb259IC0gaWYgaXRzIGZ1bmN0aW9uIHRoZW4gbWFrZSBzdXJlIHlvdSBhcmVcbiAgICogcmV0dXJuaW5nIHZhbGlkYSBhcnJheVxuICAgKiBAcGFyYW0gZG9uZSB7ZnVuY3Rpb259IC0gc3VjY2VzcyBjYWxsIGJhY2sgZnVuY3Rpb25cbiAgICovXG4gIGRhbmdlcm91c2x5U2V0RWxlbWVudHMgPSAoZGF0YSwgZG9uZSkgPT4ge1xuICAgIGxldCBlbGVtZW50cyA9IFtdO1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZWxlbWVudHMgPSBkYXRhKHRoaXMuc3RhdGUuZHJvcHBlZEVsZW1lbnRzKSB8fCBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudHMgPSBkYXRhO1xuICAgIH1cbiAgICBjb25zdCB7IGlkOiBkcm9wem9uZUlELCBwYXJlbnRJRCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGVsZW1lbnRzID0gZWxlbWVudHMubWFwKGUgPT4gKHtcbiAgICAgIC4uLmUsXG4gICAgICBkcm9wem9uZUlELFxuICAgICAgcGFyZW50SUQsXG4gICAgICBzaG93QmFzaWNDb250ZW50OiBmYWxzZSxcbiAgICAgIHVwZGF0ZVN0YXRlOiB0aGlzLl91cGRhdGVTdGF0ZSxcbiAgICAgIHJlbW92ZUVsZW1lbnQ6IHRoaXMuX3JlbW92ZUVsZW1lbnQsXG4gICAgICB1cGRhdGVFbGVtZW50OiB0aGlzLl91cGRhdGVFbGVtZW50LFxuICAgICAgZmx1c2hEcm9wcGVkRWxlbWVudHM6IHRoaXMuX2ZsdXNoRHJvcHBlZEVsZW1lbnRzLFxuICAgICAgY2hlY2tBbmRSZW1vdmVFbGVtZW50OiB0aGlzLl9jaGVja0FuZFJlbW92ZUVsZW1lbnRcbiAgICB9KSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGluaXRpYWxFbGVtZW50czogZWxlbWVudHMsXG4gICAgICBkcm9wcGVkRWxlbWVudHM6IGVsZW1lbnRzXG4gICAgfSwgKCkgPT4gdGhpcy5fdXBkYXRlU3RhdGUoZG9uZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIHJlbW92ZSBiZWZvcmUvYWZ0ZXIgY2xhc3MgZm9ybSBhbGwgY2FudmFzIGVsZW1lbnRzXG4gICAqL1xuICBfdW5tYXJrRHJhZ0VsZW1lbnRzID0gKCkgPT4ge1xuICAgIFtdLmZvckVhY2guY2FsbCh0aGlzLmNhbnZhc1JlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kcmFnLWl0ZW0nKSwgZSA9PiBlLmNsYXNzTGlzdC5yZW1vdmUoJ2JlZm9yZScsICdhZnRlcicpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBzZXQgaW5pdGlhbCBlbGVtZW50c1xuICAgKiBAcGFyYW0gaW5pdGlhbEVsZW1lbnRzIHtBcnJheX0gLSBJdCBob2xkcyBhbGwgaW5pdGlhbCBlbGVtZW50cyB0byBiZSBzaG93biBpbiBjYW52YXNcbiAgICovXG4gIF9zZXRJbml0aWFsRWxlbWVudHMgPSAoaW5pdGlhbEVsZW1lbnRzKSA9PiB7XG4gICAgLy8gY3VycmVudCBjb21wb25lbnQgc3RhdGUoZHJvcHBlZEVsZW1lbnRzKSBkb2Vzbid0IGhvbGQgYW55IGVsZW1lbnRzXG4gICAgLy8gYnV0IGluaXRpYWxFbGVtZW50cyBoYXMgc29tZSBlbGVtZW50IHRvIGJlIHNldFxuICAgIGNvbnN0IGdvdEluaXRpYWxJdGVtcyA9IEFycmF5LmlzQXJyYXkoaW5pdGlhbEVsZW1lbnRzKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5zdGF0ZS5pbml0RG9uZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICF0aGlzLnN0YXRlLmluaXRpYWxFbGVtZW50cy5sZW5ndGg7XG5cbiAgICAvLyBmb3IgZmlyc3QgdGltZSBhZGQgaW5pdGlhbEVsZW1lbnRzIHRvIGRyb3BwZWRFbGVtZW50c1xuICAgIGlmIChnb3RJbml0aWFsSXRlbXMpIHtcbiAgICAgIGNvbnN0IHsgaWQ6IGRyb3B6b25lSUQsIHBhcmVudElEIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgdXBkYXRlZEluaXRpYWxJdGVtcyA9IGluaXRpYWxFbGVtZW50cy5tYXAoZSA9PiAoe1xuICAgICAgICAuLi5lLFxuICAgICAgICBrZXk6IGUuaWQsXG4gICAgICAgIGRyb3B6b25lSUQsXG4gICAgICAgIHBhcmVudElELFxuICAgICAgICBzaG93QmFzaWNDb250ZW50OiBmYWxzZSxcbiAgICAgICAgdXBkYXRlU3RhdGU6IHRoaXMuX3VwZGF0ZVN0YXRlLFxuICAgICAgICByZW1vdmVFbGVtZW50OiB0aGlzLl9yZW1vdmVFbGVtZW50LFxuICAgICAgICB1cGRhdGVFbGVtZW50OiB0aGlzLl91cGRhdGVFbGVtZW50LFxuICAgICAgICBmbHVzaERyb3BwZWRFbGVtZW50czogdGhpcy5fZmx1c2hEcm9wcGVkRWxlbWVudHMsXG4gICAgICAgIGNoZWNrQW5kUmVtb3ZlRWxlbWVudDogdGhpcy5fY2hlY2tBbmRSZW1vdmVFbGVtZW50XG4gICAgICB9KSk7XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpbml0aWFsRWxlbWVudHM6IHVwZGF0ZWRJbml0aWFsSXRlbXMsXG4gICAgICAgIGRyb3BwZWRFbGVtZW50czogdXBkYXRlZEluaXRpYWxJdGVtc1xuICAgICAgfSwgKCkgPT4gKHRoaXMuX3VwZGF0ZVN0YXRlKCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaW5pdERvbmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byB0b2dnbGUvbWFuYWdlIGNsYXNzKGluc2lkZSlcbiAgICogY2xhc3MgZ2V0cyBhcHBlbmRlZCB0byBjYW52YXNcbiAgICogQHBhcmFtIHRhcmdldCB7RE9NfSAtIGN1cnJlbnQgY2FudmFzIHVwb24gd2hpY2ggdXNlIGlzIGhvdmVyaW5nXG4gICAqIEBwYXJhbSBhY3Rpb24ge1N0cmluZ30gLSBhZGQvcmVtb3ZlIC0gbmFtZSBvZiBhY3Rpb25cbiAgICovXG4gIF9tYW5hZ2VJbnNpZGVDbGFzcyA9ICh7IHRhcmdldCB9LCBhY3Rpb24pID0+IHtcbiAgICBpZiAodGhpcy5jYW52YXNSZWYuY3VycmVudCA9PT0gdGFyZ2V0KSB7XG4gICAgICB0YXJnZXQuY2xhc3NMaXN0W2FjdGlvbl0oJ2luc2lkZScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byByZW1vdmUgZWxlbWVudCBmcm9tIGRyb3BwZWRFbGVtZW50c1xuICAgKiBAcGFyYW0gZWxlbWVudElEIC0ge1N0cmluZ30gLSBJRCBvZiBlbGVtZW50XG4gICAqIEBwYXJhbSBjYiAtIHtmdW5jdGlvbn1cbiAgICogQHBhcmFtIGRpc3BhdGNoRWxlbWVudFJlbW92ZSB7Qm9vbGVhbn0gLSB0cmlnZ2VyIGByZW1vdmVFbGVtZW50YCBldmVudCBpZiBpdHMgdHJ1ZVxuICAgKi9cbiAgX3JlbW92ZUVsZW1lbnQgPSAoZWxlbWVudElELCBjYiA9ICgpID0+IHt9LCBkaXNwYXRjaEVsZW1lbnRSZW1vdmUpID0+IHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RhdGUuZHJvcHBlZEVsZW1lbnRzLmZpbmRJbmRleChlID0+IGUuaWQgPT09IGVsZW1lbnRJRCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyb3BwZWRFbGVtZW50czogdGhpcy5zdGF0ZS5kcm9wcGVkRWxlbWVudHMuZmlsdGVyKChkLCBpKSA9PiAoaSAhPT0gaW5kZXgpKVxuICAgIH0sICgpID0+IHRoaXMuX3VwZGF0ZVN0YXRlKGNiLCBkaXNwYXRjaEVsZW1lbnRSZW1vdmUgPyBlbGVtZW50SUQgOiBudWxsKSk7XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gdXBkYXRlIGVsZW1lbnQgZnJvbSBkcm9wcGVkRWxlbWVudHNcbiAgICogQHBhcmFtIG5ld0RhdGEgLSB7ZWxlbWVudH0gLSB7IGlkLCBuYW1lLCB0eXBlLCBwYXlsb2FkIH1cbiAgICogQHBhcmFtIGNiIC0ge2Z1bmN0aW9ufVxuICAgKi9cbiAgX3VwZGF0ZUVsZW1lbnQgPSAobmV3RGF0YSwgY2IgPSAoKSA9PiB7fSkgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnRJbmRleCA9IHRoaXMuc3RhdGUuZHJvcHBlZEVsZW1lbnRzLmZpbmRJbmRleChlID0+IGUuaWQgPT09IG5ld0RhdGEuaWQpO1xuXG4gICAgaWYgKGVsZW1lbnRJbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBjYihudWxsKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0IGlzIGxpbWl0ZWQgdG8gYmVsb3cga2V5cyBvbmx5LCB0byBhdm9pZCBwb3NzaWJsZSBicmVha3NcbiAgICBjb25zdCBzdXBwb3J0ZWRLZXlzID0gWyduYW1lJywgJ3R5cGUnLCAncGF5bG9hZCddO1xuICAgIGNvbnN0IG5ld0VsZW1lbnREYXRhID0ge307XG4gICAgT2JqZWN0LmtleXMobmV3RGF0YSlcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgaWYgKHN1cHBvcnRlZEtleXMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICAgIG5ld0VsZW1lbnREYXRhW2tleV0gPSBuZXdEYXRhW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkcm9wcGVkRWxlbWVudHM6IHRoaXMuc3RhdGUuZHJvcHBlZEVsZW1lbnRzXG4gICAgICAgIC5tYXAoKGUpID0+IHtcbiAgICAgICAgICBpZiAoZS5pZCA9PT0gbmV3RGF0YS5pZCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4uZSwgLi4ubmV3RWxlbWVudERhdGEgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfSlcbiAgICB9LCAoKSA9PiB0aGlzLl91cGRhdGVTdGF0ZShjYikpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBhcHBsaWNhdGlvbiBzdGF0ZSAobm90IGNvbXBvbmVudCBzdGF0ZSlcbiAgICogZnVuY3Rpb24gd2lsbCBmdXJ0aGVyIGNhbGwgYHVwZGF0ZVN0YXRlYCBmcm9tIHN0YXRlIEFQSSwgd2hpY2ggdXBkYXRlcyB0aGUgYXBwbGljYXRpb24gc3RhdGVcbiAgICogQHBhcmFtIGNiIHtmdW5jdGlvbn0gLSBjYWxsYmFjayBmdW5jdGlvbiAtIG9wdGlvbmFsXG4gICAqL1xuICBfdXBkYXRlU3RhdGUgPSAoY2IgPSAoKSA9PiB7fSwgZGlzcGF0Y2hFbGVtZW50UmVtb3ZlKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgaWQ6IGRyb3B6b25lSUQsXG4gICAgICBwYXJlbnRJRFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgc3RhdGUudXBkYXRlU3RhdGUoXG4gICAgICBkcm9wem9uZUlELFxuICAgICAgcGFyZW50SUQsXG4gICAgICB0aGlzLnN0YXRlLmRyb3BwZWRFbGVtZW50cyxcbiAgICAgIGNiLFxuICAgICAgZGlzcGF0Y2hFbGVtZW50UmVtb3ZlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBmbHVzaCB0aGUgY29tcG9uZW50IHN0YXRlXG4gICAqIG9uY2UgY29tcG9uZW50IHN0YXRlIHRocyBmbHVzaGVkLCB0aGlzIHdpbGwgY2FsbCBgX3VwZGF0ZVN0YXRlYCB0byB1cGRhdGUgdGhlXG4gICAqIGFwcGxpY2F0aW9uIHN0YXRlXG4gICAqIEBwYXJhbSBjYiB7ZnVuY3Rpb259IC0gY2FsbGJhY2sgZnVuY3Rpb24gLSBvcHRpb25hbFxuICAgKi9cbiAgX2ZsdXNoRHJvcHBlZEVsZW1lbnRzID0gKGNiID0gKCkgPT4ge30pID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGluaXRpYWxFbGVtZW50czogW10sXG4gICAgICBkcm9wcGVkRWxlbWVudHM6IFtdXG4gICAgfSwgKCkgPT4gKHRoaXMuX3VwZGF0ZVN0YXRlKGNiKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIGNoZWNrIGJlbG93IHBhcmFtZXRlcnNcbiAgICogMSAtIHVzZXIncyBpbnRlbmQgaXMgdG8gbW92ZSBlbGVtZW50IGZyb20gb25lIGNhbnZhcyB0byBvdGhlclxuICAgKiAyIC0gR2V0IGNvbmZpcm1hdGlvbiBiZWZvcmUgcmVtb3ZlXG4gICAqIG9uY2UgYm90aCBjb25kaXRpb24gbWF0Y2hlZCByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSBjdXJyZW50IGNhbnZhc1xuICAgKi9cbiAgX2NoZWNrQW5kUmVtb3ZlRWxlbWVudCA9ICgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50TW92ZWQgPSBjb3JlLmdldERyYWdnZWRFbGVtZW50KCk7XG4gICAgY29uc3QgeyByZW1vdmVFbGVtZW50LCBlbGVtZW50SUQgfSA9IGVsZW1lbnRNb3ZlZDtcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLnByb3BzLm9uRWxlbWVudE1vdmUoZWxlbWVudE1vdmVkKTtcbiAgICBjb25zdCBhdHRlbXB0VG9Nb3ZlID0gIWNvcmUuZ2V0QXR0ZW1wdFRvUmVtb3ZlKCk7XG5cbiAgICBpZiAoc3RhdHVzICYmIGF0dGVtcHRUb01vdmUpIHtcbiAgICAgIHJlbW92ZUVsZW1lbnQoZWxlbWVudElEKTtcbiAgICB9XG4gIH1cblxuICAvLyB1c2VyIGlzIGRyYWdnaW5nIG92ZXIgdGhlIGNhbnZhc1xuICAvLyBgcHJldmVudERlZmF1bHRgIC0gUmVxdWlyZWQuIEFsbG93cyB1cyB0byBkcm9wLlxuICAvLyBAcGFyYW0gZSB7ZXZlbnR9XG4gIF9vbkRyYWdPdmVyID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1c2VyIGlzIGxlYXZpbmcgdGhlIGNhbnZhc1xuICAgKiBAcGFyYW0gZSB7ZXZlbnR9XG4gICAqL1xuICBfb25EcmFnTGVhdmUgPSAoZSkgPT4ge1xuICAgIHRoaXMuX21hbmFnZUluc2lkZUNsYXNzKGUsICdyZW1vdmUnKTtcbiAgICBjb3JlLnNldEF0dGVtcHRUb1JlbW92ZSh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1c2VyIGlzIGRyYWdnaW5nIG92ZXIgY2FudmFzXG4gICAqIEBwYXJhbSBlIHtldmVudH1cbiAgICovXG4gIF9vbkRyYWdFbnRlciA9IChlKSA9PiB7XG4gICAgdGhpcy5fbWFuYWdlSW5zaWRlQ2xhc3MoZSwgJ2FkZCcpO1xuICAgIGNvcmUuc2V0QXR0ZW1wdFRvUmVtb3ZlKGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB1c2UgaGFzIGRyb3BwZWQgdGhlIGVsZW1lbnQgaW50byB0aGUgY2FudmFzXG4gICAqIHBlcmZvcm0gYWxsIHJlcXVpcmVkIGNoZWNrc1xuICAgKiBmdW5jdGlvbiBhbHNvIHRyaWdnZXJzIGBvbkRyb3BgIHByb3Agc28gdGhhdCB1c2V0IGNhbiBwcm92aWRlIGFkZGl0aW9uYWwgaW5mb1xuICAgKiBvbmNlIGFsbCBkb25lIGBfYWRkRWxlbWVudGAgZ2V0IGNhbGxlZCB3aXRoIGFsbCByZXF1aXJlZCBpbmZvXG4gICAqIEBwYXJhbSBlIHtldmVudH1cbiAgICovXG4gIF9vbkRyb3AgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGNvbnN0IHsgZHJvcHBlZEVsZW1lbnRzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29yZS5zZXRBdHRlbXB0VG9SZW1vdmUoZmFsc2UpO1xuICAgIHRoaXMuX21hbmFnZUluc2lkZUNsYXNzKGUsICdyZW1vdmUnKTtcblxuICAgIGNvbnN0IHsgb25Ecm9wIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShlLmRhdGFUcmFuc2Zlci5nZXREYXRhKCdkYXRhJykpO1xuICAgIGRhdGEgPSB7IC4uLmRhdGEgfTtcblxuICAgIHRoaXMuX3VubWFya0RyYWdFbGVtZW50cygpO1xuXG4gICAgcmV0dXJuIG9uRHJvcCA/IG9uRHJvcChkYXRhLCB0aGlzLl9hZGRFbGVtZW50LCB7XG4gICAgICBkcm9wSW5kZXg6ICFkcm9wcGVkRWxlbWVudHMubGVuZ3RoID8gY29yZS5nZXREcm9wUG9zdGlvbigpICsgMSA6IDAsXG4gICAgICBjdXJyZW50RWxlbWVudHM6IGRyb3BwZWRFbGVtZW50c1xuICAgIH0pIDogdGhpcy5fYWRkRWxlbWVudChkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBhZGQgZWxlbWVudCBpbnRvIGRyb3BwZWRFbGVtZW50c1xuICAgKiBwcmlvciB0byBhZGQgaXQgcGVyZm9tIGJlbG93IGNoZWNrXG4gICAqIDEgLSBlbGVtZW50IGhhcyB1bmlxdWUga2V5XG4gICAqIDIgLSBlbGVtZW50IGhhcyBpbnZhbGlkIGRhdGFcbiAgICogMyAtIGNoZWNrIGFnYWluc3QgbWF4LWNhcGFjaXR5XG4gICAqIG9uY2UgZWxlbWVudCBhZGRlZCByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSBwcmV2aW91cyBjYW52YXNcbiAgICogQHBhcmFtIHVwZGF0ZWREYXRhIHtPYmplY3R9IC0gZWxlbWVudCBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJucyBPYmplY3QgLSBuZXcgbGlzdCBvZiBjYW52YXMgZWxlbWVudHNcbiAgICovXG4gIF9hZGRFbGVtZW50ID0gKHVwZGF0ZWREYXRhKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgaWQ6IGRyb3B6b25lSUQsXG4gICAgICBjYXBhY2l0eSxcbiAgICAgIHBhcmVudElELFxuICAgICAgYWxsb3dIb3Jpem9udGFsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZHJvcFBvc2l0aW9uID0gY29yZS5nZXREcm9wUG9zdGlvbigpO1xuICAgIGNvbnN0IGRyYWdnZWRFbGVtZW50ID0gY29yZS5nZXREcmFnZ2VkRWxlbWVudCgpO1xuICAgIGNvbnN0IGludmFsaWRVcGRhdGVkRGF0YSA9ICF1cGRhdGVkRGF0YSB8fCAhdXBkYXRlZERhdGEuaWQ7XG4gICAgbGV0IGluZGV4T2ZQcmVzZW50RWxlbWVudCA9IC0xO1xuICAgIGNvbnN0IGtleUFscmVhZHlQcmVzZW50ID0gdXBkYXRlZERhdGEuaWQgJiZcbiAgICAgIHRoaXMuc3RhdGUuZHJvcHBlZEVsZW1lbnRzLmZpbHRlcigoZSwgaSkgPT4ge1xuICAgICAgICBpZiAoZS5pZCA9PT0gdXBkYXRlZERhdGEuaWQpIHtcbiAgICAgICAgICBpbmRleE9mUHJlc2VudEVsZW1lbnQgPSBpO1xuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KS5sZW5ndGg7XG4gICAgY29uc3QgaXNTYW1lSW5kZXggPSBpbmRleE9mUHJlc2VudEVsZW1lbnQgPT09IGRyb3BQb3NpdGlvbjtcbiAgICBsZXQgbmV3RWxlbWVudHMgPSBbXS5jb25jYXQodGhpcy5zdGF0ZS5kcm9wcGVkRWxlbWVudHMpO1xuICAgIGxldCBlbGVtZW50QWxyZWFkeVJlbW92ZWQgPSBmYWxzZTtcblxuICAgIC8vIGNoZWNrIGZvIHVuaXF1ZSBrZXlcbiAgICBpZiAoaW52YWxpZFVwZGF0ZWREYXRhIHx8IGtleUFscmVhZHlQcmVzZW50KSB7XG4gICAgICBpZiAoaXNTYW1lSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUuZXJyb3IoJ0R1cGxpY2F0ZSBvciBpbnZhbGlkIElEJyk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnRBbHJlYWR5UmVtb3ZlZCA9IHRydWU7XG4gICAgICBuZXdFbGVtZW50cyA9IG5ld0VsZW1lbnRzLm1hcCgoZSkgPT4ge1xuICAgICAgICBpZiAoZS5pZCA9PT0gdXBkYXRlZERhdGEuaWQpIHtcbiAgICAgICAgICByZXR1cm4geyAuLi5lLCByZW1vdmU6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnRUb0Ryb3AgPSB7XG4gICAgICAuLi51cGRhdGVkRGF0YSxcbiAgICAgIGtleTogdXBkYXRlZERhdGEuaWQsXG4gICAgICBkcm9wem9uZUlELFxuICAgICAgcGFyZW50SUQsXG4gICAgICBhbGxvd0hvcml6b250YWwsXG4gICAgICBzaG93QmFzaWNDb250ZW50OiBmYWxzZSxcbiAgICAgIHVwZGF0ZVN0YXRlOiB0aGlzLl91cGRhdGVTdGF0ZSxcbiAgICAgIHJlbW92ZUVsZW1lbnQ6IHRoaXMuX3JlbW92ZUVsZW1lbnQsXG4gICAgICB1cGRhdGVFbGVtZW50OiB0aGlzLl91cGRhdGVFbGVtZW50LFxuICAgICAgLy8gaW5pdGlhbEVsZW1lbnRzIGhlbHBzIGZpZ3VyaW5nIG91dCBpbml0RG9uZVxuICAgICAgaW5pdGlhbEVsZW1lbnRzOiB0aGlzLnN0YXRlLmluaXRpYWxFbGVtZW50cyxcbiAgICAgIGZsdXNoRHJvcHBlZEVsZW1lbnRzOiB0aGlzLl9mbHVzaERyb3BwZWRFbGVtZW50cyxcbiAgICAgIGNoZWNrQW5kUmVtb3ZlRWxlbWVudDogdGhpcy5fY2hlY2tBbmRSZW1vdmVFbGVtZW50XG4gICAgfTtcblxuICAgIGlmIChkcm9wUG9zaXRpb24gPiAwKSB7XG4gICAgICBuZXdFbGVtZW50cyA9IFtcbiAgICAgICAgLi4ubmV3RWxlbWVudHMuc2xpY2UoMCwgZHJvcFBvc2l0aW9uKSxcbiAgICAgICAgZWxlbWVudFRvRHJvcCxcbiAgICAgICAgLi4ubmV3RWxlbWVudHMuc2xpY2UoZHJvcFBvc2l0aW9uKVxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RWxlbWVudHMgPSBbXG4gICAgICAgIGVsZW1lbnRUb0Ryb3AsXG4gICAgICAgIC4uLm5ld0VsZW1lbnRzXG4gICAgICBdO1xuICAgIH1cblxuICAgIGlmICghaXNTYW1lSW5kZXgpIHtcbiAgICAgIG5ld0VsZW1lbnRzID0gbmV3RWxlbWVudHMuZmlsdGVyKGUgPT4gIWUucmVtb3ZlKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBuZXcgbGlzdCBhZ2FpbnN0IG1heC1jYXBhY2l0eVxuICAgIGlmIChjYXBhY2l0eSAmJiBuZXdFbGVtZW50cy5sZW5ndGggPiBjYXBhY2l0eSkge1xuICAgICAgcmV0dXJuIGNvcmUuZXJyb3IoYE1heGltdW0gY2FwYWNpdHkgb2YgY2FudmFzKCR7ZHJvcHpvbmVJRH0pIGlzICR7Y2FwYWNpdHl9YCk7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRoZSBjdXJyZW50IGxpc3RcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRyb3BwZWRFbGVtZW50czogbmV3RWxlbWVudHNcbiAgICB9LCAoKSA9PiB7XG4gICAgICAvLyByZW1vdmUgZWxlbWVudCBmcm9tIHByZXZpb3VzIGNhbnZhc1xuICAgICAgaWYgKCFlbGVtZW50QWxyZWFkeVJlbW92ZWQgJiYgZHJhZ2dlZEVsZW1lbnQgJiYgdHlwZW9mIGRyYWdnZWRFbGVtZW50LmNoZWNrQW5kUmVtb3ZlRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkcmFnZ2VkRWxlbWVudC5jaGVja0FuZFJlbW92ZUVsZW1lbnQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gdXBkYXRlIHRoZSBhcHBsaWNhdGlvbiBzdGF0ZVxuICAgICAgdGhpcy5fdXBkYXRlU3RhdGUoKTtcbiAgICB9KTtcblxuICAgIC8vIGFkZGluZyBkcm9wcGluZyBjbGFzcyB0byBkcm9wem9uZSwgaXQgY2FuIGJlIHVzZWQgZm9yIGFuaW1hdGlvbiBwdXJwb3NlXG4gICAgdGhpcy5jYW52YXNSZWYuY3VycmVudC5jbGFzc0xpc3QuYWRkKCdkcm9wcGluZycpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jYW52YXNSZWYuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKCdkcm9wcGluZycpO1xuICAgIH0sIDUwMCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZHJvcHpvbmVJRCxcbiAgICAgIGVsZW1lbnRzOiBuZXdFbGVtZW50c1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gcmVuZGVyIHRoZSBkcmFnZ2VkIGVsZW1lbnRcbiAgICogQHBhcmFtIHByb3BzIHtPYmplY3R9IC0gQW4gb2JqZWN0IHdoaWNoIGhvbGQgdGhlIGluZm8gb2YgZHJhZ2dlZCBlbGVtZW50L2NvbXBvbmVudFxuICAgKiBAcmV0dXJucyBKU1hcbiAgICovXG4gIF9yZW5kZXJEcmFnSXRlbSA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBjb3JlLmdldFJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMoKS5maW5kKGUgPT4gZS50eXBlID09PSBwcm9wcy50eXBlKTtcbiAgICByZXR1cm4gZWxlbWVudCA/IDxlbGVtZW50LmNvbXBvbmVudCB7Li4ucHJvcHN9IC8+IDogbnVsbDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRyb3BwZWRFbGVtZW50cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGNhcGFjaXR5LCBpZCwgcGxhY2Vob2xkZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgc3BhY2VBdmFpbGFibGUgPSBjYXBhY2l0eSA/IGNhcGFjaXR5ID4gZHJvcHBlZEVsZW1lbnRzLmxlbmd0aCA6IHRydWU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICByZWY9e3RoaXMuY2FudmFzUmVmfVxuICAgICAgICBjbGFzc05hbWU9e2AkeyFzcGFjZUF2YWlsYWJsZSA/ICduby1zcGFjZScgOiAnJ30gJHtpZCA9PT0gJ3Jvb3QnID8gJ2NhbnZhcycgOiAnJ30gJHshZHJvcHBlZEVsZW1lbnRzLmxlbmd0aCA/ICdlbXB0eScgOiAnJ30gZHJvcHpvbmVgfVxuICAgICAgICBvbkRyYWdPdmVyPXt0aGlzLl9vbkRyYWdPdmVyfVxuICAgICAgICBvbkRyYWdMZWF2ZT17dGhpcy5fb25EcmFnTGVhdmV9XG4gICAgICAgIG9uRHJhZ0VudGVyPXt0aGlzLl9vbkRyYWdFbnRlcn1cbiAgICAgICAgb25Ecm9wPXt0aGlzLl9vbkRyb3B9XG4gICAgICAgIG9uRHJhZ0VuZD17dGhpcy5fb25EcmFnRW5kfVxuICAgICAgPlxuICAgICAgICB7XG4gICAgICAgICAgZHJvcHBlZEVsZW1lbnRzLm1hcCgoZSwgaSkgPT4gKFxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyRHJhZ0l0ZW0oe1xuICAgICAgICAgICAgICAuLi5lLFxuICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgc3BhY2VBdmFpbGFibGUsXG4gICAgICAgICAgICAgIGluaXREb25lOiB0aGlzLnN0YXRlLmluaXREb25lLFxuICAgICAgICAgICAgICBkcm9wem9uZVByb3BzOiB7XG4gICAgICAgICAgICAgICAgaW5pdERvbmU6IHRoaXMuc3RhdGUuaW5pdERvbmUsXG4gICAgICAgICAgICAgICAgcGFyZW50SUQ6IGUuaWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApKVxuICAgICAgICB9XG5cbiAgICAgICAge1xuICAgICAgICAgICFkcm9wcGVkRWxlbWVudHMubGVuZ3RoID9cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImRyb3B6b25lLXBsYWNlaG9sZGVyXCI+e3BsYWNlaG9sZGVyfTwvcD4gOiBudWxsXG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuRHJvcHpvbmUucHJvcFR5cGVzID0ge1xuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBjYXBhY2l0eTogUHJvcFR5cGVzLm51bWJlcixcbiAgb25Ecm9wOiBQcm9wVHlwZXMuZnVuYyxcbiAgb25FbGVtZW50TW92ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFsbG93SG9yaXpvbnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIGluaXRpYWxFbGVtZW50czogUHJvcFR5cGVzLmFycmF5T2YoT2JqZWN0KSxcbiAgcGFyZW50SUQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLm5vZGVcbiAgXSlcbn07XG5cbkRyb3B6b25lLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW5pdGlhbEVsZW1lbnRzOiBbXSxcbiAgcGxhY2Vob2xkZXI6ICdEcm9wIEhlcmUnLFxuICBvbkVsZW1lbnRNb3ZlOiAoKSA9PiAodHJ1ZSlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3B6b25lO1xuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qIFZlcnkgYmFzaWMgc3R5bGUgKi9cXG5cXG4vKiBQcmV2ZW50IHRoZSB0ZXh0IGNvbnRlbnRzIG9mIGRyYWdnYWJsZSBlbGVtZW50cyBmcm9tIGJlaW5nIHNlbGVjdGFibGUuICovXFxuW2RyYWdnYWJsZV0ge1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG5cXG4gIC8qIFJlcXVpcmVkIHRvIG1ha2UgZWxlbWVudHMgZHJhZ2dhYmxlIGluIG9sZCBXZWJLaXQgKi9cXG4gIC1raHRtbC11c2VyLWRyYWc6IGVsZW1lbnQ7XFxuICAtd2Via2l0LXVzZXItZHJhZzogZWxlbWVudDtcXG59XFxuXFxuLyogY2xhc3MgZ2V0cyBhcHBlbmRlZCB0byBjYW52YXMgd2hlbiB1c2VyIGRyYWdnaW5nIG92ZXIgb24gaXQgKi9cXG4uaW5zaWRlIHtcXG4gIC13ZWJraXQtYm94LXNoYWRvdzogaW5zZXQgMCAwIDI2cHggMC41cHggcmdiYSgyMCwgMTgwLCA4MSwgMC43NSk7XFxuICAtbW96LWJveC1zaGFkb3c6IGluc2V0IDAgMCAyNnB4IDAuNXB4IHJnYmEoMjAsIDE4MCwgODEsIDAuNzUpO1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDI2cHggMC41cHggcmdiYSgyMCwgMTgwLCA4MSwgMC43NSk7XFxufVxcblxcbi50cmFzaC1ib3guaW5zaWRlLFxcbi5kcm9wem9uZS5pbnNpZGUubm8tc3BhY2Uge1xcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDAgMjZweCAwLjVweCByZ2JhKDIzMCwgMjMsIDIzLCAwLjUpO1xcbiAgLW1vei1ib3gtc2hhZG93OiBpbnNldCAwIDAgMjZweCAwLjVweCByZ2JhKDIzMCwgMjMsIDIzLCAwLjc1KTtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAyNnB4IDAuNXB4IHJnYmEoMjMwLCAyMywgMjMsIDAuNzUpO1xcbn1cXG5cXG4uZHJvcHpvbmUge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJhY2tncm91bmQ6ICNmMGZhZmY7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjMDI3N2JkO1xcbn1cXG5cXG4uZHJvcHpvbmUuZW1wdHkge1xcbiAgcGFkZGluZzogNDBweDtcXG59XFxuXFxuLnBhbGV0dGUge1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzAxNTc5YjtcXG59XFxuXFxuLmRyYWctaXRlbSB7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgY29sb3I6ICMwMTU3OWI7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2IzZTVmYztcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMwMTU3OWI7XFxufVxcblxcbi5pbmxpbmUuZHJhZy1pdGVtIHtcXG4gIG1hcmdpbjogMCAxMHB4O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uZHJvcHpvbmUtcGxhY2Vob2xkZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBjb2xvcjogIzAxNTc5YjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDA7XFxuICB0b3A6IGNhbGMoNTAlIC0gMTBweCk7XFxuICBhbmltYXRpb24tbmFtZTogY2hhbmdlQ29sb3I7XFxuICBhbmltYXRpb24tZHVyYXRpb246IDJzO1xcbiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7XFxuICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTtcXG59XFxuXFxuQGtleWZyYW1lcyBjaGFuZ2VDb2xvciB7XFxuICAyNSUge1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgfVxcblxcbiAgNzUlIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXG4gICAgb3BhY2l0eTogMC41O1xcbiAgfVxcbn1cXG5cXG4ucGFsZXR0ZS13cmFwcGVyIC5kcmFnLWl0ZW0ge1xcbiAgY29sb3I6ICNmZmY7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDE1NzliO1xcbn1cXG5cXG4uZHJhZy1pdGVtICsgZGl2IHtcXG4gIG1hcmdpbi10b3A6IDEwcHg7XFxufVxcblxcbi5kcmFnLWl0ZW0uYWZ0ZXIsXFxuLmRyYWctaXRlbS5iZWZvcmUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uZHJhZy1pdGVtLmFmdGVyOjphZnRlciB7XFxuICBjb250ZW50OiAnJztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiA1MCU7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGJhY2tncm91bmQ6ICMxNGI0NTE7XFxuICBsZWZ0OiA1MCU7XFxuICBib3R0b206IC0xcHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcXG4gIC13ZWJraXQtYm94LXNoYWRvdzogMHB4IDRweCAxMHB4IDBweCByZ2JhKDIwLCAxODAsIDgxLCAxKTtcXG4gIC1tb3otYm94LXNoYWRvdzogMHB4IDRweCAxMHB4IDBweCByZ2JhKDIwLCAxODAsIDgxLCAxKTtcXG4gIGJveC1zaGFkb3c6IDBweCA0cHggMTBweCAwcHggcmdiYSgyMCwgMTgwLCA4MSwgMSk7XFxufVxcblxcbi5kcmFnLWl0ZW0uYmVmb3JlOjpiZWZvcmUge1xcbiAgY29udGVudDogJyc7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogNTAlO1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBiYWNrZ3JvdW5kOiAjMTRiNDUxO1xcbiAgbGVmdDogNTAlO1xcbiAgdG9wOiAtMXB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XFxuICAtd2Via2l0LWJveC1zaGFkb3c6IDBweCAtMXB4IDEwcHggMC4zcHggcmdiYSgyMywgMTgwLCA4MSwgMSk7XFxuICAtbW96LWJveC1zaGFkb3c6IDBweCAtMXB4IDEwcHggMC4zcHggcmdiYSgyMywgMTgwLCA4MSwgMSk7XFxuICBib3gtc2hhZG93OiAwcHggLTFweCAxMHB4IDAuM3B4IHJnYmEoMjMsIDE4MCwgODEsIDEpO1xcbn1cXG5cXG4uaW5saW5lLmRyYWctaXRlbS5iZWZvcmU6OmJlZm9yZSB7XFxuICB3aWR0aDogMXB4O1xcbiAgaGVpZ2h0OiA1MCU7XFxuICBsZWZ0OiAtMXB4O1xcbiAgcmlnaHQ6IHVuc2V0O1xcbiAgdG9wOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcXG59XFxuXFxuLmlubGluZS5kcmFnLWl0ZW0uYWZ0ZXI6OmFmdGVyIHtcXG4gIHdpZHRoOiAxcHg7XFxuICBoZWlnaHQ6IDUwJTtcXG4gIHJpZ2h0OiAtMXB4O1xcbiAgbGVmdDogdW5zZXQ7XFxuICB0b3A6IHVuc2V0O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XFxufVxcblxcbi50cmFzaC1ib3gge1xcbiAgcGFkZGluZzogMzBweCAxMHB4O1xcbiAgbWFyZ2luOiAxMHB4IDA7XFxuICBjb2xvcjogI2I3MWMxYztcXG4gIGJhY2tncm91bmQ6ICNmZmNkZDI7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjYjcxYzFjO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IGNvcmUgZnJvbSAnLi4vLi4vY29yZS9jb3JlJztcbmltcG9ydCBzdGF0ZSBmcm9tICcuLi8uLi9jb3JlL3N0YXRlJztcblxuY2xhc3MgUHJldmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGN1cnJlbnRTdGF0ZTogc3RhdGUuZ2V0U3RhdGUoKVxuICAgIH07XG5cbiAgICB0aGlzLnJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMgPSBjb3JlLmdldFJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMoKTtcbiAgICBzdGF0ZS5hZGRFdmVudExpc3RlbmVyKHRoaXMuX29uU3RhdGVDaGFuZ2UpO1xuICB9XG5cbiAgLy8ga2VlcCB0cmFjayBvZiBzdGF0ZSB0cmVlIGNoYW5nZXNcbiAgX29uU3RhdGVDaGFuZ2UgPSAobmV3U3RhdGUpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRTdGF0ZTogbmV3U3RhdGVcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZWN1cmVzaXZlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgdGhyb3VnaCBhbGwgbm9kZSBvZiBzdGF0ZSB0cmVlIGFuZFxuICAgKiByZW5kZXIgYXBwcm9wcmF0ZSBjb21wb25lbnQgYW5kIHBhc3MgbmVjZXNzYXJ5IHByb3BzXG4gICAqIEBwYXJhbSBlbGVtZW50IHtPYmplY3R9IC0gaW5mb21hdGlvbiBvZiBzdGF0ZSB0cmVlIG5vZGVcbiAgICogQHJldHVybnMge0pTWH0gLSBQcmV2aWV3L0pTWCByZXByZXNlbnRhdGlvbiBvZiBjdXJyZW50IHN0YXRlIHRyZWVcbiAgICovXG4gIF9yZW5kZXJFbGVtZW50SW5QcmV2aWV3TW9kZSA9IChlbGVtZW50KSA9PiB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB7fTtcbiAgICBjb25zdCBlbGVtZW50RGF0YSA9IHRoaXMucmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50c1xuICAgICAgLmZpbmQoZSA9PiBlLnR5cGUgPT09IGVsZW1lbnQudHlwZSk7XG5cbiAgICAvLyBlbGVtZW50IGhhcyBzdWIgZmllbGRzLCByZW5kZXIgdGhvc2UgZmllbGRzIGZpcnN0XG4gICAgLy8gYW5kIHRoZW4gY29tZSBiYWNrIHRvIGN1cnJlbnQgZmllbGRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbGVtZW50LmZpZWxkcykpIHtcbiAgICAgIGVsZW1lbnQuZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgIGNoaWxkcmVuW2ZpZWxkLmRyb3B6b25lSURdID0gY2hpbGRyZW5bZmllbGQuZHJvcHpvbmVJRF0gfHwgW107XG4gICAgICAgIGNoaWxkcmVuW2ZpZWxkLmRyb3B6b25lSURdID0gY2hpbGRyZW5bZmllbGQuZHJvcHpvbmVJRF1cbiAgICAgICAgICAuY29uY2F0KHRoaXMuX3JlbmRlckVsZW1lbnRJblByZXZpZXdNb2RlKGZpZWxkKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyByZW5kZXIgY29ycmVzcG9uZGluZyBjb21wb25lbnQgYW5kIHBhc3MgbmVjZXNzYXJ5IHByb3BzXG4gICAgLy8gc2hvd1ByZXZpZXcgaXMgbWFuZGF0b3J5XG4gICAgcmV0dXJuIChcbiAgICAgIDxlbGVtZW50RGF0YS5jb21wb25lbnRcbiAgICAgICAgaWQ9e2VsZW1lbnQuaWR9XG4gICAgICAgIGtleT17ZWxlbWVudC5pZH1cbiAgICAgICAgY2hpbGROb2RlPXtjaGlsZHJlbn1cbiAgICAgICAgey4uLnsgLi4uZWxlbWVudCwgc2hvd1ByZXZpZXc6IHRydWUsIHNob3dCYXNpY0NvbnRlbnQ6IGZhbHNlIH19XG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuc3RhdGUuY3VycmVudFN0YXRlWzBdO1xuXG4gICAgLy8gaWYgeW91IHdhbnQgbW9yZSBmbGV4aWJsaXR5XG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih7XG4gICAgICAgIGNoaWxkcmVuOiByb290LmZpZWxkcy5tYXAodGhpcy5fcmVuZGVyRWxlbWVudEluUHJldmlld01vZGUpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBzdGFuZGFyZCByZW5kZXIgLSBvbmx5IDxQcmV2aWV3IC8+IGFuZCBkb25lXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHJldmlldy1jb250YWluZXJcIj5cbiAgICAgICAge1xuICAgICAgICAgIHJvb3QuZmllbGRzLm1hcCh0aGlzLl9yZW5kZXJFbGVtZW50SW5QcmV2aWV3TW9kZSlcbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5QcmV2aWV3LnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5mdW5jXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcmV2aWV3O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBjb3JlIGZyb20gJy4uLy4uL2NvcmUvY29yZSc7XG5cbmNsYXNzIFRyYXNoIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAvLyBjcmVhdGUgcmVmcmVuY2UgZm9yIHRyYXNoXG4gICAgLy8gdG8gY2hlY2sgd2hldGhlciBpcyBkcmFnZ2luZyBvbiB0cmFzaCBib3ggb3Igbm90XG4gICAgdGhpcy50cmFzaFJlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICB9XG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIHRvZ2dsZS9tYW5hZ2UgY2xhc3MoaW5zaWRlKVxuICAgKiBjbGFzcyBnZXRzIGFwcGVuZGVkIHRvIGNhbnZhc1xuICAgKiBAcGFyYW0gdGFyZ2V0IHtET019IC0gY3VycmVudCBjYW52YXMgdXBvbiB3aGljaCB1c2UgaXMgaG92ZXJpbmdcbiAgICogQHBhcmFtIGFjdGlvbiB7U3RyaW5nfSAtIGFkZC9yZW1vdmUgLSBuYW1lIG9mIGFjdGlvblxuICAgKi9cbiAgX21hbmFnZUluc2lkZUNsYXNzID0gKHsgdGFyZ2V0IH0sIGFjdGlvbikgPT4ge1xuICAgIGlmICh0aGlzLnRyYXNoUmVmLmN1cnJlbnQgPT09IHRhcmdldCkge1xuICAgICAgdGFyZ2V0LmNsYXNzTGlzdFthY3Rpb25dKCdpbnNpZGUnKTtcbiAgICB9XG4gIH1cblxuICBfb25Ecm9wID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIC8vIGdldCBkcmFnZ2VkIGVsZW1lbnRcbiAgICBjb25zdCBlbGVtZW50VG9CZVRyYXNoZWQgPSBjb3JlLmdldERyYWdnZWRFbGVtZW50KCk7XG5cbiAgICAvLyBkb250IGFsbG93IGVsZW1lbnRzIHdoaWNoIGRpcmVjdGx5IGNvbWluZyBmcm9tIHBhbGV0dGVcbiAgICBpZiAoIWVsZW1lbnRUb0JlVHJhc2hlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHsgb25CZWZvcmVUcmFzaCwgb25BZnRlclRyYXNoIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgcmVtb3ZlRWxlbWVudCB9ID0gZWxlbWVudFRvQmVUcmFzaGVkO1xuICAgIGNvbnN0IHN0YXR1cyA9IG9uQmVmb3JlVHJhc2goZWxlbWVudFRvQmVUcmFzaGVkKTtcblxuICAgIHRoaXMuX21hbmFnZUluc2lkZUNsYXNzKGUsICdyZW1vdmUnKTtcblxuICAgIC8vIHVzZXIgdHJpZWQgYW5kIGNvbmZpcm0gdG8gcmVtb3ZlIGVsZW1lbnRcbiAgICBpZiAoc3RhdHVzICYmIGNvcmUuZ2V0QXR0ZW1wdFRvUmVtb3ZlKCkpIHtcbiAgICAgIC8vIHJlbW92ZSBlbGVtZW50IGZyb20gY3VycmVudCBjYW52YXNcbiAgICAgIHJlbW92ZUVsZW1lbnQoZWxlbWVudFRvQmVUcmFzaGVkLmVsZW1lbnRJRCwgKCkgPT4ge1xuICAgICAgICAvLyBhY2tub3dsZWRnZVxuICAgICAgICBvbkFmdGVyVHJhc2goKTtcbiAgICAgIH0sIHRydWUpOyAvLyB0cnVlIC0gZGlzcGF0Y2ggYHJlbW92ZUVsZW1lbnRgIGV2ZW50XG5cbiAgICAgIC8vIGRvbmUgZHJhZ2dpbmcsIGZsdXNoIHRoZSBkcmFnZ2VkIGVsZW1lbnRcbiAgICAgIGNvcmUuc2V0RHJhZ2dlZEVsZW1lbnQobnVsbCk7XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgYXR0ZW1wdCB0byByZW1vdmVcbiAgICBjb3JlLnNldEF0dGVtcHRUb1JlbW92ZShmYWxzZSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIHVzZXIgaXMgZHJhZ2dpbmcgb3ZlciB0aGUgdHJhc2hcbiAgLy8gYHByZXZlbnREZWZhdWx0YCAtIFJlcXVpcmVkLiBBbGxvd3MgdXMgdG8gZHJvcC5cbiAgLy8gQHBhcmFtIGUge2V2ZW50fVxuICBfb25EcmFnT3ZlciA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIHVzZXIgaXMgbGVhdmluZyB0aGUgdHJhc2hcbiAgICogQHBhcmFtIGUge2V2ZW50fVxuICAgKi9cbiAgX29uRHJhZ0xlYXZlID0gKGUpID0+IHtcbiAgICB0aGlzLl9tYW5hZ2VJbnNpZGVDbGFzcyhlLCAncmVtb3ZlJyk7XG4gIH1cblxuICAvKipcbiAgICogdXNlciBpcyBkcmFnZ2luZyBvdmVyIHRyYXNoXG4gICAqIEBwYXJhbSBlIHtldmVudH1cbiAgICovXG4gIF9vbkRyYWdFbnRlciA9IChlKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudFRvQmVUcmFzaGVkID0gY29yZS5nZXREcmFnZ2VkRWxlbWVudCgpO1xuXG4gICAgaWYgKGVsZW1lbnRUb0JlVHJhc2hlZCkge1xuICAgICAgdGhpcy5fbWFuYWdlSW5zaWRlQ2xhc3MoZSwgJ2FkZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICByZWY9e3RoaXMudHJhc2hSZWZ9XG4gICAgICAgIGNsYXNzTmFtZT1cInRyYXNoLWJveFwiXG4gICAgICAgIG9uRHJhZ0xlYXZlPXt0aGlzLl9vbkRyYWdMZWF2ZX1cbiAgICAgICAgb25EcmFnRW50ZXI9e3RoaXMuX29uRHJhZ0VudGVyfVxuICAgICAgICBvbkRyYWdPdmVyPXt0aGlzLl9vbkRyYWdPdmVyfVxuICAgICAgICBvbkRyb3A9e3RoaXMuX29uRHJvcH1cbiAgICAgID5cbiAgICAgICAgeyB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IDxzcGFuPlRyYXNoIEJveDwvc3Bhbj4gfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5UcmFzaC5wcm9wVHlwZXMgPSB7XG4gIG9uQmVmb3JlVHJhc2g6IFByb3BUeXBlcy5mdW5jLFxuICBvbkFmdGVyVHJhc2g6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmVsZW1lbnQpLFxuICAgIFByb3BUeXBlcy5lbGVtZW50XG4gIF0pLFxufTtcblxuVHJhc2guZGVmYXVsdFByb3BzID0ge1xuICBvbkJlZm9yZVRyYXNoOiAoKSA9PiAodHJ1ZSksXG4gIG9uQWZ0ZXJUcmFzaDogKCkgPT4gKHRydWUpXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUcmFzaDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgY29yZSBmcm9tICcuLi8uLi9jb3JlL2NvcmUnO1xuXG5jbGFzcyBQYWxldHRlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIHJlbmRlciB0aGUgZHJhZ2dlZCBlbGVtZW50XG4gICAqIEBwYXJhbSBwcm9wcyB7T2JqZWN0fSAtIEFuIG9iamVjdCB3aGljaCBob2xkIHRoZSBpbmZvIG9mIGRyYWdnZWQgZWxlbWVudC9jb21wb25lbnRcbiAgICogQHJldHVybnMgSlNYXG4gICAqL1xuICBfcmVuZGVyTGlzdCA9IChwcm9wcykgPT4ge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBjb3JlLmdldFJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMoKS5maW5kKGUgPT4gZS50eXBlID09PSBwcm9wcy50eXBlKTtcbiAgICByZXR1cm4gZWxlbWVudCA/IDxlbGVtZW50LmNvbXBvbmVudCB7Li4ucHJvcHN9IC8+IDogbnVsbDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHBhbGV0dGVFbGVtZW50cyB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbGV0dGVcIj5cbiAgICAgICAge1xuICAgICAgICAgIHBhbGV0dGVFbGVtZW50cy5tYXAoaXRlbSA9PiAoXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJMaXN0KHsgLi4uaXRlbSwga2V5OiBpdGVtLmlkLCBzaG93QmFzaWNDb250ZW50OiB0cnVlIH0pXG4gICAgICAgICAgKSlcbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5QYWxldHRlLnByb3BUeXBlcyA9IHtcbiAgcGFsZXR0ZUVsZW1lbnRzOiBQcm9wVHlwZXMuYXJyYXlPZigocHJvcFZhbHVlKSA9PiB7XG4gICAgbGV0IGlzRXJyb3IgPSBmYWxzZTtcblxuICAgIC8vIGFsbCBwYWxldHRlIGVsZW1lbnRzIHNob3VsZCBoYXZlIHVuaXF1ZSBJRFxuICAgIHByb3BWYWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbSAmJiAhaXRlbS5pZCkge1xuICAgICAgICBpc0Vycm9yID0gJ2BpZGAgaXMgcmVxdWlyZWQgaW4gYWxsIHBhbGV0dGUgZWxlbWVudCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wVmFsdWUuZmlsdGVyKGkgPT4gaS5pZCA9PT0gaXRlbS5pZCkubGVuZ3RoID4gMSkge1xuICAgICAgICBpc0Vycm9yID0gJ2BpZGAgb2YgcGFsZXR0ZSBlbGVtZW50IHNob3VsZCBiZSB1bmlxdWUnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlzRXJyb3IgPyBuZXcgRXJyb3IoaXNFcnJvcikgOiB0cnVlO1xuICB9KVxufTtcblxuUGFsZXR0ZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHBhbGV0dGVFbGVtZW50czogW11cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBhbGV0dGU7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IGNvcmUgZnJvbSAnLi4vLi4vY29yZS9jb3JlJztcblxuY2xhc3MgRHJhZ2dhYmxlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLmRyYWdFbGVtUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIC8vIHVwZGF0ZSB0aGUgc3RhdGUgb25jZSBwYXJlbnQgc3RhdGUgaW5pdGlhbGlzYXRpb24gaXMgZG9uZVxuICAgIGlmICh0aGlzLnByb3BzLmluaXREb25lICE9PSBuZXh0UHJvcHMuaW5pdERvbmUgJiYgbmV4dFByb3BzLmluaXREb25lKSB7XG4gICAgICB0aGlzLnByb3BzLnVwZGF0ZVN0YXRlKCk7XG4gICAgfVxuICB9XG5cbiAgX2RyYWdFbmQgPSAoZSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICB0aGlzLmRyYWdFbGVtUmVmLmN1cnJlbnQuY2xhc3NMaXN0LnJlbW92ZSgnYmVmb3JlJywgJ2FmdGVyJyk7XG5cbiAgICAvLyBkb25lIGRyYWdnaW5nLCByZXNldCBkcmFnZ2VkIGVsZW1lbnRcbiAgICBjb3JlLnNldERyYWdnZWRFbGVtZW50KG51bGwpO1xuICB9XG5cbiAgX2RyYWdTdGFydCA9IChlKSA9PiB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGlkLFxuICAgICAgdHlwZSxcbiAgICAgIG5hbWUsXG4gICAgICBmaWVsZHMsXG4gICAgICBwYXlsb2FkLFxuICAgICAgZHJvcHpvbmVJRCxcbiAgICAgIHJlbW92ZUVsZW1lbnQsXG4gICAgICBjaGVja0FuZFJlbW92ZUVsZW1lbnRcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBpZCxcbiAgICAgIHR5cGUsXG4gICAgICBuYW1lLFxuICAgICAgcGF5bG9hZFxuICAgIH07XG5cbiAgICBpZiAoZmllbGRzKSB7XG4gICAgICBkYXRhLmZpZWxkcyA9IGZpZWxkcztcbiAgICB9XG5cbiAgICBlLmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ2NvcHknO1xuICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ2RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7IC8vIHJlcXVpcmVkLCB3ZSBjYW5uJ3QgcGFzcyBKUyBvYmplY3RcblxuICAgIC8vIGlmIGVsZW1lbnQgaXMgYWxyZWFkeSBwcmVzZW50IGluIHNvbWUgY2FudmFzXG4gICAgLy8gdGhlbiBzZXQgZHJhZ2dlZEVsZW1lbnQsIHNvIHRoYXQgdGhpcyB3aWxsIGhlbHAgdG8gcmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gcHJldmlvdXMgY2FudmFzXG4gICAgaWYgKGRyb3B6b25lSUQpIHtcbiAgICAgIGNvcmUuc2V0RHJhZ2dlZEVsZW1lbnQoe1xuICAgICAgICBlbGVtZW50SUQ6IGlkLFxuICAgICAgICBkcm9wem9uZUlELFxuICAgICAgICByZW1vdmVFbGVtZW50LFxuICAgICAgICBjaGVja0FuZFJlbW92ZUVsZW1lbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byBzZXQgZHJvcCBwb3NpdGlvbi5cbiAgICogZmlyc3QgZmluZSBtaWQgb2YgZWxlbWVudCB1cG9uIHdoaWNoIHVzZXIgaXMgZHJhZ2dpbmcgb3ZlciBhbmRcbiAgICogYmFzZWQgb24gdGhhdCBkZWNpZGUgd2hldGhlciB1c2VyIHRyeWluZyB0byBkcm9wIGFuIGVsZW1lbnQgYWJvdmUgb3IgYmVsb3dcbiAgICovXG4gIF9vbkRyYWdPdmVyID0gKGUpID0+IHtcbiAgICBjb25zdCBlbGVtQ29yZCA9IHRoaXMuZHJhZ0VsZW1SZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIGlmICghdGhpcy5wcm9wcy5zcGFjZUF2YWlsYWJsZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmFsbG93SG9yaXpvbnRhbCkge1xuICAgICAgY29uc3QgZHJhZ0VsZW1YID0gZS5jbGllbnRYO1xuICAgICAgaWYgKGRyYWdFbGVtWCA+PSBlbGVtQ29yZC54ICYmIGRyYWdFbGVtWCA8PSBlbGVtQ29yZC54ICsgZWxlbUNvcmQud2lkdGgpIHtcbiAgICAgICAgY29uc3QgbWlkWCA9IGVsZW1Db3JkLnggKyBlbGVtQ29yZC53aWR0aCAvIDI7XG4gICAgICAgIGlmIChkcmFnRWxlbVggPCBtaWRYKSB7XG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FmdGVyJyk7XG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5hZGQoJ2JlZm9yZScpO1xuICAgICAgICAgIGNvcmUuc2V0RHJvcFBvc3Rpb24odGhpcy5wcm9wcy5pbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JlZm9yZScpO1xuICAgICAgICAgIHRoaXMuZHJhZ0VsZW1SZWYuY3VycmVudC5jbGFzc0xpc3QuYWRkKCdhZnRlcicpO1xuICAgICAgICAgIGNvcmUuc2V0RHJvcFBvc3Rpb24odGhpcy5wcm9wcy5pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRyYWdFbGVtWSA9IGUuY2xpZW50WTtcbiAgICAgIGlmIChkcmFnRWxlbVkgPj0gZWxlbUNvcmQueSAmJiBkcmFnRWxlbVkgPD0gZWxlbUNvcmQueSArIGVsZW1Db3JkLmhlaWdodCkge1xuICAgICAgICBjb25zdCBtaWRZID0gZWxlbUNvcmQueSArIGVsZW1Db3JkLmhlaWdodCAvIDI7XG4gICAgICAgIGlmIChkcmFnRWxlbVkgPCBtaWRZKSB7XG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2FmdGVyJyk7XG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5hZGQoJ2JlZm9yZScpO1xuICAgICAgICAgIGNvcmUuc2V0RHJvcFBvc3Rpb24odGhpcy5wcm9wcy5pbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kcmFnRWxlbVJlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2JlZm9yZScpO1xuICAgICAgICAgIHRoaXMuZHJhZ0VsZW1SZWYuY3VycmVudC5jbGFzc0xpc3QuYWRkKCdhZnRlcicpO1xuICAgICAgICAgIGNvcmUuc2V0RHJvcFBvc3Rpb24odGhpcy5wcm9wcy5pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBfb25EcmFnTGVhdmUgPSAoKSA9PiB7XG4gICAgLy8gcmVtb3ZlIGJlZm9yZS9hZnRlciBjbGFzcyBmcm9tIGRyYWdnZWQgZWxlbWVudFxuICAgIHRoaXMuZHJhZ0VsZW1SZWYuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKCdiZWZvcmUnLCAnYWZ0ZXInKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGVsZW1lbnRQcm9wcywgZHJhZ2dhYmxlLCBhbGxvd0hvcml6b250YWwgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IGUgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZHJvcHpvbmVJRCkge1xuICAgICAgLy8gYWRkIHRoaXMgcmVxdWlyZWQgZnVuY3Rpb24gb25seSBpZiBlbGVtZW50IGlzIGRyb3BwZWQgaW4gY2FudmFzXG4gICAgICBlID0ge1xuICAgICAgICBvbkRyYWdPdmVyOiB0aGlzLl9vbkRyYWdPdmVyLFxuICAgICAgICBvbkRyYWdMZWF2ZTogdGhpcy5fb25EcmFnTGVhdmVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGRyYWdnYWJsZSkge1xuICAgICAgZSA9IHtcbiAgICAgICAgLi4uZSxcbiAgICAgICAgZHJhZ2dhYmxlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIHJlZj17dGhpcy5kcmFnRWxlbVJlZn1cbiAgICAgICAgY2xhc3NOYW1lPXtgZHJhZy1pdGVtICR7YWxsb3dIb3Jpem9udGFsID8gJ2lubGluZScgOiAnJ31gfVxuICAgICAgICBvbkRyYWdTdGFydD17dGhpcy5fZHJhZ1N0YXJ0fVxuICAgICAgICBvbkRyYWdFbmQ9e3RoaXMuX2RyYWdFbmR9XG4gICAgICAgIHsuLi5lbGVtZW50UHJvcHN9XG4gICAgICAgIHsuLi5lfVxuICAgICAgPlxuICAgICAgICB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkRyYWdnYWJsZS5wcm9wVHlwZXMgPSB7XG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGluaXREb25lOiBQcm9wVHlwZXMuYm9vbCxcbiAgaW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGFsbG93SG9yaXpvbnRhbDogUHJvcFR5cGVzLmJvb2wsXG4gIGZpZWxkczogUHJvcFR5cGVzLmluc3RhbmNlT2YoQXJyYXkpLFxuICBkcmFnZ2FibGU6IFByb3BUeXBlcy5ib29sLFxuICBzcGFjZUF2YWlsYWJsZTogUHJvcFR5cGVzLmJvb2wsXG4gIHVwZGF0ZVN0YXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgZHJvcHpvbmVJRDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcGF5bG9hZDogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KSxcbiAgZWxlbWVudFByb3BzOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihPYmplY3QpLFxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuZWxlbWVudCksXG4gICAgUHJvcFR5cGVzLmVsZW1lbnRcbiAgXSkuaXNSZXF1aXJlZCxcbiAgcmVtb3ZlRWxlbWVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoZWNrQW5kUmVtb3ZlRWxlbWVudDogUHJvcFR5cGVzLmZ1bmNcbn07XG5cbkRyYWdnYWJsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoZWNrQW5kUmVtb3ZlRWxlbWVudDogKCkgPT4gKHRydWUpLFxuICBlbGVtZW50UHJvcHM6IG51bGwsXG4gIHBheWxvYWQ6IG51bGwsXG4gIGRyYWdnYWJsZTogdHJ1ZSxcbiAgdXBkYXRlU3RhdGU6ICgpID0+ICh0cnVlKVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRHJhZ2dhYmxlO1xuIiwiaW1wb3J0IGNvcmUgZnJvbSAnLi9jb3JlJztcbmltcG9ydCBzdGF0ZSBmcm9tICcuL3N0YXRlJztcblxuLy8gZG9udCB3YW50IGFueSBjb25mbGljdHMgd2l0aCBKUyBFdmVudCBhbmQgQ3VzdG9tRXZlbnQgT2JqZWN0IGhlbmNlIGtlZXBpbmcgbmFtZSBhcyBScG1FdmVudFxuY2xhc3MgUnBtRXZlbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBzdXBwb3J0ZWQgZXZlbnRzXG4gICAgdGhpcy5ldmVudCA9IHtcbiAgICAgIGNoYW5nZTogW10sXG4gICAgICBmbHVzaDogW10sXG4gICAgICByZW1vdmVFbGVtZW50OiBbXSxcbiAgICAgIHVwZGF0ZUVsZW1lbnQ6IFtdXG4gICAgfTtcbiAgfVxuXG4gIC8vIHByaXZhdGUgZnVuY3Rpb24gdG8gdHJpZ2dlciBhbGwgY2hhbmdlIENCXG4gIG5vdGlmeVN0YXRlQ2hhbmdlID0gKCkgPT4ge1xuICAgIC8vIHRyaWdnZXIgYWxsIGV2ZW50c1xuICAgIHRoaXMuZXZlbnQuY2hhbmdlLmZvckVhY2goZSA9PiBlKHN0YXRlLmdldFN0YXRlKCkpKTtcbiAgfTtcblxuICAvLyBwcml2YXRlIGZ1bmN0aW9uIHRvIHRyaWdnZXIgYWxsIGZsdXNoIENCXG4gIC8vIHN0YXRlIGhhcyBiZWVuIHJlc2V0IHRvIGVtcHR5LCB0cmlnZ2VyIGZpbmFsIGNoYW5nZSBhbmQgdGhlbiBmbHVzaCBldmVudFxuICBub3RpZnlTdGF0ZUZsdXNoID0gKHRyaWdnZXJDaGFuZ2UpID0+IHtcbiAgICBpZiAodHJpZ2dlckNoYW5nZSkge1xuICAgICAgdGhpcy5ub3RpZnlTdGF0ZUNoYW5nZSgpO1xuICAgIH1cblxuICAgIC8vIHRyaWdnZXIgYWxsIGV2ZW50c1xuICAgIHRoaXMuZXZlbnQuZmx1c2guZm9yRWFjaChlID0+IGUodHJ1ZSkpO1xuICB9O1xuXG4gIC8vIHByaXZhdGUgZnVuY3Rpb24gdG8gdHJpZ2dlciBhbGwgZWxlbWVudCB1cGRhdGUgQ0JcbiAgbm90aWZ5RWxlbWVudFVwZGF0ZSA9IChlbGVtZW50KSA9PiB7XG4gICAgLy8gdHJpZ2dlciBhbGwgZXZlbnRzXG4gICAgdGhpcy5ldmVudC51cGRhdGVFbGVtZW50LmZvckVhY2goZSA9PiBlKGVsZW1lbnQpKTtcbiAgfTtcblxuICAvLyBwcml2YXRlIGZ1bmN0aW9uIHRvIHRyaWdnZXIgYWxsIGVsZW1lbnQgcmVtb3ZlIENCXG4gIG5vdGlmeUVsZW1lbnRSZW1vdmUgPSAoZWxlbWVudCkgPT4ge1xuICAgIC8vIHRyaWdnZXIgYWxsIGV2ZW50c1xuICAgIHRoaXMuZXZlbnQucmVtb3ZlRWxlbWVudC5mb3JFYWNoKGUgPT4gZShlbGVtZW50KSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIGFkZCBldmVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIC0gY2FsbGJhY2tcbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXIgPSAoZXZlbnROYW1lLCBjYikgPT4ge1xuICAgIGxldCByZXR1cm5DQiA9IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb3JlLmVycm9yKCdgY2JgIHBhcmFtIGhhcyB0byBiZSBmdW5jdGlvbicpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5ldmVudCwgZXZlbnROYW1lKSkge1xuICAgICAgdGhpcy5ldmVudFtldmVudE5hbWVdLnB1c2goY2IpO1xuXG4gICAgICByZXR1cm5DQiA9IGNiO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3JlLmVycm9yKCdObyBzdWNoIGV2ZW50Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldHVybkNCO1xuICB9O1xuXG4gIC8qKlxuICAgKiBmdW5jdGlvbiB0byByZW1vdmUgZXZlbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAtIGNhbGxiYWNrXG4gICAqL1xuICByZW1vdmVFdmVudExpc3RlbmVyID0gKGV2ZW50TmFtZSwgY2IpID0+IHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuZXZlbnQsIGV2ZW50TmFtZSkpIHtcbiAgICAgIHRoaXMuZXZlbnRbZXZlbnROYW1lXSA9IHRoaXMuZXZlbnRbZXZlbnROYW1lXS5maWx0ZXIoZSA9PiBlICE9PSBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcmUuZXJyb3IoJ05vIHN1Y2ggZXZlbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IHJwbUV2ZW50ID0gbmV3IFJwbUV2ZW50KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJwbUV2ZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgRHJvcHpvbmUgZnJvbSAnLi4vRHJvcHpvbmUvRHJvcHpvbmUnO1xuXG4vLyBmdW5jdGlvbmFsIGNvbXBvbmVudCB3aGljaCBleHRlbmRzIERyb3B6b25lIGJ1dCB3aXRoIHNvbWUgZml4ZWQgcHJvcGVydGllcyAtIGlkIGFuZCBwYXJlbnRJRFxuLy8gYm90aCBwcm9wcyBzZXQgdG8gYHJvb3RgIC0gcmVxdWlyZWQgc2luY2UgYXBwbGljYXRpb24gc3RhdGUgaG9sZHMgYHJvb3RgIGFzIHBhcmVudCBub2RlXG4vLyBkZWZhdWx0IGluaXREb25lIHNldCB0byB0cnVlXG5jb25zdCBDYW52YXMgPSBwcm9wcyA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPVwibWFpbi1jYW52YXNcIj5cbiAgICA8RHJvcHpvbmUgey4uLnByb3BzfSBwYXJlbnRJRD1cInJvb3RcIiBpZD1cInJvb3RcIiBpbml0RG9uZSAvPlxuICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IENhbnZhcztcbiIsIi8vIGltcG9ydCBhbGwgY29tcG9uZW50c1xuaW1wb3J0IENhbnZhcyBmcm9tICcuL2NvbXBvbmVudHMvQ2FudmFzL0NhbnZhcyc7XG5pbXBvcnQgRHJvcHpvbmUgZnJvbSAnLi9jb21wb25lbnRzL0Ryb3B6b25lL0Ryb3B6b25lJztcbmltcG9ydCBEcmFnZ2FibGUgZnJvbSAnLi9jb21wb25lbnRzL0RyYWdnYWJsZS9EcmFnZ2FibGUnO1xuaW1wb3J0IFBhbGV0dGUgZnJvbSAnLi9jb21wb25lbnRzL1BhbGV0dGUvUGFsZXR0ZSc7XG5pbXBvcnQgVHJhc2ggZnJvbSAnLi9jb21wb25lbnRzL1RyYXNoL1RyYXNoJztcbmltcG9ydCBQcmV2aWV3IGZyb20gJy4vY29tcG9uZW50cy9QcmV2aWV3L1ByZXZpZXcnO1xuXG4vLyBpbXBvcnQgYWxsIEFQSSdzXG5pbXBvcnQgc3RhdGUgZnJvbSAnLi9jb3JlL3N0YXRlJztcbmltcG9ydCBjb3JlIGZyb20gJy4vY29yZS9jb3JlJztcblxuLy8gaW1wb3J0IGJhc2ljIHN0eWxlXG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGFsbCBjb21wb25lbnRzXG4gIENhbnZhcyxcbiAgRHJvcHpvbmUsXG4gIERyYWdnYWJsZSxcbiAgUGFsZXR0ZSxcbiAgVHJhc2gsXG4gIFByZXZpZXcsXG5cbiAgLy8gYWxsIG9wZW4gQVBJJ3NcbiAgc3RhdGUsXG4gIGNvcmUsXG5cbiAgLy8gc2luY2UgdGhpcyBpcyByZXVpcmVkIGZ1bmN0aW9uLCBrZWVwaW5nIHNlcHJhdGVcbiAgcmVnaXN0ZXJQYWxldHRlRWxlbWVudHM6IGNvcmUucmVnaXN0ZXJQYWxldHRlRWxlbWVudHNcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9
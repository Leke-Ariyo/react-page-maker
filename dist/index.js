module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=18)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={};this.getAttemptToRemove=function(){return t.attemptToRemove},this.setAttemptToRemove=function(e){t.attemptToRemove=e},this.setDraggedElement=function(e){t.draggedElement=e},this.getDraggedElement=function(){return t.draggedElement},this.registerPaletteElements=function(e){t.registeredPaletteElements=e},this.getRegisteredPaletteElements=function(){return t.registeredPaletteElements},this.error=function(e){return console.error(e),!1},this.log=function(e){return console.log(e),!0}};t.default=r},function(e,t){e.exports=require("react")},function(e,t,n){e.exports=n(16)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0),a=(r=o)&&r.__esModule?r:{default:r};var i=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={},n={change:[]};t.tree=[{id:"root",fields:[]}];var r=function(){n.change.forEach(function(e){return e(t.tree)})};this.updateState=function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};!function e(n,r,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.tree,i=a.find(function(e){return e.id===r}),s=!1;if(i){if(n===r)i.fields=o;else if(i.fields&&o.length){var u=[];o.forEach(function(e){var t=i.fields.findIndex(function(t){return t.id===e.id});-1===t?u.push(e):i.fields=i.fields.map(function(n,r){return r===t?e:n})}),u.length&&(i.fields=i.fields.concat(u))}else n&&i.fields?i.fields=i.fields.filter(function(e){return e.dropzoneID!==n}):i.fields=o;s=!0}else for(var l=0;l<a.length;l++){var f=a[l].fields,c=!1;if(f&&(c=e(n,r,o,f)),c)break}return s}(e,n,o),a(t.tree),r()},this.getState=function(){return t.tree},this.clearState=function(){var e=t.tree[0],n=e.fields.length;return e.fields.forEach(function(e,t){e.flushDroppedElements(function(){t===n-1&&r()})}),!0},this.addEventListener=function(e,t){var r=null;return"function"!=typeof t?(a.default.error("`cb` param has to be function"),!1):(Object.prototype.hasOwnProperty.call(n,e)?(n[e].push(t),r=t):a.default.error("No such event"),r)},this.removeEventListener=function(e,t){Object.prototype.hasOwnProperty.call(n,e)?n[e]=n[e].filter(function(e){return e!==t}):a.default.error("No such event")}};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=f(a),s=f(n(2)),u=f(n(3)),l=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return p.call(n),n.canvasRef=i.default.createRef(),n.state={initialElements:[],droppedElements:[]},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillMount",value:function(){this._setInitialElements(this.props.initialElements)}},{key:"componentWillReceiveProps",value:function(e){var t=e.initialElements;this._setInitialElements(t)}},{key:"render",value:function(){var e=this,t=this.state.droppedElements,n=this.props,o=n.capacity,a=n.id,s=n.placeholder;return i.default.createElement("div",{ref:this.canvasRef,className:(o&&o===t.length?"no-space":"")+" "+("root"===a?"canvas":"")+" "+(t.length?"":"empty")+" dropzone",onDragOver:this._onDragOver,onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDrop:this._onDrop,onDragEnd:this._onDragEnd},t.map(function(t){return e._renderDragItem(r({},t))}),t.length?null:i.default.createElement("p",{className:"dropzone-placeholder"},s))}}]),t}(),p=function(){var e=this;this._setInitialElements=function(t){if(Array.isArray(t)&&t.length&&!e.state.initialElements.length){var n=e.props.id,o=t.map(function(t){return r({},t,{key:t.id,dropzoneID:n,showBasicContent:!1,removeElement:e._removeElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})});e.setState({initialElements:o,droppedElements:o},function(){return e._updateState()})}},this._manageInsideClass=function(t,n){var r=t.target;e.canvasRef.current===r&&r.classList[n]("inside")},this._removeElement=function(t){var n=e.state.droppedElements.findIndex(function(e){return e.id===t});e.setState({droppedElements:e.state.droppedElements.filter(function(e,t){return t!==n})},function(){return e._updateState()})},this._updateState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=e.props,r=n.id,o=n.parentID;u.default.updateState(r,o,e.state.droppedElements,t)},this._flushDroppedElements=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};e.setState({droppedElements:[]},function(){return e._updateState(t)})},this._checkAndRemoveElement=function(){var t=l.default.getDraggedElement(),n=t.removeElement,r=t.elementID,o=e.props.onElementMove(t),a=!l.default.getAttemptToRemove();o&&a&&n(r)},this._onDragOver=function(e){e.preventDefault()},this._onDragLeave=function(t){e._manageInsideClass(t,"remove"),l.default.setAttemptToRemove(!0)},this._onDragEnter=function(t){e._manageInsideClass(t,"add"),l.default.setAttemptToRemove(!1)},this._onDrop=function(t){t.preventDefault(),t.stopPropagation(),l.default.setAttemptToRemove(!1),e._manageInsideClass(t,"remove");var n=e.props.onDrop,o=JSON.parse(t.dataTransfer.getData("data"));return o=r({},o),n?n(o,e._addElement):e._addElement(o)},this._addElement=function(t){var n=e.props,o=n.id,a=n.capacity,i=l.default.getDraggedElement(),s=!t||!t.id,u=t.id&&e.state.droppedElements.filter(function(e){return e.id===t.id}).length;if(s||u)return l.default.error("Duplicate or invalid ID");var f=e.state.droppedElements.concat(r({},t,{key:t.id,dropzoneID:o,showBasicContent:!1,removeElement:e._removeElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement}));return a&&f.length>a?l.default.error("Maximum capacity of canvas("+o+") is "+a):(e.setState({droppedElements:f},function(){i&&"function"==typeof i.checkAndRemoveElement&&i.checkAndRemoveElement(),e._updateState()}),{dropzoneID:o,elements:f})},this._renderDragItem=function(e){var t=l.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null}};c.propTypes={id:s.default.string.isRequired,capacity:s.default.number,onDrop:s.default.func,onElementMove:s.default.func,initialElements:s.default.arrayOf(Object),parentID:s.default.string.isRequired,placeholder:s.default.string},c.defaultProps={initialElements:[],placeholder:"Drop Here",onElementMove:function(){return!0}},t.default=c},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,l=0,f=[],c=n(5);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(b(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(b(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function m(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=l++;n=u||(u=v(t)),r=_.bind(null,n,i,!1),o=_.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete a[s.id]}}}};var y,E=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"/* Very basic style */\r\n\r\n/* Prevent the text contents of draggable elements from being selectable. */\r\n[draggable] {\r\n  -moz-user-select: none;\r\n  -khtml-user-select: none;\r\n  -webkit-user-select: none;\r\n  user-select: none;\r\n\r\n  /* Required to make elements draggable in old WebKit */\r\n  -khtml-user-drag: element;\r\n  -webkit-user-drag: element;\r\n}\r\n\r\n/* class gets appended to canvas when user dragging over on it */\r\n.inside {\r\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n  box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n}\r\n\r\n.trash-box.inside,\r\n.dropzone.inside.no-space {\r\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.5);\r\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\r\n  box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\r\n}\r\n\r\n.dropzone {\r\n  width: 100%;\r\n  padding: 10px;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  background: #f0faff;\r\n  border: 1px solid #0277bd;\r\n}\r\n\r\n.dropzone.empty {\r\n  padding: 40px;\r\n}\r\n\r\n.palette {\r\n  padding: 10px;\r\n  background: #fff;\r\n  box-sizing: border-box;\r\n  border: 1px solid #01579b;\r\n}\r\n\r\n.drag-item {\r\n  padding: 10px;\r\n  color: #01579b;\r\n  box-sizing: border-box;\r\n  background-color: #b3e5fc;\r\n  border: 1px solid #01579b;\r\n}\r\n\r\n.dropzone-placeholder {\r\n  width: 100%;\r\n  color: #01579b;\r\n  text-align: center;\r\n  position: absolute;\r\n  left: 0;\r\n  top: calc(50% - 10px);\r\n  animation-name: changeColor;\r\n  animation-duration: 2s;\r\n  animation-timing-function: ease-in-out;\r\n  animation-iteration-count: infinite;\r\n}\r\n\r\n@keyframes changeColor {\r\n  25% {\r\n    transform: scale(1);\r\n    opacity: 1;\r\n  }\r\n\r\n  75% {\r\n    transform: scale(1);\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n.palette-wrapper .drag-item {\r\n  color: #fff;\r\n  background-color: #01579b;\r\n}\r\n\r\n.drag-item + div {\r\n  margin-top: 10px;\r\n}\r\n\r\n.trash-box {\r\n  padding: 30px 10px;\r\n  margin: 10px 0;\r\n  color: #b71c1c;\r\n  background: #ffcdd2;\r\n  text-align: center;\r\n  border: 1px solid #b71c1c;\r\n}\r\n",""])},function(e,t,n){var r=n(8);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=u(o),i=u(n(2)),s=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._manageInsideClass=function(e,t){var r=e.target;n.trashRef.current===r&&r.classList[t]("inside")},n._onDrop=function(e){e.preventDefault(),e.stopPropagation();var t=s.default.getDraggedElement();if(!t)return!1;var r=n.props,o=r.onBeforeTrash,a=r.onAfterTrash,i=t.removeElement,u=o(t);return n._manageInsideClass(e,"remove"),u&&s.default.getAttemptToRemove()&&(i(t.elementID),s.default.setDraggedElement(null),a()),s.default.setAttemptToRemove(!1),!0},n._onDragOver=function(e){e.preventDefault()},n._onDragLeave=function(e){n._manageInsideClass(e,"remove")},n._onDragEnter=function(e){s.default.getDraggedElement()&&n._manageInsideClass(e,"add")},n.trashRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",{ref:this.trashRef,className:"trash-box",onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDragOver:this._onDragOver,onDrop:this._onDrop},this.props.children||a.default.createElement("span",null,"Trash Box"))}}]),t}();l.propTypes={onBeforeTrash:i.default.func,onAfterTrash:i.default.func,children:i.default.oneOfType([i.default.arrayOf(i.default.element),i.default.element])},l.defaultProps={onBeforeTrash:function(){return!0},onAfterTrash:function(){return!0}},t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=l(a),s=l(n(2)),u=l(n(0));function l(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),s=0;s<o;s++)a[s]=arguments[s];return n=r=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._renderList=function(e){var t=u.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.paletteElements;return i.default.createElement("div",{className:"palette"},t.map(function(t){return e._renderList(r({},t,{key:t.id,showBasicContent:!0}))}))}}]),t}();c.propTypes={paletteElements:s.default.arrayOf(function(e){var t=!1;return e.forEach(function(n){n&&!n.id&&(t="`id` is required in all palette element"),e.filter(function(e){return e.id===n.id}).length>1&&(t="`id` of palette element should be unique")}),!t||new Error(t)})},c.defaultProps={paletteElements:[]},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=l(a),s=l(n(2)),u=l(n(0));function l(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._dragEnd=function(e){e.stopPropagation(),u.default.setDraggedElement(null)},r._dragStart=function(e){e.stopPropagation();var t=r.props,n=t.id,o=t.type,a=t.name,i=t.payload,s=t.dropzoneID,l=t.removeElement,f=t.checkAndRemoveElement,c={id:n,type:o,name:a,payload:i};e.dataTransfer.effectAllowed="copy",e.dataTransfer.setData("data",JSON.stringify(c)),s&&u.default.setDraggedElement({elementID:n,dropzoneID:s,removeElement:l,checkAndRemoveElement:f})},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this.props.elementProps;return i.default.createElement("div",r({className:"drag-item",onDragStart:this._dragStart,onDragEnd:this._dragEnd,draggable:!0},e),this.props.children)}}]),t}();c.propTypes={id:s.default.string.isRequired,name:s.default.string,dropzoneID:s.default.string,payload:s.default.instanceOf(Object),elementProps:s.default.instanceOf(Object),type:s.default.string.isRequired,children:s.default.oneOfType([s.default.arrayOf(s.default.element),s.default.element]).isRequired,removeElement:s.default.func,checkAndRemoveElement:s.default.func},c.defaultProps={checkAndRemoveElement:function(){return!0},elementProps:null,payload:null},t.default=c},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,s,u){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var f=[n,o,a,i,s,u],c=0;(l=new Error(t.replace(/%s/g,function(){return f[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(15),o=n(14),a=n(13);e.exports=function(){function e(e,t,n,r,i,s){s!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=i(n(1)),a=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return o.default.createElement("div",{className:"main-canvas"},o.default.createElement(a.default,r({},e,{parentID:"root",id:"root"})))}},function(e,t,n){"use strict";var r=f(n(17)),o=f(n(4)),a=f(n(12)),i=f(n(11)),s=f(n(10)),u=f(n(3)),l=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}n(9),e.exports={Canvas:r.default,Dropzone:o.default,Draggable:a.default,Palette:i.default,Trash:s.default,state:u.default,core:l.default,registerPaletteElements:l.default.registerPaletteElements}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29yZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWFjdFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jb3JlL3N0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Ryb3B6b25lL0Ryb3B6b25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS5jc3M/NzUyOCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UcmFzaC9UcmFzaC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9QYWxldHRlL1BhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRHJhZ2dhYmxlL0RyYWdnYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2FudmFzL0NhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNvcmUiLCJDb3JlIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImdldEF0dGVtcHRUb1JlbW92ZSIsImF0dGVtcHRUb1JlbW92ZSIsInNldEF0dGVtcHRUb1JlbW92ZSIsInN0YXR1cyIsInNldERyYWdnZWRFbGVtZW50IiwiZHJhZ2dlZEVsZW1lbnQiLCJnZXREcmFnZ2VkRWxlbWVudCIsInJlZ2lzdGVyUGFsZXR0ZUVsZW1lbnRzIiwicmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cyIsImdldFJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMiLCJlcnJvciIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwicmVxdWlyZSIsIl9jb3JlIiwic3RhdGUiLCJTdGF0ZSIsImV2ZW50IiwiY2hhbmdlIiwidHJlZSIsImlkIiwiZmllbGRzIiwibm90aWZ5U3RhdGVDaGFuZ2UiLCJmb3JFYWNoIiwiZSIsInVwZGF0ZVN0YXRlIiwiZHJvcHpvbmVJRCIsInBhcmVudElEIiwiY2IiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJ0cmF2ZXJzZUFuZFVwZGF0ZVRyZWUiLCJ1cGRhdGVkRmllbGRzIiwibWF0Y2hlZFBhcmVudENhbnZhcyIsImZpbmQiLCJmaWVsZCIsInJldHVyblN0YXR1cyIsImZpZWxkc1RvQmVBZGRlZCIsInVGaWVsZCIsImZpZWxkSW5kZXgiLCJmaW5kSW5kZXgiLCJmIiwicHVzaCIsIm1hcCIsImNvbmNhdCIsImZpbHRlciIsImNoaWxkRmllbGRzIiwiZ2V0U3RhdGUiLCJjbGVhclN0YXRlIiwicm9vdE5vZGUiLCJ0b3BMZXZlbEZpZWxkcyIsInRvcExldmVsRWxlbWVudCIsImZsdXNoRHJvcHBlZEVsZW1lbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50TmFtZSIsInJldHVybkNCIiwiX2NvcmUyIiwiZGVmYXVsdCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfcmVhY3QiLCJEcm9wem9uZSIsInByb3BzIiwiX3RoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiX2luaXRpYWxpc2VQcm9wcyIsImNhbnZhc1JlZiIsIl9yZWFjdDIiLCJjcmVhdGVSZWYiLCJpbml0aWFsRWxlbWVudHMiLCJkcm9wcGVkRWxlbWVudHMiLCJfc2V0SW5pdGlhbEVsZW1lbnRzIiwiX3JlZiIsIl90aGlzMiIsIl9wcm9wcyIsImNhcGFjaXR5IiwicGxhY2Vob2xkZXIiLCJjcmVhdGVFbGVtZW50IiwicmVmIiwiY2xhc3NOYW1lIiwib25EcmFnT3ZlciIsIl9vbkRyYWdPdmVyIiwib25EcmFnTGVhdmUiLCJfb25EcmFnTGVhdmUiLCJvbkRyYWdFbnRlciIsIl9vbkRyYWdFbnRlciIsIm9uRHJvcCIsIl9vbkRyb3AiLCJvbkRyYWdFbmQiLCJfb25EcmFnRW5kIiwiX3JlbmRlckRyYWdJdGVtIiwiX2V4dGVuZHMiLCJBcnJheSIsImlzQXJyYXkiLCJfdGhpczMiLCJ1cGRhdGVkSW5pdGlhbEl0ZW1zIiwia2V5Iiwic2hvd0Jhc2ljQ29udGVudCIsInJlbW92ZUVsZW1lbnQiLCJfcmVtb3ZlRWxlbWVudCIsIl9mbHVzaERyb3BwZWRFbGVtZW50cyIsImNoZWNrQW5kUmVtb3ZlRWxlbWVudCIsIl9jaGVja0FuZFJlbW92ZUVsZW1lbnQiLCJzZXRTdGF0ZSIsIl91cGRhdGVTdGF0ZSIsIl9tYW5hZ2VJbnNpZGVDbGFzcyIsIl9yZWYyIiwiYWN0aW9uIiwidGFyZ2V0IiwiY3VycmVudCIsImNsYXNzTGlzdCIsImVsZW1lbnRJRCIsImluZGV4IiwiX3Byb3BzMiIsIl9zdGF0ZTIiLCJlbGVtZW50TW92ZWQiLCJvbkVsZW1lbnRNb3ZlIiwiYXR0ZW1wdFRvTW92ZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImRhdGFUcmFuc2ZlciIsImdldERhdGEiLCJfYWRkRWxlbWVudCIsInVwZGF0ZWREYXRhIiwiX3Byb3BzMyIsImludmFsaWRVcGRhdGVkRGF0YSIsImtleUFscmVhZHlQcmVzZW50IiwibmV3RWxlbWVudHMiLCJlbGVtZW50cyIsImVsZW1lbnQiLCJ0eXBlIiwiY29tcG9uZW50IiwicHJvcFR5cGVzIiwiX3Byb3BUeXBlczIiLCJzdHJpbmciLCJpc1JlcXVpcmVkIiwibnVtYmVyIiwiZnVuYyIsImFycmF5T2YiLCJkZWZhdWx0UHJvcHMiLCJjc3MiLCJsb2NhdGlvbiIsIndpbmRvdyIsIkVycm9yIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwidHJpbSIsIiQxIiwidGVzdCIsImluZGV4T2YiLCJzdHJpbmdpZnkiLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJhcHBseSIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsIm9wdGlvbnMiLCJpdGVtIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJlbCIsImtleXMiLCJzZXRBdHRyaWJ1dGUiLCJvYmoiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImJpbmQiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImpvaW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInVzZVNvdXJjZU1hcCIsInRvU3RyaW5nIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiaG1yIiwibG9jYWxzIiwiVHJhc2giLCJ0cmFzaFJlZiIsImVsZW1lbnRUb0JlVHJhc2hlZCIsIl90aGlzJHByb3BzIiwib25CZWZvcmVUcmFzaCIsIm9uQWZ0ZXJUcmFzaCIsImNoaWxkcmVuIiwib25lT2ZUeXBlIiwiUGFsZXR0ZSIsIl9yZW5kZXJMaXN0IiwicGFsZXR0ZUVsZW1lbnRzIiwicHJvcFZhbHVlIiwiaXNFcnJvciIsIkRyYWdnYWJsZSIsIl9kcmFnRW5kIiwiX2RyYWdTdGFydCIsInBheWxvYWQiLCJlZmZlY3RBbGxvd2VkIiwic2V0RGF0YSIsImVsZW1lbnRQcm9wcyIsIm9uRHJhZ1N0YXJ0IiwiZHJhZ2dhYmxlIiwiaW5zdGFuY2VPZiIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiY29uZGl0aW9uIiwiYSIsImIiLCJhcmdzIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiYXJnIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJub2RlIiwib2JqZWN0T2YiLCJvbmVPZiIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIl9Ecm9wem9uZTIiLCJDYW52YXMiXSwibWFw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RUFBQSxpRUFJZSxTQUFBZ0csR0FBQSxPQUNiTyxFQUFBWCxRQUFBcUIsY0FBQSxPQUFLRSxVQUFVLGVBQ2JaLEVBQUFYLFFBQUFxQixjQUFBMlAsRUFBQWhSLFFBQUFtQyxLQUFjL0IsR0FBT25DLFNBQVMsT0FBT1AsR0FBRywwQ0NQNUMsUUFBQXRELEVBQUEsU0FDQUEsRUFBQSxRQUNBQSxFQUFBLFNBQ0FBLEVBQUEsU0FDQUEsRUFBQSxTQUdBQSxFQUFBLFFBQ0FBLEVBQUEsdURBR0FBLEVBQUEsR0FFQUcsRUFBT0QsU0FFTDJXLGlCQUNBOVEsbUJBQ0E4TixvQkFDQUwsa0JBQ0FSLGdCQUdBL1AsZ0JBQ0FwQixlQUdBVyx3QkFBeUJtRCxFQUFBQyxRQUFLcEQiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE4KTtcbiIsImNsYXNzIENvcmUge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgLy8gbWFpbiBvYmplY3Qvc3RvcmVcclxuICAgIGNvbnN0IGNvcmUgPSB7fTtcclxuXHJcbiAgICAvLyBhbGwgcHVibGljIGdldHRlci9zZXR0ZXIgZ29lcyBoZXJlXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byBnZXQgYXR0ZW1wdFRvUmVtb3ZlXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYXR0ZW1wdFRvUmVtb3ZlXHJcbiAgICAgKi9cclxuICAgIHRoaXMuZ2V0QXR0ZW1wdFRvUmVtb3ZlID0gKCkgPT4gKGNvcmUuYXR0ZW1wdFRvUmVtb3ZlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHNldCB1c2VyJ3MgYXR0ZW1wdCB0byByZW1vdmUgdGhlIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RhdHVzXHJcbiAgICAgKi9cclxuICAgIHRoaXMuc2V0QXR0ZW1wdFRvUmVtb3ZlID0gKHN0YXR1cykgPT4ge1xyXG4gICAgICBjb3JlLmF0dGVtcHRUb1JlbW92ZSA9IHN0YXR1cztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byBzZXQgZHJhZ2dlZCBlbGVtZW50XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZHJhZ2dlZEVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgdGhpcy5zZXREcmFnZ2VkRWxlbWVudCA9IChkcmFnZ2VkRWxlbWVudCkgPT4ge1xyXG4gICAgICBjb3JlLmRyYWdnZWRFbGVtZW50ID0gZHJhZ2dlZEVsZW1lbnQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gcmV0dXJuIGRyYWdnZWQgZWxlbWVudFxyXG4gICAgICogQHJldHVybnMge09iamVjdH1cclxuICAgICAqL1xyXG4gICAgdGhpcy5nZXREcmFnZ2VkRWxlbWVudCA9ICgpID0+IChjb3JlLmRyYWdnZWRFbGVtZW50KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIHBhbGV0dGUgZWxlbWVudHNcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMgLSBwYWxldHRlIGVsZW1lbnRzXHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVnaXN0ZXJQYWxldHRlRWxlbWVudHMgPSAocmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cykgPT4ge1xyXG4gICAgICBjb3JlLnJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMgPSByZWdpc3RlcmVkUGFsZXR0ZUVsZW1lbnRzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiByZWdpc3RlcmVkIHBhbGV0dGUgZWxlbWVudHNcclxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gLSBhcnJheSBvZiBwYWxldHRlIGVsZW1lbnRzXHJcbiAgICAgKi9cclxuICAgIHRoaXMuZ2V0UmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cyA9ICgpID0+IChjb3JlLnJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMpO1xyXG5cclxuICAgIC8qIGVzbGludCBuby1jb25zb2xlOjAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIGZ1bmN0aW9uIHRvIGdpdmUgYW4gZXJyb3IgbWVzc2FnZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgLSBhbnkgbWVzc2FnZSB0byBiZSBwcmludFxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHRoaXMuZXJyb3IgPSAobWVzc2FnZSkgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gbG9nIGEgbWVzc2FnZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgLSBhbnkgbWVzc2FnZSB0byBiZSBwcmludFxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHRoaXMubG9nID0gKG1lc3NhZ2UpID0+IHtcclxuICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGNvcmUgPSBuZXcgQ29yZSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29yZTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVhY3RcIik7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiaW1wb3J0IGNvcmUgZnJvbSAnLi9jb3JlJztcclxuXHJcbmNsYXNzIFN0YXRlIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIC8vIGFsbCBwcml2YXRlIHZhcmliYWxlIGdvZXMgaGVyZVxyXG4gICAgY29uc3Qgc3RhdGUgPSB7fTtcclxuICAgIGNvbnN0IGV2ZW50ID0ge1xyXG4gICAgICBjaGFuZ2U6IFtdXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHNldCBiYXNlXHJcbiAgICBzdGF0ZS50cmVlID0gW3tcclxuICAgICAgaWQ6ICdyb290JyxcclxuICAgICAgZmllbGRzOiBbXVxyXG4gICAgfV07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBwcml2YXRlIGZ1bmN0aW9uIHRvIHRyYXZlcnNlIHRocm91Z2ggZWFjaCBub2RlIGFuZCB1cGRhdGUgdGhlIGNvcnJlc3BvbmRpbmcgbm9kZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRyb3B6b25lSURcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJlbnRJRFxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gdXBkYXRlZEZpZWxkcyAtIG5ldyBmaWVsZHMvZWxlbWVudHNcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpZWxkcyAtIGZpZWxkcy9lbGVtZW50cyBvZiBjdXJyZW50IGNhbnZhc1xyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHRyYXZlcnNlQW5kVXBkYXRlVHJlZSA9IChkcm9wem9uZUlELCBwYXJlbnRJRCwgdXBkYXRlZEZpZWxkcywgZmllbGRzID0gc3RhdGUudHJlZSkgPT4ge1xyXG4gICAgICBjb25zdCBtYXRjaGVkUGFyZW50Q2FudmFzID0gZmllbGRzLmZpbmQoZmllbGQgPT4gZmllbGQuaWQgPT09IHBhcmVudElEKTtcclxuICAgICAgbGV0IHJldHVyblN0YXR1cyA9IGZhbHNlO1xyXG5cclxuICAgICAgLy8gZm91bmQgZWxlbWVudFxyXG4gICAgICBpZiAobWF0Y2hlZFBhcmVudENhbnZhcykge1xyXG4gICAgICAgIGlmIChkcm9wem9uZUlEID09PSBwYXJlbnRJRCkge1xyXG4gICAgICAgICAgLy8gZmlyc3QgdGltZSwgY3JlYXRlIGZpZWxkc1xyXG4gICAgICAgICAgbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMgPSB1cGRhdGVkRmllbGRzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIW1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzIHx8ICF1cGRhdGVkRmllbGRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgLy8gdXNlciB0cmllZCB0byByZW1vdmUgZWxlbWVudHNcclxuICAgICAgICAgIGlmIChkcm9wem9uZUlEICYmIG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzKSB7XHJcbiAgICAgICAgICAgIG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzID0gbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHNcclxuICAgICAgICAgICAgICAuZmlsdGVyKGYgPT4gZi5kcm9wem9uZUlEICE9PSBkcm9wem9uZUlEKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG1hdGNoZWQgY2FudmFzIGRvZXMgbm90IGhhcyBzdWNoIGZpZWxkLCBjcmVhdGUgb25lXHJcbiAgICAgICAgICAgIG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzID0gdXBkYXRlZEZpZWxkcztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgZmllbGRzVG9CZUFkZGVkID0gW107XHJcbiAgICAgICAgICB1cGRhdGVkRmllbGRzLmZvckVhY2goKHVGaWVsZCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmaWVsZEluZGV4ID0gbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMuZmluZEluZGV4KGYgPT4gZi5pZCA9PT0gdUZpZWxkLmlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWVsZEluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICAgIGZpZWxkc1RvQmVBZGRlZC5wdXNoKHVGaWVsZCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMgPSBtYXRjaGVkUGFyZW50Q2FudmFzLmZpZWxkc1xyXG4gICAgICAgICAgICAgICAgLm1hcCgoZiwgaSkgPT4gKGkgPT09IGZpZWxkSW5kZXggPyB1RmllbGQgOiBmKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIGFkZCBuZXcgZmllbGQgdG8gZXhpc3RpbmcgYXJyYXlcclxuICAgICAgICAgIGlmIChmaWVsZHNUb0JlQWRkZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG1hdGNoZWRQYXJlbnRDYW52YXMuZmllbGRzID0gbWF0Y2hlZFBhcmVudENhbnZhcy5maWVsZHMuY29uY2F0KGZpZWxkc1RvQmVBZGRlZCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm5TdGF0dXMgPSB0cnVlO1xyXG5cclxuICAgICAgICAvKiBlc2xpbnQgbm8tZWxzZS1yZXR1cm46IDAgKi9cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgY29uc3QgY2hpbGRGaWVsZHMgPSBmaWVsZHNbaV0uZmllbGRzO1xyXG4gICAgICAgICAgbGV0IHN0YXR1cyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIC8vIGZpZWxkIGhhcyBzdWItZmllbGRzLCBjaGVjayBpbnNpZGUgc3ViLWZpZWxkc1xyXG4gICAgICAgICAgaWYgKGNoaWxkRmllbGRzKSB7XHJcbiAgICAgICAgICAgIHN0YXR1cyA9IHRyYXZlcnNlQW5kVXBkYXRlVHJlZShkcm9wem9uZUlELCBwYXJlbnRJRCwgdXBkYXRlZEZpZWxkcywgY2hpbGRGaWVsZHMpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmV0dXJuU3RhdHVzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBwcml2YXRlIGZ1bmN0aW9uIHRvIHRyaWdnZXIgYWxsIGNoYW5nZSBDQlxyXG4gICAgY29uc3Qgbm90aWZ5U3RhdGVDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgIC8vIHRyaWdnZXIgYWxsIGV2ZW50c1xyXG4gICAgICBldmVudC5jaGFuZ2UuZm9yRWFjaChlID0+IGUoc3RhdGUudHJlZSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBmdW5jdGlvbiB0byB1cGRhdGUgc3RhdGVcclxuICAgIC8vIG9uY2UgdXBkYXRlIGRvbmUsIHRyaWdnZXJzIENCIGFuZCBub3RpZnlTdGF0ZUNoYW5nZVxyXG4gICAgdGhpcy51cGRhdGVTdGF0ZSA9IChkcm9wem9uZUlELCBwYXJlbnRJRCwgZmllbGRzLCBjYiA9ICgpID0+IHt9KSA9PiB7XHJcbiAgICAgIHRyYXZlcnNlQW5kVXBkYXRlVHJlZShkcm9wem9uZUlELCBwYXJlbnRJRCwgZmllbGRzKTtcclxuICAgICAgY2Ioc3RhdGUudHJlZSk7XHJcbiAgICAgIG5vdGlmeVN0YXRlQ2hhbmdlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gcmV0dXJuIGN1cnJlbnQgc3RhdGUgb2YgdHJlZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IC0gc3RhdGUgdHJlZVxyXG4gICAgICovXHJcbiAgICB0aGlzLmdldFN0YXRlID0gKCkgPT4gKHN0YXRlLnRyZWUpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gY2xlYXIgdGhlIHN0YXRlXHJcbiAgICAgKiBsb29wIHRob3VnaCBhbGwgcGFyZW50KGVuZCBsZXZlbCkgbm9kZXMsIGFuZCBjYWxsIGBmbHVzaERyb3BwZWRFbGVtZW50c2AgZnVuY3Rpb25cclxuICAgICAqIHNvIHRoYXQgY29tcG9uZW50IGFzIHdlbGwgYXMgYXBwbGljYXRpb24gc3RhdGUgZ2V0cyBmbHVzaGVkXHJcbiAgICAgKi9cclxuICAgIHRoaXMuY2xlYXJTdGF0ZSA9ICgpID0+IHtcclxuICAgICAgY29uc3Qgcm9vdE5vZGUgPSBzdGF0ZS50cmVlWzBdO1xyXG4gICAgICBjb25zdCB0b3BMZXZlbEZpZWxkcyA9IHJvb3ROb2RlLmZpZWxkcy5sZW5ndGg7XHJcblxyXG4gICAgICByb290Tm9kZS5maWVsZHMuZm9yRWFjaCgodG9wTGV2ZWxFbGVtZW50LCBpKSA9PiB7XHJcbiAgICAgICAgdG9wTGV2ZWxFbGVtZW50LmZsdXNoRHJvcHBlZEVsZW1lbnRzKCgpID0+IHtcclxuICAgICAgICAgIGlmIChpID09PSB0b3BMZXZlbEZpZWxkcyAtIDEpIHtcclxuICAgICAgICAgICAgbm90aWZ5U3RhdGVDaGFuZ2UoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBmdW5jdGlvbiB0byBhZGQgZXZlbnRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcclxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIC0gY2FsbGJhY2tcclxuICAgICAqL1xyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gKGV2ZW50TmFtZSwgY2IpID0+IHtcclxuICAgICAgbGV0IHJldHVybkNCID0gbnVsbDtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBjb3JlLmVycm9yKCdgY2JgIHBhcmFtIGhhcyB0byBiZSBmdW5jdGlvbicpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChldmVudCwgZXZlbnROYW1lKSkge1xyXG4gICAgICAgIGV2ZW50W2V2ZW50TmFtZV0ucHVzaChjYik7XHJcblxyXG4gICAgICAgIHJldHVybkNCID0gY2I7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29yZS5lcnJvcignTm8gc3VjaCBldmVudCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmV0dXJuQ0I7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZnVuY3Rpb24gdG8gcmVtb3ZlIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiAtIGNhbGxiYWNrXHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IChldmVudE5hbWUsIGNiKSA9PiB7XHJcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXZlbnQsIGV2ZW50TmFtZSkpIHtcclxuICAgICAgICBldmVudFtldmVudE5hbWVdID0gZXZlbnRbZXZlbnROYW1lXS5maWx0ZXIoZSA9PiBlICE9PSBjYik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29yZS5lcnJvcignTm8gc3VjaCBldmVudCcpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuY29uc3Qgc3RhdGUgPSBuZXcgU3RhdGUoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0YXRlO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuaW1wb3J0IHN0YXRlIGZyb20gJy4uLy4uL2NvcmUvc3RhdGUnO1xyXG5pbXBvcnQgY29yZSBmcm9tICcuLi8uLi9jb3JlL2NvcmUnO1xyXG5cclxuY2xhc3MgRHJvcHpvbmUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgLy8gY3JlYXRlIHJlZnJlbmNlIGZvciBjYW52YXNcclxuICAgIC8vIHRvIGNoZWNrIHdoZXRoZXIgaXMgZHJhZ2dpbmcgb24gY3VycmVudCBjYW52YXMgb3Igbm90XHJcbiAgICB0aGlzLmNhbnZhc1JlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xyXG5cclxuICAgIC8vIGNvbXBvbmVudCBzdGF0ZVxyXG4gICAgLy8gaW5pdGlhbEVsZW1lbnRzIC0gdG8ga2VlcCB0cmFjayBvZiBpbml0aWFsIGVsZW1lbnRzXHJcbiAgICAvLyBkcm9wcGVkRWxlbWVudHMgLSB0byBrZWVwIHRyYWNrIG9mIG5ld2x5IGFkZGVkIGVsZW1lbnRzXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBpbml0aWFsRWxlbWVudHM6IFtdLFxyXG4gICAgICBkcm9wcGVkRWxlbWVudHM6IFtdXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgdGhpcy5fc2V0SW5pdGlhbEVsZW1lbnRzKHRoaXMucHJvcHMuaW5pdGlhbEVsZW1lbnRzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoeyBpbml0aWFsRWxlbWVudHMgfSkge1xyXG4gICAgdGhpcy5fc2V0SW5pdGlhbEVsZW1lbnRzKGluaXRpYWxFbGVtZW50cyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBmdW5jdGlvbiB0byBzZXQgaW5pdGlhbCBlbGVtZW50c1xyXG4gICAqIEBwYXJhbSBpbml0aWFsRWxlbWVudHMge0FycmF5fSAtIEl0IGhvbGRzIGFsbCBpbml0aWFsIGVsZW1lbnRzIHRvIGJlIHNob3duIGluIGNhbnZhc1xyXG4gICAqL1xyXG4gIF9zZXRJbml0aWFsRWxlbWVudHMgPSAoaW5pdGlhbEVsZW1lbnRzKSA9PiB7XHJcbiAgICAvLyBjdXJyZW50IGNvbXBvbmVudCBzdGF0ZShkcm9wcGVkRWxlbWVudHMpIGRvZXNuJ3QgaG9sZCBhbnkgZWxlbWVudHNcclxuICAgIC8vIGJ1dCBpbml0aWFsRWxlbWVudHMgaGFzIHNvbWUgZWxlbWVudCB0byBiZSBzZXRcclxuICAgIGNvbnN0IGdvdEluaXRpYWxJdGVtcyA9IEFycmF5LmlzQXJyYXkoaW5pdGlhbEVsZW1lbnRzKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEVsZW1lbnRzLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuc3RhdGUuaW5pdGlhbEVsZW1lbnRzLmxlbmd0aDtcclxuXHJcbiAgICAvLyBmb3IgZmlyc3QgdGltZSBhZGQgaW5pdGlhbEVsZW1lbnRzIHRvIGRyb3BwZWRFbGVtZW50c1xyXG4gICAgaWYgKGdvdEluaXRpYWxJdGVtcykge1xyXG4gICAgICBjb25zdCB7IGlkOiBkcm9wem9uZUlEIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgICBjb25zdCB1cGRhdGVkSW5pdGlhbEl0ZW1zID0gaW5pdGlhbEVsZW1lbnRzLm1hcChlID0+ICh7XHJcbiAgICAgICAgLi4uZSxcclxuICAgICAgICBrZXk6IGUuaWQsXHJcbiAgICAgICAgZHJvcHpvbmVJRCxcclxuICAgICAgICBzaG93QmFzaWNDb250ZW50OiBmYWxzZSxcclxuICAgICAgICByZW1vdmVFbGVtZW50OiB0aGlzLl9yZW1vdmVFbGVtZW50LFxyXG4gICAgICAgIGZsdXNoRHJvcHBlZEVsZW1lbnRzOiB0aGlzLl9mbHVzaERyb3BwZWRFbGVtZW50cyxcclxuICAgICAgICBjaGVja0FuZFJlbW92ZUVsZW1lbnQ6IHRoaXMuX2NoZWNrQW5kUmVtb3ZlRWxlbWVudFxyXG4gICAgICB9KSk7XHJcblxyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBpbml0aWFsRWxlbWVudHM6IHVwZGF0ZWRJbml0aWFsSXRlbXMsXHJcbiAgICAgICAgZHJvcHBlZEVsZW1lbnRzOiB1cGRhdGVkSW5pdGlhbEl0ZW1zXHJcbiAgICAgIH0sICgpID0+ICh0aGlzLl91cGRhdGVTdGF0ZSgpKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBmdW5jdGlvbiB0byB0b2dnbGUvbWFuYWdlIGNsYXNzKGluc2lkZSlcclxuICAgKiBjbGFzcyBnZXRzIGFwcGVuZGVkIHRvIGNhbnZhc1xyXG4gICAqIEBwYXJhbSB0YXJnZXQge0RPTX0gLSBjdXJyZW50IGNhbnZhcyB1cG9uIHdoaWNoIHVzZSBpcyBob3ZlcmluZ1xyXG4gICAqIEBwYXJhbSBhY3Rpb24ge1N0cmluZ30gLSBhZGQvcmVtb3ZlIC0gbmFtZSBvZiBhY3Rpb25cclxuICAgKi9cclxuICBfbWFuYWdlSW5zaWRlQ2xhc3MgPSAoeyB0YXJnZXQgfSwgYWN0aW9uKSA9PiB7XHJcbiAgICBpZiAodGhpcy5jYW52YXNSZWYuY3VycmVudCA9PT0gdGFyZ2V0KSB7XHJcbiAgICAgIHRhcmdldC5jbGFzc0xpc3RbYWN0aW9uXSgnaW5zaWRlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBmdW5jdGlvbiB0byByZW1vdmUgZWxlbWVudCBmcm9tIGRyb3BwZWRFbGVtZW50c1xyXG4gICAqIEBwYXJhbSBlbGVtZW50SUQgLSB7U3RyaW5nfSAtIElEIG9mIGVsZW1lbnRcclxuICAgKi9cclxuICBfcmVtb3ZlRWxlbWVudCA9IChlbGVtZW50SUQpID0+IHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zdGF0ZS5kcm9wcGVkRWxlbWVudHMuZmluZEluZGV4KGUgPT4gZS5pZCA9PT0gZWxlbWVudElEKTtcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZHJvcHBlZEVsZW1lbnRzOiB0aGlzLnN0YXRlLmRyb3BwZWRFbGVtZW50cy5maWx0ZXIoKGQsIGkpID0+IChpICE9PSBpbmRleCkpXHJcbiAgICB9LCAoKSA9PiAodGhpcy5fdXBkYXRlU3RhdGUoKSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBhcHBsaWNhdGlvbiBzdGF0ZSAobm90IGNvbXBvbmVudCBzdGF0ZSlcclxuICAgKiBmdW5jdGlvbiB3aWxsIGZ1cnRoZXIgY2FsbCBgdXBkYXRlU3RhdGVgIGZyb20gc3RhdGUgQVBJLCB3aGljaCB1cGRhdGVzIHRoZSBhcHBsaWNhdGlvbiBzdGF0ZVxyXG4gICAqIEBwYXJhbSBjYiB7ZnVuY3Rpb259IC0gY2FsbGJhY2sgZnVuY3Rpb24gLSBvcHRpb25hbFxyXG4gICAqL1xyXG4gIF91cGRhdGVTdGF0ZSA9IChjYiA9ICgpID0+IHt9KSA9PiB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIGlkOiBkcm9wem9uZUlELFxyXG4gICAgICBwYXJlbnRJRFxyXG4gICAgfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgc3RhdGUudXBkYXRlU3RhdGUoXHJcbiAgICAgIGRyb3B6b25lSUQsXHJcbiAgICAgIHBhcmVudElELFxyXG4gICAgICB0aGlzLnN0YXRlLmRyb3BwZWRFbGVtZW50cyxcclxuICAgICAgY2JcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBmdW5jdGlvbiB0byBmbHVzaCB0aGUgY29tcG9uZW50IHN0YXRlXHJcbiAgICogb25jZSBjb21wb25lbnQgc3RhdGUgdGhzIGZsdXNoZWQsIHRoaXMgd2lsbCBjYWxsIGBfdXBkYXRlU3RhdGVgIHRvIHVwZGF0ZSB0aGVcclxuICAgKiBhcHBsaWNhdGlvbiBzdGF0ZVxyXG4gICAqIEBwYXJhbSBjYiB7ZnVuY3Rpb259IC0gY2FsbGJhY2sgZnVuY3Rpb24gLSBvcHRpb25hbFxyXG4gICAqL1xyXG4gIF9mbHVzaERyb3BwZWRFbGVtZW50cyA9IChjYiA9ICgpID0+IHt9KSA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZHJvcHBlZEVsZW1lbnRzOiBbXVxyXG4gICAgfSwgKCkgPT4gKHRoaXMuX3VwZGF0ZVN0YXRlKGNiKSkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZnVuY3Rpb24gY2hlY2sgYmVsb3cgcGFyYW1ldGVyc1xyXG4gICAqIDEgLSB1c2VyJ3MgaW50ZW5kIGlzIHRvIG1vdmUgZWxlbWVudCBmcm9tIG9uZSBjYW52YXMgdG8gb3RoZXJcclxuICAgKiAyIC0gR2V0IGNvbmZpcm1hdGlvbiBiZWZvcmUgcmVtb3ZlXHJcbiAgICogb25jZSBib3RoIGNvbmRpdGlvbiBtYXRjaGVkIHJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIGN1cnJlbnQgY2FudmFzXHJcbiAgICovXHJcbiAgX2NoZWNrQW5kUmVtb3ZlRWxlbWVudCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnRNb3ZlZCA9IGNvcmUuZ2V0RHJhZ2dlZEVsZW1lbnQoKTtcclxuICAgIGNvbnN0IHsgcmVtb3ZlRWxlbWVudCwgZWxlbWVudElEIH0gPSBlbGVtZW50TW92ZWQ7XHJcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLnByb3BzLm9uRWxlbWVudE1vdmUoZWxlbWVudE1vdmVkKTtcclxuICAgIGNvbnN0IGF0dGVtcHRUb01vdmUgPSAhY29yZS5nZXRBdHRlbXB0VG9SZW1vdmUoKTtcclxuXHJcbiAgICBpZiAoc3RhdHVzICYmIGF0dGVtcHRUb01vdmUpIHtcclxuICAgICAgcmVtb3ZlRWxlbWVudChlbGVtZW50SUQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gdXNlciBpcyBkcmFnZ2luZyBvdmVyIHRoZSBjYW52YXNcclxuICAvLyBgcHJldmVudERlZmF1bHRgIC0gUmVxdWlyZWQuIEFsbG93cyB1cyB0byBkcm9wLlxyXG4gIC8vIEBwYXJhbSBlIHtldmVudH1cclxuICBfb25EcmFnT3ZlciA9IChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1c2VyIGlzIGxlYXZpbmcgdGhlIGNhbnZhc1xyXG4gICAqIEBwYXJhbSBlIHtldmVudH1cclxuICAgKi9cclxuICBfb25EcmFnTGVhdmUgPSAoZSkgPT4ge1xyXG4gICAgdGhpcy5fbWFuYWdlSW5zaWRlQ2xhc3MoZSwgJ3JlbW92ZScpO1xyXG4gICAgY29yZS5zZXRBdHRlbXB0VG9SZW1vdmUodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1c2VyIGlzIGRyYWdnaW5nIG92ZXIgY2FudmFzXHJcbiAgICogQHBhcmFtIGUge2V2ZW50fVxyXG4gICAqL1xyXG4gIF9vbkRyYWdFbnRlciA9IChlKSA9PiB7XHJcbiAgICB0aGlzLl9tYW5hZ2VJbnNpZGVDbGFzcyhlLCAnYWRkJyk7XHJcbiAgICBjb3JlLnNldEF0dGVtcHRUb1JlbW92ZShmYWxzZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1c2UgaGFzIGRyb3BwZWQgdGhlIGVsZW1lbnQgaW50byB0aGUgY2FudmFzXHJcbiAgICogcGVyZm9ybSBhbGwgcmVxdWlyZWQgY2hlY2tzXHJcbiAgICogZnVuY3Rpb24gYWxzbyB0cmlnZ2VycyBgb25Ecm9wYCBwcm9wIHNvIHRoYXQgdXNldCBjYW4gcHJvdmlkZSBhZGRpdGlvbmFsIGluZm9cclxuICAgKiBvbmNlIGFsbCBkb25lIGBfYWRkRWxlbWVudGAgZ2V0IGNhbGxlZCB3aXRoIGFsbCByZXF1aXJlZCBpbmZvXHJcbiAgICogQHBhcmFtIGUge2V2ZW50fVxyXG4gICAqL1xyXG4gIF9vbkRyb3AgPSAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICBjb3JlLnNldEF0dGVtcHRUb1JlbW92ZShmYWxzZSk7XHJcbiAgICB0aGlzLl9tYW5hZ2VJbnNpZGVDbGFzcyhlLCAncmVtb3ZlJyk7XHJcblxyXG4gICAgY29uc3QgeyBvbkRyb3AgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UoZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YSgnZGF0YScpKTtcclxuICAgIGRhdGEgPSB7IC4uLmRhdGEgfTtcclxuXHJcbiAgICByZXR1cm4gb25Ecm9wID8gb25Ecm9wKGRhdGEsIHRoaXMuX2FkZEVsZW1lbnQpIDogdGhpcy5fYWRkRWxlbWVudChkYXRhKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIGFkZCBlbGVtZW50IGludG8gZHJvcHBlZEVsZW1lbnRzXHJcbiAgICogcHJpb3IgdG8gYWRkIGl0IHBlcmZvbSBiZWxvdyBjaGVja1xyXG4gICAqIDEgLSBlbGVtZW50IGhhcyB1bmlxdWUga2V5XHJcbiAgICogMiAtIGVsZW1lbnQgaGFzIGludmFsaWQgZGF0YVxyXG4gICAqIDMgLSBjaGVjayBhZ2FpbnN0IG1heC1jYXBhY2l0eVxyXG4gICAqIG9uY2UgZWxlbWVudCBhZGRlZCByZW1vdmUgdGhlIGVsZW1lbnQgZnJvbSBwcmV2aW91cyBjYW52YXNcclxuICAgKiBAcGFyYW0gdXBkYXRlZERhdGEge09iamVjdH0gLSBlbGVtZW50IGluZm9ybWF0aW9uXHJcbiAgICogQHJldHVybnMgT2JqZWN0IC0gbmV3IGxpc3Qgb2YgY2FudmFzIGVsZW1lbnRzXHJcbiAgICovXHJcbiAgX2FkZEVsZW1lbnQgPSAodXBkYXRlZERhdGEpID0+IHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgaWQ6IGRyb3B6b25lSUQsXHJcbiAgICAgIGNhcGFjaXR5XHJcbiAgICB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IGRyYWdnZWRFbGVtZW50ID0gY29yZS5nZXREcmFnZ2VkRWxlbWVudCgpO1xyXG4gICAgY29uc3QgaW52YWxpZFVwZGF0ZWREYXRhID0gIXVwZGF0ZWREYXRhIHx8ICF1cGRhdGVkRGF0YS5pZDtcclxuICAgIGNvbnN0IGtleUFscmVhZHlQcmVzZW50ID0gdXBkYXRlZERhdGEuaWQgJiZcclxuICAgICAgdGhpcy5zdGF0ZS5kcm9wcGVkRWxlbWVudHMuZmlsdGVyKGUgPT4gZS5pZCA9PT0gdXBkYXRlZERhdGEuaWQpLmxlbmd0aDtcclxuXHJcbiAgICAvLyBjaGVjayBmbyB1bmlxdWUga2V5XHJcbiAgICBpZiAoaW52YWxpZFVwZGF0ZWREYXRhIHx8IGtleUFscmVhZHlQcmVzZW50KSB7XHJcbiAgICAgIHJldHVybiBjb3JlLmVycm9yKCdEdXBsaWNhdGUgb3IgaW52YWxpZCBJRCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG1ha2UgbmV3IGxpc3RcclxuICAgIGNvbnN0IG5ld0VsZW1lbnRzID0gdGhpcy5zdGF0ZS5kcm9wcGVkRWxlbWVudHMuY29uY2F0KHtcclxuICAgICAgLi4udXBkYXRlZERhdGEsXHJcbiAgICAgIGtleTogdXBkYXRlZERhdGEuaWQsXHJcbiAgICAgIGRyb3B6b25lSUQsXHJcbiAgICAgIHNob3dCYXNpY0NvbnRlbnQ6IGZhbHNlLFxyXG4gICAgICByZW1vdmVFbGVtZW50OiB0aGlzLl9yZW1vdmVFbGVtZW50LFxyXG4gICAgICBmbHVzaERyb3BwZWRFbGVtZW50czogdGhpcy5fZmx1c2hEcm9wcGVkRWxlbWVudHMsXHJcbiAgICAgIGNoZWNrQW5kUmVtb3ZlRWxlbWVudDogdGhpcy5fY2hlY2tBbmRSZW1vdmVFbGVtZW50XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBjaGVjayBuZXcgbGlzdCBhZ2FpbnN0IG1heC1jYXBhY2l0eVxyXG4gICAgaWYgKGNhcGFjaXR5ICYmIG5ld0VsZW1lbnRzLmxlbmd0aCA+IGNhcGFjaXR5KSB7XHJcbiAgICAgIHJldHVybiBjb3JlLmVycm9yKGBNYXhpbXVtIGNhcGFjaXR5IG9mIGNhbnZhcygke2Ryb3B6b25lSUR9KSBpcyAke2NhcGFjaXR5fWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHVwZGF0ZSB0aGUgY3VycmVudCBsaXN0XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZHJvcHBlZEVsZW1lbnRzOiBuZXdFbGVtZW50c1xyXG4gICAgfSwgKCkgPT4ge1xyXG4gICAgICAvLyByZW1vdmUgZWxlbWVudCBmcm9tIHByZXZpb3VzIGNhbnZhc1xyXG4gICAgICBpZiAoZHJhZ2dlZEVsZW1lbnQgJiYgdHlwZW9mIGRyYWdnZWRFbGVtZW50LmNoZWNrQW5kUmVtb3ZlRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGRyYWdnZWRFbGVtZW50LmNoZWNrQW5kUmVtb3ZlRWxlbWVudCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyB1cGRhdGUgdGhlIGFwcGxpY2F0aW9uIHN0YXRlXHJcbiAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBkcm9wem9uZUlELFxyXG4gICAgICBlbGVtZW50czogbmV3RWxlbWVudHNcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBmdW5jdGlvbiB0byByZW5kZXIgdGhlIGRyYWdnZWQgZWxlbWVudFxyXG4gICAqIEBwYXJhbSBwcm9wcyB7T2JqZWN0fSAtIEFuIG9iamVjdCB3aGljaCBob2xkIHRoZSBpbmZvIG9mIGRyYWdnZWQgZWxlbWVudC9jb21wb25lbnRcclxuICAgKiBAcmV0dXJucyBKU1hcclxuICAgKi9cclxuICBfcmVuZGVyRHJhZ0l0ZW0gPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBjb3JlLmdldFJlZ2lzdGVyZWRQYWxldHRlRWxlbWVudHMoKS5maW5kKGUgPT4gZS50eXBlID09PSBwcm9wcy50eXBlKTtcclxuICAgIHJldHVybiBlbGVtZW50ID8gPGVsZW1lbnQuY29tcG9uZW50IHsuLi5wcm9wc30gLz4gOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBkcm9wcGVkRWxlbWVudHMgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7IGNhcGFjaXR5LCBpZCwgcGxhY2Vob2xkZXIgfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdlxyXG4gICAgICAgIHJlZj17dGhpcy5jYW52YXNSZWZ9XHJcbiAgICAgICAgY2xhc3NOYW1lPXtgJHtjYXBhY2l0eSAmJiBjYXBhY2l0eSA9PT0gZHJvcHBlZEVsZW1lbnRzLmxlbmd0aCA/ICduby1zcGFjZScgOiAnJ30gJHtpZCA9PT0gJ3Jvb3QnID8gJ2NhbnZhcycgOiAnJ30gJHshZHJvcHBlZEVsZW1lbnRzLmxlbmd0aCA/ICdlbXB0eScgOiAnJ30gZHJvcHpvbmVgfVxyXG4gICAgICAgIG9uRHJhZ092ZXI9e3RoaXMuX29uRHJhZ092ZXJ9XHJcbiAgICAgICAgb25EcmFnTGVhdmU9e3RoaXMuX29uRHJhZ0xlYXZlfVxyXG4gICAgICAgIG9uRHJhZ0VudGVyPXt0aGlzLl9vbkRyYWdFbnRlcn1cclxuICAgICAgICBvbkRyb3A9e3RoaXMuX29uRHJvcH1cclxuICAgICAgICBvbkRyYWdFbmQ9e3RoaXMuX29uRHJhZ0VuZH1cclxuICAgICAgPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGRyb3BwZWRFbGVtZW50cy5tYXAoZSA9PiAoXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckRyYWdJdGVtKHsgLi4uZSB9KVxyXG4gICAgICAgICAgKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICFkcm9wcGVkRWxlbWVudHMubGVuZ3RoID9cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZHJvcHpvbmUtcGxhY2Vob2xkZXJcIj57cGxhY2Vob2xkZXJ9PC9wPiA6IG51bGxcclxuICAgICAgICB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbkRyb3B6b25lLnByb3BUeXBlcyA9IHtcclxuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gIGNhcGFjaXR5OiBQcm9wVHlwZXMubnVtYmVyLFxyXG4gIG9uRHJvcDogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgb25FbGVtZW50TW92ZTogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgaW5pdGlhbEVsZW1lbnRzOiBQcm9wVHlwZXMuYXJyYXlPZihPYmplY3QpLFxyXG4gIHBhcmVudElEOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmdcclxufTtcclxuXHJcbkRyb3B6b25lLmRlZmF1bHRQcm9wcyA9IHtcclxuICBpbml0aWFsRWxlbWVudHM6IFtdLFxyXG4gIHBsYWNlaG9sZGVyOiAnRHJvcCBIZXJlJyxcclxuICBvbkVsZW1lbnRNb3ZlOiAoKSA9PiAodHJ1ZSlcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERyb3B6b25lO1xyXG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLyogVmVyeSBiYXNpYyBzdHlsZSAqL1xcclxcblxcclxcbi8qIFByZXZlbnQgdGhlIHRleHQgY29udGVudHMgb2YgZHJhZ2dhYmxlIGVsZW1lbnRzIGZyb20gYmVpbmcgc2VsZWN0YWJsZS4gKi9cXHJcXG5bZHJhZ2dhYmxlXSB7XFxyXFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lO1xcclxcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXHJcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcclxcblxcclxcbiAgLyogUmVxdWlyZWQgdG8gbWFrZSBlbGVtZW50cyBkcmFnZ2FibGUgaW4gb2xkIFdlYktpdCAqL1xcclxcbiAgLWtodG1sLXVzZXItZHJhZzogZWxlbWVudDtcXHJcXG4gIC13ZWJraXQtdXNlci1kcmFnOiBlbGVtZW50O1xcclxcbn1cXHJcXG5cXHJcXG4vKiBjbGFzcyBnZXRzIGFwcGVuZGVkIHRvIGNhbnZhcyB3aGVuIHVzZXIgZHJhZ2dpbmcgb3ZlciBvbiBpdCAqL1xcclxcbi5pbnNpZGUge1xcclxcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDAgMjZweCAwLjVweCByZ2JhKDIwLCAxODAsIDgxLCAwLjc1KTtcXHJcXG4gIC1tb3otYm94LXNoYWRvdzogaW5zZXQgMCAwIDI2cHggMC41cHggcmdiYSgyMCwgMTgwLCA4MSwgMC43NSk7XFxyXFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMjZweCAwLjVweCByZ2JhKDIwLCAxODAsIDgxLCAwLjc1KTtcXHJcXG59XFxyXFxuXFxyXFxuLnRyYXNoLWJveC5pbnNpZGUsXFxyXFxuLmRyb3B6b25lLmluc2lkZS5uby1zcGFjZSB7XFxyXFxuICAtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgMCAyNnB4IDAuNXB4IHJnYmEoMjMwLCAyMywgMjMsIDAuNSk7XFxyXFxuICAtbW96LWJveC1zaGFkb3c6IGluc2V0IDAgMCAyNnB4IDAuNXB4IHJnYmEoMjMwLCAyMywgMjMsIDAuNzUpO1xcclxcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDI2cHggMC41cHggcmdiYSgyMzAsIDIzLCAyMywgMC43NSk7XFxyXFxufVxcclxcblxcclxcbi5kcm9wem9uZSB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgYmFja2dyb3VuZDogI2YwZmFmZjtcXHJcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMwMjc3YmQ7XFxyXFxufVxcclxcblxcclxcbi5kcm9wem9uZS5lbXB0eSB7XFxyXFxuICBwYWRkaW5nOiA0MHB4O1xcclxcbn1cXHJcXG5cXHJcXG4ucGFsZXR0ZSB7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgYmFja2dyb3VuZDogI2ZmZjtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICBib3JkZXI6IDFweCBzb2xpZCAjMDE1NzliO1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhZy1pdGVtIHtcXHJcXG4gIHBhZGRpbmc6IDEwcHg7XFxyXFxuICBjb2xvcjogIzAxNTc5YjtcXHJcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjNlNWZjO1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgIzAxNTc5YjtcXHJcXG59XFxyXFxuXFxyXFxuLmRyb3B6b25lLXBsYWNlaG9sZGVyIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbiAgY29sb3I6ICMwMTU3OWI7XFxyXFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBsZWZ0OiAwO1xcclxcbiAgdG9wOiBjYWxjKDUwJSAtIDEwcHgpO1xcclxcbiAgYW5pbWF0aW9uLW5hbWU6IGNoYW5nZUNvbG9yO1xcclxcbiAgYW5pbWF0aW9uLWR1cmF0aW9uOiAycztcXHJcXG4gIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW4tb3V0O1xcclxcbiAgYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgY2hhbmdlQ29sb3Ige1xcclxcbiAgMjUlIHtcXHJcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gIDc1JSB7XFxyXFxuICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XFxyXFxuICAgIG9wYWNpdHk6IDAuNTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuLnBhbGV0dGUtd3JhcHBlciAuZHJhZy1pdGVtIHtcXHJcXG4gIGNvbG9yOiAjZmZmO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAxNTc5YjtcXHJcXG59XFxyXFxuXFxyXFxuLmRyYWctaXRlbSArIGRpdiB7XFxyXFxuICBtYXJnaW4tdG9wOiAxMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4udHJhc2gtYm94IHtcXHJcXG4gIHBhZGRpbmc6IDMwcHggMTBweDtcXHJcXG4gIG1hcmdpbjogMTBweCAwO1xcclxcbiAgY29sb3I6ICNiNzFjMWM7XFxyXFxuICBiYWNrZ3JvdW5kOiAjZmZjZGQyO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgYm9yZGVyOiAxcHggc29saWQgI2I3MWMxYztcXHJcXG59XFxyXFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vc3R5bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmltcG9ydCBjb3JlIGZyb20gJy4uLy4uL2NvcmUvY29yZSc7XHJcblxyXG5jbGFzcyBUcmFzaCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgcmVmcmVuY2UgZm9yIHRyYXNoXHJcbiAgICAvLyB0byBjaGVjayB3aGV0aGVyIGlzIGRyYWdnaW5nIG9uIHRyYXNoIGJveCBvciBub3RcclxuICAgIHRoaXMudHJhc2hSZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZ1bmN0aW9uIHRvIHRvZ2dsZS9tYW5hZ2UgY2xhc3MoaW5zaWRlKVxyXG4gICAqIGNsYXNzIGdldHMgYXBwZW5kZWQgdG8gY2FudmFzXHJcbiAgICogQHBhcmFtIHRhcmdldCB7RE9NfSAtIGN1cnJlbnQgY2FudmFzIHVwb24gd2hpY2ggdXNlIGlzIGhvdmVyaW5nXHJcbiAgICogQHBhcmFtIGFjdGlvbiB7U3RyaW5nfSAtIGFkZC9yZW1vdmUgLSBuYW1lIG9mIGFjdGlvblxyXG4gICAqL1xyXG4gIF9tYW5hZ2VJbnNpZGVDbGFzcyA9ICh7IHRhcmdldCB9LCBhY3Rpb24pID0+IHtcclxuICAgIGlmICh0aGlzLnRyYXNoUmVmLmN1cnJlbnQgPT09IHRhcmdldCkge1xyXG4gICAgICB0YXJnZXQuY2xhc3NMaXN0W2FjdGlvbl0oJ2luc2lkZScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX29uRHJvcCA9IChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgIC8vIGdldCBkcmFnZ2VkIGVsZW1lbnRcclxuICAgIGNvbnN0IGVsZW1lbnRUb0JlVHJhc2hlZCA9IGNvcmUuZ2V0RHJhZ2dlZEVsZW1lbnQoKTtcclxuXHJcbiAgICAvLyBkb250IGFsbG93IGVsZW1lbnRzIHdoaWNoIGRpcmVjdGx5IGNvbWluZyBmcm9tIHBhbGV0dGVcclxuICAgIGlmICghZWxlbWVudFRvQmVUcmFzaGVkKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IG9uQmVmb3JlVHJhc2gsIG9uQWZ0ZXJUcmFzaCB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgcmVtb3ZlRWxlbWVudCB9ID0gZWxlbWVudFRvQmVUcmFzaGVkO1xyXG4gICAgY29uc3Qgc3RhdHVzID0gb25CZWZvcmVUcmFzaChlbGVtZW50VG9CZVRyYXNoZWQpO1xyXG5cclxuICAgIHRoaXMuX21hbmFnZUluc2lkZUNsYXNzKGUsICdyZW1vdmUnKTtcclxuXHJcbiAgICAvLyB1c2VyIHRyaWVkIGFuZCBjb25maXJtIHRvIHJlbW92ZSBlbGVtZW50XHJcbiAgICBpZiAoc3RhdHVzICYmIGNvcmUuZ2V0QXR0ZW1wdFRvUmVtb3ZlKCkpIHtcclxuICAgICAgLy8gcmVtb3ZlIGVsZW1lbnQgZnJvbSBjdXJyZW50IGNhbnZhc1xyXG4gICAgICByZW1vdmVFbGVtZW50KGVsZW1lbnRUb0JlVHJhc2hlZC5lbGVtZW50SUQpO1xyXG5cclxuICAgICAgLy8gZG9uZSBkcmFnZ2luZywgZmx1c2ggdGhlIGRyYWdnZWQgZWxlbWVudFxyXG4gICAgICBjb3JlLnNldERyYWdnZWRFbGVtZW50KG51bGwpO1xyXG5cclxuICAgICAgLy8gYWNrbm93bGVkZ2VcclxuICAgICAgb25BZnRlclRyYXNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVzZXQgYXR0ZW1wdCB0byByZW1vdmVcclxuICAgIGNvcmUuc2V0QXR0ZW1wdFRvUmVtb3ZlKGZhbHNlKTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIHVzZXIgaXMgZHJhZ2dpbmcgb3ZlciB0aGUgdHJhc2hcclxuICAvLyBgcHJldmVudERlZmF1bHRgIC0gUmVxdWlyZWQuIEFsbG93cyB1cyB0byBkcm9wLlxyXG4gIC8vIEBwYXJhbSBlIHtldmVudH1cclxuICBfb25EcmFnT3ZlciA9IChlKSA9PiB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1c2VyIGlzIGxlYXZpbmcgdGhlIHRyYXNoXHJcbiAgICogQHBhcmFtIGUge2V2ZW50fVxyXG4gICAqL1xyXG4gIF9vbkRyYWdMZWF2ZSA9IChlKSA9PiB7XHJcbiAgICB0aGlzLl9tYW5hZ2VJbnNpZGVDbGFzcyhlLCAncmVtb3ZlJyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1c2VyIGlzIGRyYWdnaW5nIG92ZXIgdHJhc2hcclxuICAgKiBAcGFyYW0gZSB7ZXZlbnR9XHJcbiAgICovXHJcbiAgX29uRHJhZ0VudGVyID0gKGUpID0+IHtcclxuICAgIGNvbnN0IGVsZW1lbnRUb0JlVHJhc2hlZCA9IGNvcmUuZ2V0RHJhZ2dlZEVsZW1lbnQoKTtcclxuXHJcbiAgICBpZiAoZWxlbWVudFRvQmVUcmFzaGVkKSB7XHJcbiAgICAgIHRoaXMuX21hbmFnZUluc2lkZUNsYXNzKGUsICdhZGQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXZcclxuICAgICAgICByZWY9e3RoaXMudHJhc2hSZWZ9XHJcbiAgICAgICAgY2xhc3NOYW1lPVwidHJhc2gtYm94XCJcclxuICAgICAgICBvbkRyYWdMZWF2ZT17dGhpcy5fb25EcmFnTGVhdmV9XHJcbiAgICAgICAgb25EcmFnRW50ZXI9e3RoaXMuX29uRHJhZ0VudGVyfVxyXG4gICAgICAgIG9uRHJhZ092ZXI9e3RoaXMuX29uRHJhZ092ZXJ9XHJcbiAgICAgICAgb25Ecm9wPXt0aGlzLl9vbkRyb3B9XHJcbiAgICAgID5cclxuICAgICAgICB7IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgPHNwYW4+VHJhc2ggQm94PC9zcGFuPiB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcblRyYXNoLnByb3BUeXBlcyA9IHtcclxuICBvbkJlZm9yZVRyYXNoOiBQcm9wVHlwZXMuZnVuYyxcclxuICBvbkFmdGVyVHJhc2g6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcclxuICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5lbGVtZW50KSxcclxuICAgIFByb3BUeXBlcy5lbGVtZW50XHJcbiAgXSksXHJcbn07XHJcblxyXG5UcmFzaC5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgb25CZWZvcmVUcmFzaDogKCkgPT4gKHRydWUpLFxyXG4gIG9uQWZ0ZXJUcmFzaDogKCkgPT4gKHRydWUpXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUcmFzaDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmltcG9ydCBjb3JlIGZyb20gJy4uLy4uL2NvcmUvY29yZSc7XHJcblxyXG5jbGFzcyBQYWxldHRlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAvKipcclxuICAgKiBmdW5jdGlvbiB0byByZW5kZXIgdGhlIGRyYWdnZWQgZWxlbWVudFxyXG4gICAqIEBwYXJhbSBwcm9wcyB7T2JqZWN0fSAtIEFuIG9iamVjdCB3aGljaCBob2xkIHRoZSBpbmZvIG9mIGRyYWdnZWQgZWxlbWVudC9jb21wb25lbnRcclxuICAgKiBAcmV0dXJucyBKU1hcclxuICAgKi9cclxuICBfcmVuZGVyTGlzdCA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgZWxlbWVudCA9IGNvcmUuZ2V0UmVnaXN0ZXJlZFBhbGV0dGVFbGVtZW50cygpLmZpbmQoZSA9PiBlLnR5cGUgPT09IHByb3BzLnR5cGUpO1xyXG4gICAgcmV0dXJuIGVsZW1lbnQgPyA8ZWxlbWVudC5jb21wb25lbnQgey4uLnByb3BzfSAvPiA6IG51bGw7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IHBhbGV0dGVFbGVtZW50cyB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhbGV0dGVcIj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICBwYWxldHRlRWxlbWVudHMubWFwKGl0ZW0gPT4gKFxyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJMaXN0KHsgLi4uaXRlbSwga2V5OiBpdGVtLmlkLCBzaG93QmFzaWNDb250ZW50OiB0cnVlIH0pXHJcbiAgICAgICAgICApKVxyXG4gICAgICAgIH1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuUGFsZXR0ZS5wcm9wVHlwZXMgPSB7XHJcbiAgcGFsZXR0ZUVsZW1lbnRzOiBQcm9wVHlwZXMuYXJyYXlPZigocHJvcFZhbHVlKSA9PiB7XHJcbiAgICBsZXQgaXNFcnJvciA9IGZhbHNlO1xyXG5cclxuICAgIC8vIGFsbCBwYWxldHRlIGVsZW1lbnRzIHNob3VsZCBoYXZlIHVuaXF1ZSBJRFxyXG4gICAgcHJvcFZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgaWYgKGl0ZW0gJiYgIWl0ZW0uaWQpIHtcclxuICAgICAgICBpc0Vycm9yID0gJ2BpZGAgaXMgcmVxdWlyZWQgaW4gYWxsIHBhbGV0dGUgZWxlbWVudCc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwcm9wVmFsdWUuZmlsdGVyKGkgPT4gaS5pZCA9PT0gaXRlbS5pZCkubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIGlzRXJyb3IgPSAnYGlkYCBvZiBwYWxldHRlIGVsZW1lbnQgc2hvdWxkIGJlIHVuaXF1ZSc7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBpc0Vycm9yID8gbmV3IEVycm9yKGlzRXJyb3IpIDogdHJ1ZTtcclxuICB9KVxyXG59O1xyXG5cclxuUGFsZXR0ZS5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgcGFsZXR0ZUVsZW1lbnRzOiBbXVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGFsZXR0ZTtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcclxuXHJcbmltcG9ydCBjb3JlIGZyb20gJy4uLy4uL2NvcmUvY29yZSc7XHJcblxyXG5jbGFzcyBEcmFnZ2FibGUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIF9kcmFnRW5kID0gKGUpID0+IHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgLy8gZG9uZSBkcmFnZ2luZywgcmVzZXQgZHJhZ2dlZCBlbGVtZW50XHJcbiAgICBjb3JlLnNldERyYWdnZWRFbGVtZW50KG51bGwpO1xyXG4gIH1cclxuXHJcbiAgX2RyYWdTdGFydCA9IChlKSA9PiB7XHJcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgIGNvbnN0IHtcclxuICAgICAgaWQsXHJcbiAgICAgIHR5cGUsXHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIHBheWxvYWQsXHJcbiAgICAgIGRyb3B6b25lSUQsXHJcbiAgICAgIHJlbW92ZUVsZW1lbnQsXHJcbiAgICAgIGNoZWNrQW5kUmVtb3ZlRWxlbWVudFxyXG4gICAgfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IHtcclxuICAgICAgaWQsXHJcbiAgICAgIHR5cGUsXHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIHBheWxvYWRcclxuICAgIH07XHJcblxyXG4gICAgZS5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9ICdjb3B5JztcclxuICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ2RhdGEnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7IC8vIHJlcXVpcmVkLCB3ZSBjYW5uJ3QgcGFzcyBKUyBvYmplY3RcclxuXHJcbiAgICAvLyBpZiBlbGVtZW50IGlzIGFscmVhZHkgcHJlc2VudCBpbiBzb21lIGNhbnZhc1xyXG4gICAgLy8gdGhlbiBzZXQgZHJhZ2dlZEVsZW1lbnQsIHNvIHRoYXQgdGhpcyB3aWxsIGhlbHAgdG8gcmVtb3ZlIHRoZSBlbGVtZW50IGZyb20gcHJldmlvdXMgY2FudmFzXHJcbiAgICBpZiAoZHJvcHpvbmVJRCkge1xyXG4gICAgICBjb3JlLnNldERyYWdnZWRFbGVtZW50KHtcclxuICAgICAgICBlbGVtZW50SUQ6IGlkLFxyXG4gICAgICAgIGRyb3B6b25lSUQsXHJcbiAgICAgICAgcmVtb3ZlRWxlbWVudCxcclxuICAgICAgICBjaGVja0FuZFJlbW92ZUVsZW1lbnRcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGVsZW1lbnRQcm9wcyB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgY2xhc3NOYW1lPVwiZHJhZy1pdGVtXCJcclxuICAgICAgICBvbkRyYWdTdGFydD17dGhpcy5fZHJhZ1N0YXJ0fVxyXG4gICAgICAgIG9uRHJhZ0VuZD17dGhpcy5fZHJhZ0VuZH1cclxuICAgICAgICBkcmFnZ2FibGVcclxuICAgICAgICB7Li4uZWxlbWVudFByb3BzfVxyXG4gICAgICA+XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxyXG4gICAgICAgIH1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuRHJhZ2dhYmxlLnByb3BUeXBlcyA9IHtcclxuICBpZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxyXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgZHJvcHpvbmVJRDogUHJvcFR5cGVzLnN0cmluZyxcclxuICBwYXlsb2FkOiBQcm9wVHlwZXMuaW5zdGFuY2VPZihPYmplY3QpLFxyXG4gIGVsZW1lbnRQcm9wczogUHJvcFR5cGVzLmluc3RhbmNlT2YoT2JqZWN0KSxcclxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXHJcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xyXG4gICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLmVsZW1lbnQpLFxyXG4gICAgUHJvcFR5cGVzLmVsZW1lbnRcclxuICBdKS5pc1JlcXVpcmVkLFxyXG4gIHJlbW92ZUVsZW1lbnQ6IFByb3BUeXBlcy5mdW5jLFxyXG4gIGNoZWNrQW5kUmVtb3ZlRWxlbWVudDogUHJvcFR5cGVzLmZ1bmNcclxufTtcclxuXHJcbkRyYWdnYWJsZS5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgY2hlY2tBbmRSZW1vdmVFbGVtZW50OiAoKSA9PiAodHJ1ZSksXHJcbiAgZWxlbWVudFByb3BzOiBudWxsLFxyXG4gIHBheWxvYWQ6IG51bGxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IERyYWdnYWJsZTtcclxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogXG4gKi9cblxuZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgYW5kIGRpc2NhcmRzIGlucHV0czsgaXQgaGFzIG5vIHNpZGUgZWZmZWN0cy4gVGhpcyBpc1xuICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2hcbiAqIGFsd2F5cyBuZWVkIHRvIGJlIGNhbGxhYmxlLCBzaW5jZSBKUyBsYWNrcyBhIG51bGwtY2FsbCBpZGlvbSBhbGEgQ29jb2EuXG4gKi9cbnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9O1xuXG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKHRydWUpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiBhcmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5RnVuY3Rpb247IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IERyb3B6b25lIGZyb20gJy4uL0Ryb3B6b25lL0Ryb3B6b25lJztcclxuXHJcbi8vIGR1bXAgY29tcG9uZW50IHdoaWNoIGV4dGVuZHMgRHJvcHpvbmUgYnV0IHdpdGggc29tZSBmaXhlZCBwcm9wZXJ0aWVzIC0gaWQgYW5kIHBhcmVudElEXHJcbi8vIGJvdGggcHJvcHMgc2V0IHRvIGByb290YCAtIHJlcXVpcmVkIHNpbmNlIGFwcGxpY2F0aW9uIHN0YXRlIGhvbGRzIGByb290YCBhcyBwYXJlbnQgbm9kZVxyXG5jb25zdCBDYW52YXMgPSBwcm9wcyA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9XCJtYWluLWNhbnZhc1wiPlxyXG4gICAgPERyb3B6b25lIHsuLi5wcm9wc30gcGFyZW50SUQ9XCJyb290XCIgaWQ9XCJyb290XCIgLz5cclxuICA8L2Rpdj5cclxuKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhbnZhcztcclxuIiwiLy8gaW1wb3J0IGFsbCBjb21wb25lbnRzXHJcbmltcG9ydCBDYW52YXMgZnJvbSAnLi9jb21wb25lbnRzL0NhbnZhcy9DYW52YXMnO1xyXG5pbXBvcnQgRHJvcHpvbmUgZnJvbSAnLi9jb21wb25lbnRzL0Ryb3B6b25lL0Ryb3B6b25lJztcclxuaW1wb3J0IERyYWdnYWJsZSBmcm9tICcuL2NvbXBvbmVudHMvRHJhZ2dhYmxlL0RyYWdnYWJsZSc7XHJcbmltcG9ydCBQYWxldHRlIGZyb20gJy4vY29tcG9uZW50cy9QYWxldHRlL1BhbGV0dGUnO1xyXG5pbXBvcnQgVHJhc2ggZnJvbSAnLi9jb21wb25lbnRzL1RyYXNoL1RyYXNoJztcclxuXHJcbi8vIGltcG9ydCBhbGwgQVBJJ3NcclxuaW1wb3J0IHN0YXRlIGZyb20gJy4vY29yZS9zdGF0ZSc7XHJcbmltcG9ydCBjb3JlIGZyb20gJy4vY29yZS9jb3JlJztcclxuXHJcbi8vIGltcG9ydCBiYXNpYyBzdHlsZVxyXG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIC8vIGFsbCBjb21wb25lbnRzXHJcbiAgQ2FudmFzLFxyXG4gIERyb3B6b25lLFxyXG4gIERyYWdnYWJsZSxcclxuICBQYWxldHRlLFxyXG4gIFRyYXNoLFxyXG5cclxuICAvLyBhbGwgb3BlbiBBUEknc1xyXG4gIHN0YXRlLFxyXG4gIGNvcmUsXHJcblxyXG4gIC8vIHNpbmNlIHRoaXMgaXMgcmV1aXJlZCBmdW5jdGlvbiwga2VlcGluZyBzZXByYXRlXHJcbiAgcmVnaXN0ZXJQYWxldHRlRWxlbWVudHM6IGNvcmUucmVnaXN0ZXJQYWxldHRlRWxlbWVudHNcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==
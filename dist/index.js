module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=19)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={};this.getAttemptToRemove=function(){return t.attemptToRemove},this.setAttemptToRemove=function(e){t.attemptToRemove=e},this.setDraggedElement=function(e){t.draggedElement=e},this.getDraggedElement=function(){return t.draggedElement},this.registerPaletteElements=function(e){t.registeredPaletteElements=e},this.getRegisteredPaletteElements=function(){return t.registeredPaletteElements},this.setDropPostion=function(e){t.dropPosition=e},this.getDropPostion=function(){return t.dropPosition},this.error=function(e){return console.error(e),!1},this.log=function(e){return console.log(e),!0}};t.default=r},function(e,t){e.exports=require("react")},function(e,t,n){e.exports=n(17)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0),a=(r=o)&&r.__esModule?r:{default:r};var i=new function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t={},n={change:[]};t.tree=[{id:"root",fields:[]}];var r=function(){n.change.forEach(function(e){return e(t.tree)})};this.updateState=function(e,n,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){};!function e(n,r,o){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t.tree,i=a.find(function(e){return e.id===r}),s=!1;if(i){if(n===r)i.fields=o;else if(i.fields&&o.length){var l=[];i.fields.filter(function(e){return e.dropzoneID===n}).length!==o.length?i.fields=o.concat(i.fields.filter(function(e){return e.dropzoneID!==n})):o.forEach(function(e){var t=i.fields.findIndex(function(t){return t.id===e.id});-1===t?l.push(e):i.fields=i.fields.map(function(n,r){return r===t?e:n})}),l.length&&(i.fields=i.fields.concat(l))}else n&&i.fields?i.fields=i.fields.filter(function(e){return e.dropzoneID!==n}):i.fields=o;s=!0}else for(var u=0;u<a.length;u++){var f=a[u].fields,c=!1;if(f&&(c=e(n,r,o,f)),c)break}return s}(e,n,o),a(t.tree),r()},this.getState=function(){return t.tree},this.clearState=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=t.tree[0],o=n.fields.length;return n.fields.length||(r(),e()),n.fields.forEach(function(t,n){t.flushDroppedElements(function(){n===o-1&&(r(),e())})}),!0},this.addEventListener=function(e,t){var r=null;return"function"!=typeof t?(a.default.error("`cb` param has to be function"),!1):(Object.prototype.hasOwnProperty.call(n,e)?(n[e].push(t),r=t):a.default.error("No such event"),r)},this.removeEventListener=function(e,t){Object.prototype.hasOwnProperty.call(n,e)?n[e]=n[e].filter(function(e){return e!==t}):a.default.error("No such event")}};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=f(a),s=f(n(2)),l=f(n(3)),u=f(n(0));function f(e){return e&&e.__esModule?e:{default:e}}function c(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return p.call(n),n.canvasRef=i.default.createRef(),n.state={initialElements:[],droppedElements:[],initDone:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillMount",value:function(){this._setInitialElements(this.props.initialElements)}},{key:"componentWillReceiveProps",value:function(e){var t=e.initialElements;this._setInitialElements(t)}},{key:"render",value:function(){var e=this,t=this.state.droppedElements,n=this.props,o=n.capacity,a=n.id,s=n.placeholder,l=!o||o>t.length;return i.default.createElement("div",{ref:this.canvasRef,className:(l?"":"no-space")+" "+("root"===a?"canvas":"")+" "+(t.length?"":"empty")+" dropzone",onDragOver:this._onDragOver,onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDrop:this._onDrop,onDragEnd:this._onDragEnd},t.map(function(t,n){return e._renderDragItem(r({},t,{index:n,spaceAvailable:l,initDone:e.state.initDone,dropzoneProps:{initDone:e.state.initDone,parentID:t.id}}))}),t.length?null:i.default.createElement("p",{className:"dropzone-placeholder"},s))}}]),t}(),p=function(){var e=this;this.dangerouslySetElements=function(t,n){var o=[];o="function"==typeof t?t(e.state.droppedElements)||[]:t;var a=e.props.id;o=o.map(function(t){return r({},t,{dropzoneID:a,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})}),e.setState({initialElements:o,droppedElements:o},function(){return e._updateState(n)})},this._unmarkDragElements=function(){[].forEach.call(e.canvasRef.current.querySelectorAll(".drag-item"),function(e){return e.classList.remove("before","after")})},this._setInitialElements=function(t){if(Array.isArray(t)&&t.length&&!e.state.initialElements.length){var n=e.props.id,o=t.map(function(t){return r({},t,{key:t.id,dropzoneID:n,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement})});e.setState({initialElements:o,droppedElements:o},function(){return e._updateState(function(){e.setState({initDone:!0})})})}},this._manageInsideClass=function(t,n){var r=t.target;e.canvasRef.current===r&&r.classList[n]("inside")},this._removeElement=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},r=e.state.droppedElements.findIndex(function(e){return e.id===t});e.setState({droppedElements:e.state.droppedElements.filter(function(e,t){return t!==r})},function(){return e._updateState(n)})},this._updateState=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){},n=e.props,r=n.id,o=n.parentID;l.default.updateState(r,o,e.state.droppedElements,t)},this._flushDroppedElements=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};e.setState({initialElements:[],droppedElements:[]},function(){return e._updateState(t)})},this._checkAndRemoveElement=function(){var t=u.default.getDraggedElement(),n=t.removeElement,r=t.elementID,o=e.props.onElementMove(t),a=!u.default.getAttemptToRemove();o&&a&&n(r)},this._onDragOver=function(e){e.preventDefault(),e.stopPropagation()},this._onDragLeave=function(t){e._manageInsideClass(t,"remove"),u.default.setAttemptToRemove(!0)},this._onDragEnter=function(t){e._manageInsideClass(t,"add"),u.default.setAttemptToRemove(!1)},this._onDrop=function(t){t.preventDefault(),t.stopPropagation(),u.default.setAttemptToRemove(!1),e._manageInsideClass(t,"remove");var n=e.props.onDrop,o=JSON.parse(t.dataTransfer.getData("data"));return o=r({},o),e._unmarkDragElements(),n?n(o,e._addElement,{dropIndex:u.default.getDropPostion()+1,currentElements:e.state.droppedElements}):e._addElement(o)},this._addElement=function(t){var n=e.props,o=n.id,a=n.capacity,i=u.default.getDropPostion(),s=u.default.getDraggedElement(),l=!t||!t.id,f=-1,d=t.id&&e.state.droppedElements.filter(function(e,n){return e.id===t.id&&(f=n,!0)}).length,p=f===i,m=[].concat(e.state.droppedElements),h=!1;if(l||d){if(p)return u.default.error("Duplicate or invalid ID");h=!0,m=m.map(function(e){return e.id===t.id?r({},e,{remove:!0}):e})}var v=r({},t,{key:t.id,dropzoneID:o,showBasicContent:!1,updateState:e._updateState,removeElement:e._removeElement,flushDroppedElements:e._flushDroppedElements,checkAndRemoveElement:e._checkAndRemoveElement});return m=i>0?[].concat(c(m.slice(0,i)),[v],c(m.slice(i))):[v].concat(c(m)),p||(m=m.filter(function(e){return!e.remove})),a&&m.length>a?u.default.error("Maximum capacity of canvas("+o+") is "+a):(e.setState({droppedElements:m},function(){!h&&s&&"function"==typeof s.checkAndRemoveElement&&s.checkAndRemoveElement(),e._updateState()}),{dropzoneID:o,elements:m})},this._renderDragItem=function(e){var t=u.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null}};d.propTypes={id:s.default.string.isRequired,capacity:s.default.number,onDrop:s.default.func,onElementMove:s.default.func,initialElements:s.default.arrayOf(Object),parentID:s.default.string.isRequired,placeholder:s.default.oneOf([s.default.string,s.default.node])},d.defaultProps={initialElements:[],placeholder:"Drop Here",onElementMove:function(){return!0}},t.default=d},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,f=[],c=n(5);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(b(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(b(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function m(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=f[f.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=u++;n=l||(l=v(t)),r=_.bind(null,n,i,!1),o=_.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",g(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=c(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var y,E=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=E(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},function(e,t,n){(e.exports=n(7)(!1)).push([e.i,"/* Very basic style */\r\n\r\n/* Prevent the text contents of draggable elements from being selectable. */\r\n[draggable] {\r\n  -moz-user-select: none;\r\n  -khtml-user-select: none;\r\n  -webkit-user-select: none;\r\n  user-select: none;\r\n\r\n  /* Required to make elements draggable in old WebKit */\r\n  -khtml-user-drag: element;\r\n  -webkit-user-drag: element;\r\n}\r\n\r\n/* class gets appended to canvas when user dragging over on it */\r\n.inside {\r\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n  box-shadow: inset 0 0 26px 0.5px rgba(20, 180, 81, 0.75);\r\n}\r\n\r\n.trash-box.inside,\r\n.dropzone.inside.no-space {\r\n  -webkit-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.5);\r\n  -moz-box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\r\n  box-shadow: inset 0 0 26px 0.5px rgba(230, 23, 23, 0.75);\r\n}\r\n\r\n.dropzone {\r\n  width: 100%;\r\n  padding: 10px;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  background: #f0faff;\r\n  border: 1px solid #0277bd;\r\n}\r\n\r\n.dropzone.empty {\r\n  padding: 40px;\r\n}\r\n\r\n.palette {\r\n  padding: 10px;\r\n  background: #fff;\r\n  box-sizing: border-box;\r\n  border: 1px solid #01579b;\r\n}\r\n\r\n.drag-item {\r\n  padding: 10px;\r\n  color: #01579b;\r\n  box-sizing: border-box;\r\n  background-color: #b3e5fc;\r\n  border: 1px solid #01579b;\r\n}\r\n\r\n.dropzone-placeholder {\r\n  width: 100%;\r\n  color: #01579b;\r\n  text-align: center;\r\n  position: absolute;\r\n  left: 0;\r\n  top: calc(50% - 10px);\r\n  animation-name: changeColor;\r\n  animation-duration: 2s;\r\n  animation-timing-function: ease-in-out;\r\n  animation-iteration-count: infinite;\r\n}\r\n\r\n@keyframes changeColor {\r\n  25% {\r\n    transform: scale(1);\r\n    opacity: 1;\r\n  }\r\n\r\n  75% {\r\n    transform: scale(1);\r\n    opacity: 0.5;\r\n  }\r\n}\r\n\r\n.palette-wrapper .drag-item {\r\n  color: #fff;\r\n  background-color: #01579b;\r\n}\r\n\r\n.drag-item + div {\r\n  margin-top: 10px;\r\n}\r\n\r\n.drag-item.after,\r\n.drag-item.before {\r\n  position: relative;\r\n}\r\n\r\n.drag-item.after::after {\r\n  content: '';\r\n  position: absolute;\r\n  width: 50%;\r\n  height: 1px;\r\n  background: #14b451;\r\n  left: 50%;\r\n  bottom: -1px;\r\n  border-radius: 50%;\r\n  transform: translate(-50%, 0);\r\n  -webkit-box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\r\n  -moz-box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\r\n  box-shadow: 0px 4px 10px 0px rgba(20, 180, 81, 1);\r\n}\r\n\r\n.drag-item.before::before {\r\n  content: '';\r\n  position: absolute;\r\n  width: 50%;\r\n  height: 1px;\r\n  background: #14b451;\r\n  left: 50%;\r\n  top: -1px;\r\n  border-radius: 50%;\r\n  transform: translate(-50%, 0);\r\n  -webkit-box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\r\n  -moz-box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\r\n  box-shadow: 0px -1px 10px 0.3px rgba(23, 180, 81, 1);\r\n}\r\n\r\n.trash-box {\r\n  padding: 30px 10px;\r\n  margin: 10px 0;\r\n  color: #b71c1c;\r\n  background: #ffcdd2;\r\n  text-align: center;\r\n  border: 1px solid #b71c1c;\r\n}\r\n",""])},function(e,t,n){var r=n(8);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(6)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=u(n(1)),i=u(n(2)),s=u(n(0)),l=u(n(3));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._onStateChange=function(e){n.setState({currentState:e})},n._renderElementInPreviewMode=function(e){var t={},o=n.registeredPaletteElements.find(function(t){return t.type===e.type});return Array.isArray(e.fields)&&e.fields.forEach(function(e){t[e.dropzoneID]=t[e.dropzoneID]||[],t[e.dropzoneID]=t[e.dropzoneID].concat(n._renderElementInPreviewMode(e))}),a.default.createElement(o.component,r({id:e.id,key:e.id,childNode:t},r({},e,{showPreview:!0,showBasicContent:!1})))},n.state={currentState:l.default.getState()},n.registeredPaletteElements=s.default.getRegisteredPaletteElements(),l.default.addEventListener(n._onStateChange),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){var e=this.state.currentState[0];return"function"==typeof this.props.children?this.props.children({children:e.fields.map(this._renderElementInPreviewMode)}):a.default.createElement("div",{className:"preview-container"},e.fields.map(this._renderElementInPreviewMode))}}]),t}();f.propTypes={children:i.default.func},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(1),a=l(o),i=l(n(2)),s=l(n(0));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._manageInsideClass=function(e,t){var r=e.target;n.trashRef.current===r&&r.classList[t]("inside")},n._onDrop=function(e){e.preventDefault(),e.stopPropagation();var t=s.default.getDraggedElement();if(!t)return!1;var r=n.props,o=r.onBeforeTrash,a=r.onAfterTrash,i=t.removeElement,l=o(t);return n._manageInsideClass(e,"remove"),l&&s.default.getAttemptToRemove()&&(i(t.elementID,function(){a()}),s.default.setDraggedElement(null)),s.default.setAttemptToRemove(!1),!0},n._onDragOver=function(e){e.preventDefault()},n._onDragLeave=function(e){n._manageInsideClass(e,"remove")},n._onDragEnter=function(e){s.default.getDraggedElement()&&n._manageInsideClass(e,"add")},n.trashRef=a.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement("div",{ref:this.trashRef,className:"trash-box",onDragLeave:this._onDragLeave,onDragEnter:this._onDragEnter,onDragOver:this._onDragOver,onDrop:this._onDrop},this.props.children||a.default.createElement("span",null,"Trash Box"))}}]),t}();u.propTypes={onBeforeTrash:i.default.func,onAfterTrash:i.default.func,children:i.default.oneOfType([i.default.arrayOf(i.default.element),i.default.element])},u.defaultProps={onBeforeTrash:function(){return!0},onAfterTrash:function(){return!0}},t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=u(a),s=u(n(2)),l=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),s=0;s<o;s++)a[s]=arguments[s];return n=r=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._renderList=function(e){var t=l.default.getRegisteredPaletteElements().find(function(t){return t.type===e.type});return t?i.default.createElement(t.component,e):null},f(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"render",value:function(){var e=this,t=this.props.paletteElements;return i.default.createElement("div",{className:"palette"},t.map(function(t){return e._renderList(r({},t,{key:t.id,showBasicContent:!0}))}))}}]),t}();c.propTypes={paletteElements:s.default.arrayOf(function(e){var t=!1;return e.forEach(function(n){n&&!n.id&&(t="`id` is required in all palette element"),e.filter(function(e){return e.id===n.id}).length>1&&(t="`id` of palette element should be unique")}),!t||new Error(t)})},c.defaultProps={paletteElements:[]},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(1),i=u(a),s=u(n(2)),l=u(n(0));function u(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._dragEnd=function(e){e.stopPropagation(),n.dragElemRef.current.classList.remove("before","after"),l.default.setDraggedElement(null)},n._dragStart=function(e){e.stopPropagation();var t=n.props,r=t.id,o=t.type,a=t.name,i=t.payload,s=t.dropzoneID,u=t.removeElement,f=t.checkAndRemoveElement,c={id:r,type:o,name:a,payload:i};e.dataTransfer.effectAllowed="copy",e.dataTransfer.setData("data",JSON.stringify(c)),s&&l.default.setDraggedElement({elementID:r,dropzoneID:s,removeElement:u,checkAndRemoveElement:f})},n._onDragOver=function(e){var t=n.dragElemRef.current.getBoundingClientRect(),r=e.clientY;if(!n.props.spaceAvailable)return!1;r>=t.y&&r<=t.y+t.height&&(r<t.y+t.height/2?(n.dragElemRef.current.classList.remove("after"),n.dragElemRef.current.classList.add("before"),l.default.setDropPostion(n.props.index)):(n.dragElemRef.current.classList.remove("before"),n.dragElemRef.current.classList.add("after"),l.default.setDropPostion(n.props.index+1)));return!0},n._onDragLeave=function(){n.dragElemRef.current.classList.remove("before","after")},n.dragElemRef=i.default.createRef(),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),o(t,[{key:"componentWillReceiveProps",value:function(e){this.props.initDone!==e.initDone&&e.initDone&&this.props.updateState()}},{key:"render",value:function(){var e=this.props,t=e.elementProps,n=e.draggable,o=null;return this.props.dropzoneID&&(o={onDragOver:this._onDragOver,onDragLeave:this._onDragLeave}),n&&(o=r({},o,{draggable:!0})),i.default.createElement("div",r({ref:this.dragElemRef,className:"drag-item",onDragStart:this._dragStart,onDragEnd:this._dragEnd},t,o),this.props.children)}}]),t}();f.propTypes={id:s.default.string.isRequired,name:s.default.string,initDone:s.default.bool,index:s.default.number,draggable:s.default.bool,spaceAvailable:s.default.bool,updateState:s.default.func,dropzoneID:s.default.string,payload:s.default.instanceOf(Object),elementProps:s.default.instanceOf(Object),type:s.default.string.isRequired,children:s.default.oneOfType([s.default.arrayOf(s.default.element),s.default.element]).isRequired,removeElement:s.default.func,checkAndRemoveElement:s.default.func},f.defaultProps={checkAndRemoveElement:function(){return!0},elementProps:null,payload:null,draggable:!0,updateState:function(){return!0}},t.default=f},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,s,l){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var f=[n,o,a,i,s,l],c=0;(u=new Error(t.replace(/%s/g,function(){return f[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=n(16),o=n(15),a=n(14);e.exports=function(){function e(e,t,n,r,i,s){s!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=i(n(1)),a=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return o.default.createElement("div",{className:"main-canvas"},o.default.createElement(a.default,r({},e,{parentID:"root",id:"root",initDone:!0})))}},function(e,t,n){"use strict";var r=c(n(18)),o=c(n(4)),a=c(n(13)),i=c(n(12)),s=c(n(11)),l=c(n(10)),u=c(n(3)),f=c(n(0));function c(e){return e&&e.__esModule?e:{default:e}}n(9),e.exports={Canvas:r.default,Dropzone:o.default,Draggable:a.default,Palette:i.default,Trash:s.default,Preview:l.default,state:u.default,core:f.default,registerPaletteElements:f.default.registerPaletteElements}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,